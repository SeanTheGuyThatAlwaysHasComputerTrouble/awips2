#!/bin/sh 
#
##############################################################################
#
# This is the script to display and create the public climate products.  It
# takes over from climate.sh if user responds to new data notification.  It
# runs in the background, as launched from hmMonitor.tcl
#
# Modification History:
# ---------------------
# 12/05/2002  OB2  Bob Morris         - Removed CLIMATE_BIN_DIR definition, it
#                                       is set in readenv.sh. 
#                                     - Replace -a's in tests.
#                                     - Replace /adapt_apps/ with /climate/
#                                     - Set env vars. IFPS_SITE_OFFICE_NAME
#                                       and IFPS_SITE_TIMEZONE for format_cli.
#                                     - General cleanup.
# 01/27/2003  OB2  Bob Morris         - Fix path to catRecordClimateData.sh
#                                     - Made killpid work in both BASH, HP
# 02/03/2003  OB2  Bob Morris         - Modified recordClimate remsh/rsh logic,
#                                       and pass log file as argument.
# 02/11/2003  OB2  Bob Morris         - Modified ifps env vars set logic, strip
#                                       quotes from IFPS_SITE_OFFICE_NAME
# 03/28/2003  OB2  Bob Morris         - Fix env var ID for IFPS_SITE_OFFICE_NAME
#                                       and modified recordClimate logic/messages
# 04/04/2003  OB2  Bob Morris         - Synchonize with climate.sh's messages
#
# 11/14/2003  OB4  Manan Dalal        - Removed all occurences of r-commands
# 10/28/2004  OB5  Manan Dalal        - Removing everything, including pipe files
#                                       from CLIMATE_TMP_DIR. Pipe files are no
#                                       longer necessary.
##############################################################################

# Set the following so that `ps -eo pid,args ...` in killpid works in HP-UX.
export UNIX95=1

#
# This function will kill the process id of the "Climate is Running" gui
# (wait.tcl).  It is used throughout the scripts.
#
function killpid {
pid_func=`ps -eo pid,args | grep -E 'wish[ ].*wait.tcl' | awk '{print $1}'`
#echo "pid_func in killpid is $pid_func"
if test "$pid_func" != ""
then
   kill $pid_func 2> /dev/null  1> /dev/null
fi
}

#
# Change the directory to the temporary
# climate directory. But,
# before trying to switch to the directory, first make sure that
# it exists...
#
#
# Set the file path environment variables
#

if [ "$CLIMATE_DIR" = "" ]
then
  echo "Fatal error in display.sh: CLIMATE_DIR not defined in environment!  Exiting."
  exit 1
fi

CLIMATE_DATA_DIR=${CLIMATE_DIR}/data; export CLIMATE_DATA_DIR
CLIMATE_TMP_DIR=${CLIMATE_DIR}/tmp; export CLIMATE_TMP_DIR

if [ ! -d ${CLIMATE_DATA_DIR} ]
then
   echo "Directory ${CLIMATE_DATA_DIR} does not exist." 
   echo "Check installation and setup of Climate routines."
   echo "Halting display.sh script execution .... "
   exit 1
fi

if [ ! -d ${CLIMATE_TMP_DIR} ]
then
   echo "Directory ${CLIMATE_TMP_DIR} does not exist." 
   echo "Check installation and setup of Climate routines."
   echo "Halting display.sh script execution .... "
   exit 1
fi

cd ${CLIMATE_TMP_DIR}
LOGFILE=${CLIMATE_TMP_DIR}/tmp.txt

# 
# Display the running clock GUI which lets user know climate is running.
#
wait.tcl &

echo "" >> $LOGFILE
echo "Starting display_climate $1 $2 in display.sh...... " >> $LOGFILE

# Make sure that the display_climate executable exists and can be run.

if [ ! -s ${CLIMATE_BIN_DIR}/display_climate ]
then
   echo "The display_climate executable does not exist!" >> $LOGFILE
   echo "Halting display.sh script execution .... " >> $LOGFILE
   error.tcl &
   killpid
   exit 1
else if [ ! -x ${CLIMATE_BIN_DIR}/display_climate ]
     then 
        echo "display_climate does not have execute permission!" >> $LOGFILE
        echo "Halting display.sh script execution .... " >> $LOGFILE
        error.tcl &
        killpid
        exit 1
     fi
fi

${CLIMATE_BIN_DIR}/display_climate $1 $2 0 >>$LOGFILE 2>>$LOGFILE

# Make sure that display_climate did its thing correctly

display_status=$?

if [ $display_status -ne 0 ]
then
#   echo "display climate status =$display_status "
   echo "display_climate returned an error in display.sh. Stopping execution. " >> $LOGFILE
   error.tcl &
   killpid
   exit 1
fi

echo "Returned from display_climate in display.sh $1 $2, continuing..." >> $LOGFILE
echo "" >> $LOGFILE

# Copy the files generated by set_up_climate

cp ${CLIMATE_DATA_DIR}/*_$2_* ${CLIMATE_TMP_DIR}

if [ $? -ne 0 ]
then
   echo "display.sh: The copy of the files generated by set_up_climate failed." >> $LOGFILE
   error.tcl &
   killpid
   exit 1
fi

#
# Set the waiting times for format_climate.  The waiting time determines the
# amount of time the notification server will wait before sending back a
# message that the user didn't acknowledge the alert.  Ignore the first wait
# time (don't set DATA_WAIT_TIME) except for value-checking file entries.
#
fileok="true"
if [ -s ${CLIMATE_DATA_DIR}/wait_times.txt ]
then
   if [ `wc -w <${CLIMATE_DATA_DIR}/wait_times.txt` -eq 2 ]
   then
      echo "display.sh: Reading from ${CLIMATE_DATA_DIR}/wait_times.txt"  >> $LOGFILE
      read wait1 wait2 < ${CLIMATE_DATA_DIR}/wait_times.txt
      echo "wait1, wait2 = ${wait1}, ${wait2} after file read." >> $LOGFILE
      if [ ${wait1} -ge 0 -a ${wait2} -ge 0 ]
      then
         export PRODUCT_WAIT_TIME=$wait2
         echo "product wait = $PRODUCT_WAIT_TIME" >> $LOGFILE
      else
         echo "Warning: Improper entries in wait_times.txt file." >> $LOGFILE
         echo "Must contain exactly two positive integer values." >> $LOGFILE
         fileok="false"
      fi
   else
      echo "Warning: Improper number of entries in wait_times.txt file." >> $LOGFILE
      echo "Must contain exactly two positive integer values." >> $LOGFILE
      fileok="false"
   fi
else 
   echo "Problem: ${CLIMATE_DATA_DIR}/wait_times.txt file not found." >> $LOGFILE
   fileok="false"
fi

if [ "$fileok" = "false" ]
then
   echo "display.sh: Reverting to default time of 10 minutes:" >> $LOGFILE
   PRODUCT_WAIT_TIME=10
   export PRODUCT_WAIT_TIME
   echo "product wait = $PRODUCT_WAIT_TIME" >> $LOGFILE
fi

# Prepare to run format_climate program
#
# Remove old run's RecordClimate*.dat files before running format_climate
#

rm -f *.dat

#
# Check to see if the new ifps-ccc.env site file exists and if so, extract the
# necessary environment variables and set them for climate.  If unavailable,
# notify user and log errors.
#
  echo "display.sh: Getting WFO Name and local Time Zone from IFPS file." >> $LOGFILE
  ifpsfile="/awips/adapt/ifps/localbin/ifps-${ICWF_SITE}.env"
  ourcopy="${CLIMATE_TMP_DIR}/ifps-${ICWF_SITE}.env"
  haveifps="true"

if [ -s $ifpsfile ]
then
   export IFPS_SITE_OFFICE_NAME
   export IFPS_SITE_TIMEZONE
   cp $ifpsfile $ourcopy
   IFPS_SITE_OFFICE_NAME=`grep "IFPS_SITE_OFFICE_NAME=" $ourcopy | cut -f2 -d= | sed -e "s/\"//g" | sed -e "s/'//g"`
   echo "IFPS_SITE_OFFICE_NAME = $IFPS_SITE_OFFICE_NAME" >> $LOGFILE
   IFPS_SITE_TIMEZONE=`grep "IFPS_SITE_TIMEZONE=" $ourcopy | cut -f2 -d=`
   echo "IFPS_SITE_TIMEZONE = $IFPS_SITE_TIMEZONE" >> $LOGFILE
   echo "" >> $LOGFILE

   if [ "$IFPS_SITE_OFFICE_NAME" = "" -o "$IFPS_SITE_TIMEZONE" = "" ]
   then
      echo "WARNING!  IFPS_SITE_OFFICE_NAME and/or IFPS_SITE_TIMEZONE not defined in file:" >> $LOGFILE
      echo "  ${ifpsfile}" >> $LOGFILE
      echo "NWWS Climate products will have wrong time zone and/or WFO name!" >> $LOGFILE
      echo "" >> $LOGFILE
      haveifps="false"
   fi
else
   haveifps="false"
   echo "" >> $LOGFILE
   echo "IFPS environment file $ifpsfile not found." >> $LOGFILE
   echo "NWWS Climate products will have wrong time zone and/or WFO name!" >> $LOGFILE
   echo "" >> $LOGFILE
fi


# Make sure that the format climate executable exists and has execute permission.

if [ ! -s ${CLIMATE_BIN_DIR}/format_climate ]
then
   echo "The format_climate executable does not exist!" >> $LOGFILE
   echo "Halting script execution .... " >> $LOGFILE
   error.tcl &
   killpid
   exit 1
else if [ ! -x ${CLIMATE_BIN_DIR}/format_climate ]
     then
        echo "Format_climate does not have execute permission!" >> $LOGFILE
        echo "Halting script execution .... " >> $LOGFILE
        error.tcl &
        killpid
        exit 1
     fi
fi

echo "" >> $LOGFILE
echo "display.sh: Starting format_climate ....... " >> $LOGFILE 2>>$LOGFILE

format_flag=1
#echo "format_flag = $format_flag"
echo "" >> $LOGFILE

${CLIMATE_BIN_DIR}/format_climate $1 $2 $format_flag 0 >> $LOGFILE 2>&1

format_status=$?

echo "" >> $LOGFILE
echo "Returned from format_climate in display.sh" >> $LOGFILE
echo "" >> $LOGFILE

echo "Climate has completed its run.  Reporting status:" >> $LOGFILE
echo "" >> $LOGFILE

# Check to make sure that format_climate ran to completion

case $format_status in
     0)
           killpid

           if [ "$recordClimate" != "NO" -a "$haveifps" = "true" ]
           then
	      success.tcl &
     	      echo "display.sh: format_climate returned a value of 0. Climate returned no errors." >> $LOGFILE
	      echo "display.sh: recordClimate also returned a value of 0, for success." >> $LOGFILE
           else
     	      echo "display.sh: format_climate returned a value of 0, for success." >> $LOGFILE
	      echo "display.sh: recordClimate also returned a value of 0, for success." >> $LOGFILE

	      # Remove *.dat file now that they are not needed.
	      rm -f ${CLIMATE_TMP_DIR}/*.dat

              if [ "$haveifps" = "false" ]
              then
                 echo "However, IFPS environment file problems were encountered, see preceding messages." >> $LOGFILE
              fi

              echo "Climate exiting with a report of an error due to this situation." >> $LOGFILE
              error.tcl &
           fi
           ;;
     1)
           echo "format_climate returned a value of 1.  This means the program" >> $LOGFILE
	   echo "encountered an invalid input argument, was aborted by user, or" >> $LOGFILE
	   echo "had problems invoking a non-climate process." >> $LOGFILE
	   echo " - Check the format_climate log file for details." >> $LOGFILE

           if [ "$haveifps" = "false" ]
           then
              echo "" >> $LOGFILE
              echo "Also, IFPS environment file problems were encountered, see preceding messages." >> $LOGFILE
              echo "Climate exiting with reported errors due to these situations." >> $LOGFILE
           fi

           killpid
           error.tcl &
           ;;
     3)
           echo "display.sh: format_climate returned a value of 3, fatal database (dis)connect error." >> $LOGFILE
	   echo " - Check the format_climate log file for details." >> $LOGFILE
           killpid
           error.tcl &
           exit 1
           ;;
     5)
	   echo "RecordClimate returned error while running within format_climate." >> $LOGFILE
           echo "See preceding messages for details." >> $LOGFILE
           echo "This problem does not imply that RER would have been created - record" >>$LOGFILE
           echo "may have occurred only at station not in NWWS CLI setup." >> $LOGFILE
           echo "Climate exiting with a report of an error due to this situation." >> $LOGFILE

	   rm -f ${CLIMATE_TMP_DIR}/*.dat	

           if test "$1" != "auto"
           then
              error.tcl &
              killpid
           fi
           ;;
     *)
           echo "display.sh: format_climate returned an unexpected value of $create_status."
	   echo " - Check the format_climate log file for details." >> $LOGFILE
           killpid
           error.tcl &
           exit 1
           ;;
esac

exit 0
