/*
    File: GeoArea.pgc
    Author  : CDBGEN
    Created : Wed Aug 06 12:34:23 EDT 2008 using database hd_ob83empty
    Description: This .pgc file has an associated header file. 
            and defines all functions and the table's INTERNAL record structure.
*/

#include "GeoArea.h"

EXEC SQL include sqlda;
EXEC SQL include sqltypes;
EXEC SQL include sql3types;
EXEC SQL include pgtypes_timestamp;
EXEC SQL include pgtypes_date;
EXEC SQL include pgtypes_interval;
EXEC SQL include pgtypes_numeric;

EXEC SQL BEGIN DECLARE SECTION;
struct GeoArea_t
{
    char		area_id[9];
    char		name[41];
    char		boundary_type[7];
    double		interior_lat;
    double		interior_lon;

    int		ind_name;
    int		ind_boundary_type;
    int		ind_interior_lat;
    int		ind_interior_lon;
} GeoArea_rec;
EXEC SQL END DECLARE SECTION;

#define QUERY_LEN 9999
static int errorLoggingOn = 1;

static DbStatus dbStatus;


/* ------------------------------------------------------------------------- */

GeoArea * GetGeoArea(const char * where)
{

    GeoArea * listPtr = NULL;
    GeoArea * structPtr = NULL;
    char selectStatement[] = "SELECT * FROM GeoArea ";

    int rowCount = 0;
    int first = 1;

    EXEC SQL BEGIN DECLARE SECTION;

    struct GeoArea_t   dbs;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, SELECT);

    strcpy(queryBuffer, selectStatement);

    if ( ( where != NULL ) && ( * where != '\0' ) ) 
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE tid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetGeoArea() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL DECLARE tcur1 CURSOR WITH HOLD FOR tid;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetGeoArea() in Declare cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL OPEN tcur1;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetGeoArea() in Open cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    listPtr = NULL;
    memset(&dbs, '\0', sizeof(dbs));

    EXEC SQL FETCH tcur1 INTO 
    :dbs.area_id, :dbs.name:dbs.ind_name, 
    :dbs.boundary_type:dbs.ind_boundary_type, :dbs.interior_lat:dbs.ind_interior_lat, 
    :dbs.interior_lon:dbs.ind_interior_lon    ;

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetGeoArea() in Initial FETCH section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    while (SQLCODE == 0) 
    {
        rowCount++;
        if ((structPtr = (GeoArea *) malloc(sizeof(GeoArea))) != NULL)
        {

            strcpy(structPtr->area_id, dbs.area_id);

            strcpy(structPtr->name, dbs.name);
            setNullIfIndicated(dbs.ind_name, CHAR, structPtr->name);

            strcpy(structPtr->boundary_type, dbs.boundary_type);
            setNullIfIndicated(dbs.ind_boundary_type, CHAR, structPtr->boundary_type);

            structPtr->interior_lat = dbs.interior_lat;
            setNullIfIndicated(dbs.ind_interior_lat, DOUBLE, &structPtr->interior_lat);

            structPtr->interior_lon = dbs.interior_lon;
            setNullIfIndicated(dbs.ind_interior_lon, DOUBLE, &structPtr->interior_lon);


        }
        else
        {
            break;
        }

        if (first)
        {
            listPtr = structPtr;
            ListInit(&listPtr->list);
            first = 0;
        }

        ListAdd(&listPtr->list, &structPtr->node);
        memset(&dbs, '\0', sizeof(dbs));

        EXEC SQL FETCH tcur1 INTO 
        :dbs.area_id, :dbs.name:dbs.ind_name, 
        :dbs.boundary_type:dbs.ind_boundary_type, :dbs.interior_lat:dbs.ind_interior_lat, 
        :dbs.interior_lon:dbs.ind_interior_lon        ;

        if (SQLCODE < 0)
        {
            if (errorLoggingOn)
            {
                fprintf(stderr, "GetGeoArea() in Nth fetch section --- ERROR\n");
                fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
                fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
                fflush(stderr);
            }
            initDbStatus(&dbStatus);
            return (NULL);
        }
    }

    initDbStatus(&dbStatus);
    setDbStatusRowsAffected(&dbStatus, rowCount);

    EXEC SQL CLOSE tcur1;
    return(listPtr);
}

/* ------------------------------------------------------------------------- */

GeoArea * SelectGeoArea(const char * where)
{

    GeoArea * listPtr = NULL;
    GeoArea * structPtr = NULL;
    char selectStatement[] = "SELECT * FROM GeoArea ";

    int rowCount = 0;
    int first = 1;

    EXEC SQL BEGIN DECLARE SECTION;

    struct GeoArea_t   dbs;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, SELECT);

    strcpy(queryBuffer, selectStatement);

    if ( ( where != NULL ) && ( * where != '\0' ) ) 
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE tid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectGeoArea() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL DECLARE tcur2 CURSOR WITH HOLD FOR tid;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectGeoArea() in Declare cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL OPEN tcur2;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectGeoArea() in Open cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    listPtr = NULL;
    memset(&dbs, '\0', sizeof(dbs));

    EXEC SQL FETCH tcur2 INTO 
    :dbs.area_id, :dbs.name:dbs.ind_name, 
    :dbs.boundary_type:dbs.ind_boundary_type, :dbs.interior_lat:dbs.ind_interior_lat, 
    :dbs.interior_lon:dbs.ind_interior_lon    ;

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectGeoArea() in Initial FETCH section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    while (SQLCODE == 0) 
    {
        rowCount++;
        if ((structPtr = (GeoArea *) malloc(sizeof(GeoArea))) != NULL)
        {

            strcpy(structPtr->area_id, dbs.area_id);

            strcpy(structPtr->name, dbs.name);
            setNullIfIndicated(dbs.ind_name, CHAR, structPtr->name);

            strcpy(structPtr->boundary_type, dbs.boundary_type);
            setNullIfIndicated(dbs.ind_boundary_type, CHAR, structPtr->boundary_type);

            structPtr->interior_lat = dbs.interior_lat;
            setNullIfIndicated(dbs.ind_interior_lat, DOUBLE, &structPtr->interior_lat);

            structPtr->interior_lon = dbs.interior_lon;
            setNullIfIndicated(dbs.ind_interior_lon, DOUBLE, &structPtr->interior_lon);


        }
        else
        {
            break;
        }

        if (first)
        {
            listPtr = structPtr;
            ListInit(&listPtr->list);
            first = 0;
        }

        ListAdd(&listPtr->list, &structPtr->node);
        memset(&dbs, '\0', sizeof(dbs));

        EXEC SQL FETCH tcur2 INTO 
        :dbs.area_id, :dbs.name:dbs.ind_name, 
        :dbs.boundary_type:dbs.ind_boundary_type, :dbs.interior_lat:dbs.ind_interior_lat, 
        :dbs.interior_lon:dbs.ind_interior_lon        ;

        if (SQLCODE < 0)
        {
            if (errorLoggingOn)
            {
                fprintf(stderr, "SelectGeoArea() in Nth fetch section --- ERROR\n");
                fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
                fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
                fflush(stderr);
            }
            initDbStatus(&dbStatus);
            return (NULL);
        }
    }

    initDbStatus(&dbStatus);
    setDbStatusRowsAffected(&dbStatus, rowCount);

    EXEC SQL CLOSE tcur2;
    return(listPtr);
}

/* ------------------------------------------------------------------------- */

int SelectGeoAreaCount(const char * where)
{

    char selectStatement[] = "SELECT COUNT(*) FROM GeoArea ";

    EXEC SQL BEGIN DECLARE SECTION;

    int rowCount = 0;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, SELECT);

    strcpy(queryBuffer, selectStatement);

    if ( ( where != NULL ) && ( * where != '\0' ) ) 
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE tid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountGeoArea() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }

    EXEC SQL DECLARE tcur3 CURSOR WITH HOLD FOR tid;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountGeoArea() in Declare cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }

    EXEC SQL OPEN tcur3;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountGeoArea() in Open cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }


    EXEC SQL FETCH tcur3 INTO :rowCount;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountGeoArea() in Initial FETCH section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }

    initDbStatus(&dbStatus);
    setDbStatusRowsAffected(&dbStatus, rowCount);

    EXEC SQL CLOSE tcur3;
    return(rowCount);
}

/* ------------------------------------------------------------------------- */

int PutGeoArea(const GeoArea * structPtr)
{
    EXEC SQL BEGIN DECLARE SECTION;

    struct GeoArea_t  dbs;

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, INSERT);

    if (structPtr == NULL)
    {
        return(ERR_BAD_ARGS);
    }

    memset(&dbs, '\0', sizeof(dbs));

    strcpy(dbs.area_id, structPtr->area_id);

    strcpy(dbs.name, structPtr->name);
    dbs.ind_name = getIndicator(CHAR, (void *)structPtr->name);

    strcpy(dbs.boundary_type, structPtr->boundary_type);
    dbs.ind_boundary_type = getIndicator(CHAR, (void *)structPtr->boundary_type);

    dbs.interior_lat = structPtr->interior_lat;
    dbs.ind_interior_lat = getIndicator(DOUBLE, (void *)&structPtr->interior_lat);

    dbs.interior_lon = structPtr->interior_lon;
    dbs.ind_interior_lon = getIndicator(DOUBLE, (void *)&structPtr->interior_lon);


    EXEC SQL INSERT INTO GeoArea (area_id,name,
        boundary_type,interior_lat,interior_lon        )
        VALUES (
         :dbs.area_id, :dbs.name:dbs.ind_name, :dbs.boundary_type:dbs.ind_boundary_type,
         :dbs.interior_lat:dbs.ind_interior_lat, :dbs.interior_lon:dbs.ind_interior_lon);

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "PutGeoArea() in Insert section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

int InsertGeoArea(const GeoArea * structPtr)
{
    EXEC SQL BEGIN DECLARE SECTION;

    struct GeoArea_t  dbs;

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, INSERT);

    if (structPtr == NULL)
    {
        return(ERR_BAD_ARGS);
    }

    memset(&dbs, '\0', sizeof(dbs));

    strcpy(dbs.area_id, structPtr->area_id);

    strcpy(dbs.name, structPtr->name);
    dbs.ind_name = getIndicator(CHAR, (void *)structPtr->name);

    strcpy(dbs.boundary_type, structPtr->boundary_type);
    dbs.ind_boundary_type = getIndicator(CHAR, (void *)structPtr->boundary_type);

    dbs.interior_lat = structPtr->interior_lat;
    dbs.ind_interior_lat = getIndicator(DOUBLE, (void *)&structPtr->interior_lat);

    dbs.interior_lon = structPtr->interior_lon;
    dbs.ind_interior_lon = getIndicator(DOUBLE, (void *)&structPtr->interior_lon);


    EXEC SQL INSERT INTO GeoArea (area_id,name,
        boundary_type,interior_lat,interior_lon        )
        VALUES (
         :dbs.area_id, :dbs.name:dbs.ind_name, :dbs.boundary_type:dbs.ind_boundary_type,
         :dbs.interior_lat:dbs.ind_interior_lat, :dbs.interior_lon:dbs.ind_interior_lon);

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "InsertGeoArea() in Insert section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

int UpdateGeoArea(const GeoArea *structPtr, const char *where)
{
    EXEC SQL BEGIN DECLARE SECTION;

    struct GeoArea_t   dbs;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, UPDATE);

    strcpy(dbs.area_id, structPtr->area_id);

    strcpy(dbs.name, structPtr->name);
    dbs.ind_name = getIndicator(CHAR, (void *)structPtr->name);

    strcpy(dbs.boundary_type, structPtr->boundary_type);
    dbs.ind_boundary_type = getIndicator(CHAR, (void *)structPtr->boundary_type);

    dbs.interior_lat = structPtr->interior_lat;
    dbs.ind_interior_lat = getIndicator(DOUBLE, (void *)&structPtr->interior_lat);

    dbs.interior_lon = structPtr->interior_lon;
    dbs.ind_interior_lon = getIndicator(DOUBLE, (void *)&structPtr->interior_lon);


    sprintf(queryBuffer, " UPDATE GeoArea SET " );
    strcat(queryBuffer, "area_id = ? , name = ? , boundary_type = ? , interior_lat = ? , interior_lon = ? ");

    if ( (where != NULL) && (*where != '\0'))
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE uid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "UpdateGeoArea() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return(SQLCODE);
    }

    EXEC SQL EXECUTE uid USING  :dbs.area_id, :dbs.name:dbs.ind_name, :dbs.boundary_type:dbs.ind_boundary_type, :dbs.interior_lat:dbs.ind_interior_lat, :dbs.interior_lon:dbs.ind_interior_lon;

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "UpdateGeoArea() in Execute section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return(SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

int DeleteGeoArea(const char *where)
{
    char deleteStatement[] = "DELETE FROM GeoArea ";
    EXEC SQL BEGIN DECLARE SECTION;

    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    strcpy(queryBuffer, deleteStatement);
    if ( (where != NULL) && (*where != '\0'))
    {
        strcat(queryBuffer, where);
    }
    EXEC SQL EXECUTE IMMEDIATE :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "DeleteGeoArea() in Execute Immediate section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return(SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

int UpdateGeoAreaByRecord (const GeoArea * newStructPtr, const GeoArea * oldStructPtr)
{
    char whereClause[BUFSIZ];
    GetGeoAreaPrimaryKeyWhereString(oldStructPtr, whereClause);
    return (UpdateGeoArea(newStructPtr, whereClause));
}

/* ------------------------------------------------------------------------- */

int InsertOrUpdateGeoArea(const GeoArea * structPtr)
{
    UpdateGeoAreaByRecord(structPtr, structPtr);
    setDbStatusSqlCommand(&dbStatus, UPDATE);

    if ( (SQLCODE < 0) || (SQLCODE == 100) )
    {
        InsertGeoArea(structPtr);
        setDbStatusSqlCommand(&dbStatus, INSERT);
    }

    initDbStatus(&dbStatus);
    return(SQLCODE);
}

/* ------------------------------------------------------------------------- */

int InsertIfUniqueGeoArea(const GeoArea * structPtr, bool *isUnique)
{
    int resultCode = 0;
    if (GeoAreaExists(structPtr))
    {
        setDbStatusSqlCommand(&dbStatus, SELECT);
        *isUnique = false;
        resultCode = dbStatus.sql_code;
    }
    else
    {
        resultCode = dbStatus.sql_code;
        if (resultCode == 0)
        {
            InsertGeoArea(structPtr);
            setDbStatusSqlCommand(&dbStatus, INSERT);
            *isUnique = true;
            resultCode = dbStatus.sql_code;
        }
        else
        {
            *isUnique = false;
        }
    }
    initDbStatus(&dbStatus);

    return(resultCode);
}

/* ------------------------------------------------------------------------- */

int DeleteGeoAreaByRecord(const GeoArea * structPtr)
{
    char whereClause[BUFSIZ];
    GetGeoAreaPrimaryKeyWhereString(structPtr, whereClause);
    return (DeleteGeoArea(whereClause));
}

/* ------------------------------------------------------------------------- */

bool GeoAreaExists(const GeoArea * structPtr)
{
    int result = false;
    int rowCount = 0;
    char whereString[QUERY_LEN];

    GetGeoAreaPrimaryKeyWhereString(structPtr, whereString);
    rowCount = SelectGeoAreaCount(whereString);

    if (rowCount > 0)
    {
        result = true;
    }
    else
    {
        result = false;
    }

    return(result);
}

/* ------------------------------------------------------------------------- */

void GetGeoAreaPrimaryKeyWhereString (const GeoArea * structPtr, char returnWhereString[] )
{
    sprintf(returnWhereString, "WHERE area_id = '%s' ",
            structPtr->area_id);
}

/* ------------------------------------------------------------------------- */

void FreeGeoArea( GeoArea * structPtr)
{
    GeoArea* nextPtr = NULL;

    while (structPtr != NULL)
    {
        nextPtr = ( GeoArea * ) ListNext ( &structPtr->node );
        free (structPtr);
        structPtr = nextPtr;
    }
    return;
}

/* ------------------------------------------------------------------------- */

DbStatus * GetGeoAreaDbStatus()
{
    return &dbStatus;
}

/* ------------------------------------------------------------------------- */

void SetGeoAreaErrorLogging(int value)
{
    errorLoggingOn = value;
    return;
}


/* ------------------------------------------------------------------------- */

