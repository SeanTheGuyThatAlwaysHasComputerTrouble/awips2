/*
    File: RiverStatus.pgc
    Author  : CDBGEN
    Created : Wed Aug 06 12:34:28 EDT 2008 using database hd_ob83empty
    Description: This .pgc file has an associated header file. 
            and defines all functions and the table's INTERNAL record structure.
*/

#include "RiverStatus.h"

EXEC SQL include sqlda;
EXEC SQL include sqltypes;
EXEC SQL include sql3types;
EXEC SQL include pgtypes_timestamp;
EXEC SQL include pgtypes_date;
EXEC SQL include pgtypes_interval;
EXEC SQL include pgtypes_numeric;

EXEC SQL BEGIN DECLARE SECTION;
struct RiverStatus_t
{
    char		lid[9];
    char		pe[3];
    short		dur;
    char		ts[3];
    char		extremum[2];
    float		probability;
    dtime_t		validtime;
    dtime_t		basistime;
    double		value;

    int		ind_dur;
    int		ind_extremum;
    int		ind_probability;
    int		ind_validtime;
    int		ind_basistime;
    int		ind_value;
} RiverStatus_rec;
EXEC SQL END DECLARE SECTION;

#define QUERY_LEN 9999
static int errorLoggingOn = 1;

static DbStatus dbStatus;


/* ------------------------------------------------------------------------- */

RiverStatus * GetRiverStatus(const char * where)
{

    RiverStatus * listPtr = NULL;
    RiverStatus * structPtr = NULL;
    char selectStatement[] = "SELECT * FROM RiverStatus ";

    int rowCount = 0;
    int first = 1;

    EXEC SQL BEGIN DECLARE SECTION;

    struct RiverStatus_t   dbs;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, SELECT);

    strcpy(queryBuffer, selectStatement);

    if ( ( where != NULL ) && ( * where != '\0' ) ) 
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE tid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetRiverStatus() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL DECLARE tcur1 CURSOR WITH HOLD FOR tid;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetRiverStatus() in Declare cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL OPEN tcur1;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetRiverStatus() in Open cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    listPtr = NULL;
    memset(&dbs, '\0', sizeof(dbs));

    EXEC SQL FETCH tcur1 INTO 
    :dbs.lid, :dbs.pe, 
    :dbs.dur:dbs.ind_dur, :dbs.ts, 
    :dbs.extremum:dbs.ind_extremum, :dbs.probability:dbs.ind_probability, 
    :dbs.validtime:dbs.ind_validtime, :dbs.basistime:dbs.ind_basistime, 
    :dbs.value:dbs.ind_value    ;

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetRiverStatus() in Initial FETCH section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    while (SQLCODE == 0) 
    {
        rowCount++;
        if ((structPtr = (RiverStatus *) malloc(sizeof(RiverStatus))) != NULL)
        {

            strcpy(structPtr->lid, dbs.lid);

            strcpy(structPtr->pe, dbs.pe);

            structPtr->dur = dbs.dur;
            setNullIfIndicated(dbs.ind_dur, SHORT, &structPtr->dur);

            strcpy(structPtr->ts, dbs.ts);

            strcpy(structPtr->extremum, dbs.extremum);
            setNullIfIndicated(dbs.ind_extremum, CHAR, structPtr->extremum);

            structPtr->probability = dbs.probability;
            setNullIfIndicated(dbs.ind_probability, FLOAT, &structPtr->probability);

            structPtr->validtime = dbs.validtime;
            setNullIfIndicated(dbs.ind_validtime, DATETIME, &structPtr->validtime);

            structPtr->basistime = dbs.basistime;
            setNullIfIndicated(dbs.ind_basistime, DATETIME, &structPtr->basistime);

            structPtr->value = dbs.value;
            setNullIfIndicated(dbs.ind_value, DOUBLE, &structPtr->value);


        }
        else
        {
            break;
        }

        if (first)
        {
            listPtr = structPtr;
            ListInit(&listPtr->list);
            first = 0;
        }

        ListAdd(&listPtr->list, &structPtr->node);
        memset(&dbs, '\0', sizeof(dbs));

        EXEC SQL FETCH tcur1 INTO 
        :dbs.lid, :dbs.pe, 
        :dbs.dur:dbs.ind_dur, :dbs.ts, 
        :dbs.extremum:dbs.ind_extremum, :dbs.probability:dbs.ind_probability, 
        :dbs.validtime:dbs.ind_validtime, :dbs.basistime:dbs.ind_basistime, 
        :dbs.value:dbs.ind_value        ;

        if (SQLCODE < 0)
        {
            if (errorLoggingOn)
            {
                fprintf(stderr, "GetRiverStatus() in Nth fetch section --- ERROR\n");
                fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
                fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
                fflush(stderr);
            }
            initDbStatus(&dbStatus);
            return (NULL);
        }
    }

    initDbStatus(&dbStatus);
    setDbStatusRowsAffected(&dbStatus, rowCount);

    EXEC SQL CLOSE tcur1;
    return(listPtr);
}

/* ------------------------------------------------------------------------- */

RiverStatus * SelectRiverStatus(const char * where)
{

    RiverStatus * listPtr = NULL;
    RiverStatus * structPtr = NULL;
    char selectStatement[] = "SELECT * FROM RiverStatus ";

    int rowCount = 0;
    int first = 1;

    EXEC SQL BEGIN DECLARE SECTION;

    struct RiverStatus_t   dbs;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, SELECT);

    strcpy(queryBuffer, selectStatement);

    if ( ( where != NULL ) && ( * where != '\0' ) ) 
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE tid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectRiverStatus() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL DECLARE tcur2 CURSOR WITH HOLD FOR tid;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectRiverStatus() in Declare cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL OPEN tcur2;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectRiverStatus() in Open cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    listPtr = NULL;
    memset(&dbs, '\0', sizeof(dbs));

    EXEC SQL FETCH tcur2 INTO 
    :dbs.lid, :dbs.pe, 
    :dbs.dur:dbs.ind_dur, :dbs.ts, 
    :dbs.extremum:dbs.ind_extremum, :dbs.probability:dbs.ind_probability, 
    :dbs.validtime:dbs.ind_validtime, :dbs.basistime:dbs.ind_basistime, 
    :dbs.value:dbs.ind_value    ;

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectRiverStatus() in Initial FETCH section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    while (SQLCODE == 0) 
    {
        rowCount++;
        if ((structPtr = (RiverStatus *) malloc(sizeof(RiverStatus))) != NULL)
        {

            strcpy(structPtr->lid, dbs.lid);

            strcpy(structPtr->pe, dbs.pe);

            structPtr->dur = dbs.dur;
            setNullIfIndicated(dbs.ind_dur, SHORT, &structPtr->dur);

            strcpy(structPtr->ts, dbs.ts);

            strcpy(structPtr->extremum, dbs.extremum);
            setNullIfIndicated(dbs.ind_extremum, CHAR, structPtr->extremum);

            structPtr->probability = dbs.probability;
            setNullIfIndicated(dbs.ind_probability, FLOAT, &structPtr->probability);

            structPtr->validtime = dbs.validtime;
            setNullIfIndicated(dbs.ind_validtime, DATETIME, &structPtr->validtime);

            structPtr->basistime = dbs.basistime;
            setNullIfIndicated(dbs.ind_basistime, DATETIME, &structPtr->basistime);

            structPtr->value = dbs.value;
            setNullIfIndicated(dbs.ind_value, DOUBLE, &structPtr->value);


        }
        else
        {
            break;
        }

        if (first)
        {
            listPtr = structPtr;
            ListInit(&listPtr->list);
            first = 0;
        }

        ListAdd(&listPtr->list, &structPtr->node);
        memset(&dbs, '\0', sizeof(dbs));

        EXEC SQL FETCH tcur2 INTO 
        :dbs.lid, :dbs.pe, 
        :dbs.dur:dbs.ind_dur, :dbs.ts, 
        :dbs.extremum:dbs.ind_extremum, :dbs.probability:dbs.ind_probability, 
        :dbs.validtime:dbs.ind_validtime, :dbs.basistime:dbs.ind_basistime, 
        :dbs.value:dbs.ind_value        ;

        if (SQLCODE < 0)
        {
            if (errorLoggingOn)
            {
                fprintf(stderr, "SelectRiverStatus() in Nth fetch section --- ERROR\n");
                fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
                fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
                fflush(stderr);
            }
            initDbStatus(&dbStatus);
            return (NULL);
        }
    }

    initDbStatus(&dbStatus);
    setDbStatusRowsAffected(&dbStatus, rowCount);

    EXEC SQL CLOSE tcur2;
    return(listPtr);
}

/* ------------------------------------------------------------------------- */

int SelectRiverStatusCount(const char * where)
{

    char selectStatement[] = "SELECT COUNT(*) FROM RiverStatus ";

    EXEC SQL BEGIN DECLARE SECTION;

    int rowCount = 0;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, SELECT);

    strcpy(queryBuffer, selectStatement);

    if ( ( where != NULL ) && ( * where != '\0' ) ) 
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE tid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountRiverStatus() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }

    EXEC SQL DECLARE tcur3 CURSOR WITH HOLD FOR tid;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountRiverStatus() in Declare cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }

    EXEC SQL OPEN tcur3;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountRiverStatus() in Open cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }


    EXEC SQL FETCH tcur3 INTO :rowCount;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountRiverStatus() in Initial FETCH section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }

    initDbStatus(&dbStatus);
    setDbStatusRowsAffected(&dbStatus, rowCount);

    EXEC SQL CLOSE tcur3;
    return(rowCount);
}

/* ------------------------------------------------------------------------- */

int PutRiverStatus(const RiverStatus * structPtr)
{
    EXEC SQL BEGIN DECLARE SECTION;

    struct RiverStatus_t  dbs;

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, INSERT);

    if (structPtr == NULL)
    {
        return(ERR_BAD_ARGS);
    }

    memset(&dbs, '\0', sizeof(dbs));

    strcpy(dbs.lid, structPtr->lid);

    strcpy(dbs.pe, structPtr->pe);

    dbs.dur = structPtr->dur;
    dbs.ind_dur = getIndicator(SHORT, (void *)&structPtr->dur);

    strcpy(dbs.ts, structPtr->ts);

    strcpy(dbs.extremum, structPtr->extremum);
    dbs.ind_extremum = getIndicator(CHAR, (void *)structPtr->extremum);

    dbs.probability = structPtr->probability;
    dbs.ind_probability = getIndicator(FLOAT, (void *)&structPtr->probability);

    dbs.validtime = structPtr->validtime;
    dbs.ind_validtime = getIndicator(DATETIME, (void *)&structPtr->validtime);

    dbs.basistime = structPtr->basistime;
    dbs.ind_basistime = getIndicator(DATETIME, (void *)&structPtr->basistime);

    dbs.value = structPtr->value;
    dbs.ind_value = getIndicator(DOUBLE, (void *)&structPtr->value);


    EXEC SQL INSERT INTO RiverStatus (lid,pe,
        dur,ts,extremum,
        probability,validtime,basistime,
        "value"        )
        VALUES (
         :dbs.lid, :dbs.pe, :dbs.dur:dbs.ind_dur,
         :dbs.ts, :dbs.extremum:dbs.ind_extremum, :dbs.probability:dbs.ind_probability,
         :dbs.validtime:dbs.ind_validtime, :dbs.basistime:dbs.ind_basistime, :dbs.value:dbs.ind_value);

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "PutRiverStatus() in Insert section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

int InsertRiverStatus(const RiverStatus * structPtr)
{
    EXEC SQL BEGIN DECLARE SECTION;

    struct RiverStatus_t  dbs;

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, INSERT);

    if (structPtr == NULL)
    {
        return(ERR_BAD_ARGS);
    }

    memset(&dbs, '\0', sizeof(dbs));

    strcpy(dbs.lid, structPtr->lid);

    strcpy(dbs.pe, structPtr->pe);

    dbs.dur = structPtr->dur;
    dbs.ind_dur = getIndicator(SHORT, (void *)&structPtr->dur);

    strcpy(dbs.ts, structPtr->ts);

    strcpy(dbs.extremum, structPtr->extremum);
    dbs.ind_extremum = getIndicator(CHAR, (void *)structPtr->extremum);

    dbs.probability = structPtr->probability;
    dbs.ind_probability = getIndicator(FLOAT, (void *)&structPtr->probability);

    dbs.validtime = structPtr->validtime;
    dbs.ind_validtime = getIndicator(DATETIME, (void *)&structPtr->validtime);

    dbs.basistime = structPtr->basistime;
    dbs.ind_basistime = getIndicator(DATETIME, (void *)&structPtr->basistime);

    dbs.value = structPtr->value;
    dbs.ind_value = getIndicator(DOUBLE, (void *)&structPtr->value);


    EXEC SQL INSERT INTO RiverStatus (lid,pe,
        dur,ts,extremum,
        probability,validtime,basistime,
        "value"        )
        VALUES (
         :dbs.lid, :dbs.pe, :dbs.dur:dbs.ind_dur,
         :dbs.ts, :dbs.extremum:dbs.ind_extremum, :dbs.probability:dbs.ind_probability,
         :dbs.validtime:dbs.ind_validtime, :dbs.basistime:dbs.ind_basistime, :dbs.value:dbs.ind_value);

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "InsertRiverStatus() in Insert section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

int UpdateRiverStatus(const RiverStatus *structPtr, const char *where)
{
    EXEC SQL BEGIN DECLARE SECTION;

    struct RiverStatus_t   dbs;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, UPDATE);

    strcpy(dbs.lid, structPtr->lid);

    strcpy(dbs.pe, structPtr->pe);

    dbs.dur = structPtr->dur;
    dbs.ind_dur = getIndicator(SHORT, (void *)&structPtr->dur);

    strcpy(dbs.ts, structPtr->ts);

    strcpy(dbs.extremum, structPtr->extremum);
    dbs.ind_extremum = getIndicator(CHAR, (void *)structPtr->extremum);

    dbs.probability = structPtr->probability;
    dbs.ind_probability = getIndicator(FLOAT, (void *)&structPtr->probability);

    dbs.validtime = structPtr->validtime;
    dbs.ind_validtime = getIndicator(DATETIME, (void *)&structPtr->validtime);

    dbs.basistime = structPtr->basistime;
    dbs.ind_basistime = getIndicator(DATETIME, (void *)&structPtr->basistime);

    dbs.value = structPtr->value;
    dbs.ind_value = getIndicator(DOUBLE, (void *)&structPtr->value);


    sprintf(queryBuffer, " UPDATE RiverStatus SET " );
    strcat(queryBuffer, "lid = ? , pe = ? , dur = ? , ts = ? , extremum = ? ,     ");
    strcat(queryBuffer, "probability = ? , validtime = ? , basistime = ? , \"value\" = ? ");

    if ( (where != NULL) && (*where != '\0'))
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE uid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "UpdateRiverStatus() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return(SQLCODE);
    }

    EXEC SQL EXECUTE uid USING  :dbs.lid, :dbs.pe, :dbs.dur:dbs.ind_dur, :dbs.ts, :dbs.extremum:dbs.ind_extremum,
     :dbs.probability:dbs.ind_probability, :dbs.validtime:dbs.ind_validtime, :dbs.basistime:dbs.ind_basistime, :dbs.value:dbs.ind_value;

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "UpdateRiverStatus() in Execute section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return(SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

int DeleteRiverStatus(const char *where)
{
    char deleteStatement[] = "DELETE FROM RiverStatus ";
    EXEC SQL BEGIN DECLARE SECTION;

    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    strcpy(queryBuffer, deleteStatement);
    if ( (where != NULL) && (*where != '\0'))
    {
        strcat(queryBuffer, where);
    }
    EXEC SQL EXECUTE IMMEDIATE :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "DeleteRiverStatus() in Execute Immediate section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return(SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

int UpdateRiverStatusByRecord (const RiverStatus * newStructPtr, const RiverStatus * oldStructPtr)
{
    char whereClause[BUFSIZ];
    GetRiverStatusPrimaryKeyWhereString(oldStructPtr, whereClause);
    return (UpdateRiverStatus(newStructPtr, whereClause));
}

/* ------------------------------------------------------------------------- */

int InsertOrUpdateRiverStatus(const RiverStatus * structPtr)
{
    UpdateRiverStatusByRecord(structPtr, structPtr);
    setDbStatusSqlCommand(&dbStatus, UPDATE);

    if ( (SQLCODE < 0) || (SQLCODE == 100) )
    {
        InsertRiverStatus(structPtr);
        setDbStatusSqlCommand(&dbStatus, INSERT);
    }

    initDbStatus(&dbStatus);
    return(SQLCODE);
}

/* ------------------------------------------------------------------------- */

int InsertIfUniqueRiverStatus(const RiverStatus * structPtr, bool *isUnique)
{
    int resultCode = 0;
    if (RiverStatusExists(structPtr))
    {
        setDbStatusSqlCommand(&dbStatus, SELECT);
        *isUnique = false;
        resultCode = dbStatus.sql_code;
    }
    else
    {
        resultCode = dbStatus.sql_code;
        if (resultCode == 0)
        {
            InsertRiverStatus(structPtr);
            setDbStatusSqlCommand(&dbStatus, INSERT);
            *isUnique = true;
            resultCode = dbStatus.sql_code;
        }
        else
        {
            *isUnique = false;
        }
    }
    initDbStatus(&dbStatus);

    return(resultCode);
}

/* ------------------------------------------------------------------------- */

int DeleteRiverStatusByRecord(const RiverStatus * structPtr)
{
    char whereClause[BUFSIZ];
    GetRiverStatusPrimaryKeyWhereString(structPtr, whereClause);
    return (DeleteRiverStatus(whereClause));
}

/* ------------------------------------------------------------------------- */

bool RiverStatusExists(const RiverStatus * structPtr)
{
    int result = false;
    int rowCount = 0;
    char whereString[QUERY_LEN];

    GetRiverStatusPrimaryKeyWhereString(structPtr, whereString);
    rowCount = SelectRiverStatusCount(whereString);

    if (rowCount > 0)
    {
        result = true;
    }
    else
    {
        result = false;
    }

    return(result);
}

/* ------------------------------------------------------------------------- */

void GetRiverStatusPrimaryKeyWhereString (const RiverStatus * structPtr, char returnWhereString[] )
{
    sprintf(returnWhereString, "WHERE lid = '%s'  AND pe = '%s'  AND ts = '%s' ",
            structPtr->lid, structPtr->pe, structPtr->ts);
}

/* ------------------------------------------------------------------------- */

void FreeRiverStatus( RiverStatus * structPtr)
{
    RiverStatus* nextPtr = NULL;

    while (structPtr != NULL)
    {
        nextPtr = ( RiverStatus * ) ListNext ( &structPtr->node );
        free (structPtr);
        structPtr = nextPtr;
    }
    return;
}

/* ------------------------------------------------------------------------- */

DbStatus * GetRiverStatusDbStatus()
{
    return &dbStatus;
}

/* ------------------------------------------------------------------------- */

void SetRiverStatusErrorLogging(int value)
{
    errorLoggingOn = value;
    return;
}


/* ------------------------------------------------------------------------- */

