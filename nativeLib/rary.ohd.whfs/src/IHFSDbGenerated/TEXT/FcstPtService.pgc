/*
    File: FcstPtService.pgc
    Author  : CDBGEN
    Created : Wed Aug 06 12:34:21 EDT 2008 using database hd_ob83empty
    Description: This .pgc file has an associated header file. 
            and defines all functions and the table's INTERNAL record structure.
*/

#include "FcstPtService.h"

EXEC SQL include sqlda;
EXEC SQL include sqltypes;
EXEC SQL include sql3types;
EXEC SQL include pgtypes_timestamp;
EXEC SQL include pgtypes_date;
EXEC SQL include pgtypes_interval;
EXEC SQL include pgtypes_numeric;

EXEC SQL BEGIN DECLARE SECTION;
struct FcstPtService_t
{
    char		lid[9];
    double		flood_thres;
    short		exceed_prob;
    char		service_type[21];
    date		anal_start_date;
    date		anal_end_date;
    date		impl_date;
    date		web_date;

    int		ind_flood_thres;
    int		ind_exceed_prob;
    int		ind_service_type;
    int		ind_anal_start_date;
    int		ind_anal_end_date;
    int		ind_impl_date;
    int		ind_web_date;
} FcstPtService_rec;
EXEC SQL END DECLARE SECTION;

#define QUERY_LEN 9999
static int errorLoggingOn = 1;

static DbStatus dbStatus;


/* ------------------------------------------------------------------------- */

FcstPtService * GetFcstPtService(const char * where)
{

    FcstPtService * listPtr = NULL;
    FcstPtService * structPtr = NULL;
    char selectStatement[] = "SELECT * FROM FcstPtService ";

    int rowCount = 0;
    int first = 1;

    EXEC SQL BEGIN DECLARE SECTION;

    struct FcstPtService_t   dbs;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, SELECT);

    strcpy(queryBuffer, selectStatement);

    if ( ( where != NULL ) && ( * where != '\0' ) ) 
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE tid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetFcstPtService() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL DECLARE tcur1 CURSOR WITH HOLD FOR tid;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetFcstPtService() in Declare cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL OPEN tcur1;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetFcstPtService() in Open cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    listPtr = NULL;
    memset(&dbs, '\0', sizeof(dbs));

    EXEC SQL FETCH tcur1 INTO 
    :dbs.lid, :dbs.flood_thres:dbs.ind_flood_thres, 
    :dbs.exceed_prob:dbs.ind_exceed_prob, :dbs.service_type:dbs.ind_service_type, 
    :dbs.anal_start_date:dbs.ind_anal_start_date, :dbs.anal_end_date:dbs.ind_anal_end_date, 
    :dbs.impl_date:dbs.ind_impl_date, :dbs.web_date:dbs.ind_web_date    ;

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetFcstPtService() in Initial FETCH section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    while (SQLCODE == 0) 
    {
        rowCount++;
        if ((structPtr = (FcstPtService *) malloc(sizeof(FcstPtService))) != NULL)
        {

            strcpy(structPtr->lid, dbs.lid);

            structPtr->flood_thres = dbs.flood_thres;
            setNullIfIndicated(dbs.ind_flood_thres, DOUBLE, &structPtr->flood_thres);

            structPtr->exceed_prob = dbs.exceed_prob;
            setNullIfIndicated(dbs.ind_exceed_prob, SHORT, &structPtr->exceed_prob);

            strcpy(structPtr->service_type, dbs.service_type);
            setNullIfIndicated(dbs.ind_service_type, CHAR, structPtr->service_type);

            structPtr->anal_start_date = pg_date_to_date_t(dbs.anal_start_date);
            setNullIfIndicated(dbs.ind_anal_start_date, INT, &structPtr->anal_start_date);

            structPtr->anal_end_date = pg_date_to_date_t(dbs.anal_end_date);
            setNullIfIndicated(dbs.ind_anal_end_date, INT, &structPtr->anal_end_date);

            structPtr->impl_date = pg_date_to_date_t(dbs.impl_date);
            setNullIfIndicated(dbs.ind_impl_date, INT, &structPtr->impl_date);

            structPtr->web_date = pg_date_to_date_t(dbs.web_date);
            setNullIfIndicated(dbs.ind_web_date, INT, &structPtr->web_date);


        }
        else
        {
            break;
        }

        if (first)
        {
            listPtr = structPtr;
            ListInit(&listPtr->list);
            first = 0;
        }

        ListAdd(&listPtr->list, &structPtr->node);
        memset(&dbs, '\0', sizeof(dbs));

        EXEC SQL FETCH tcur1 INTO 
        :dbs.lid, :dbs.flood_thres:dbs.ind_flood_thres, 
        :dbs.exceed_prob:dbs.ind_exceed_prob, :dbs.service_type:dbs.ind_service_type, 
        :dbs.anal_start_date:dbs.ind_anal_start_date, :dbs.anal_end_date:dbs.ind_anal_end_date, 
        :dbs.impl_date:dbs.ind_impl_date, :dbs.web_date:dbs.ind_web_date        ;

        if (SQLCODE < 0)
        {
            if (errorLoggingOn)
            {
                fprintf(stderr, "GetFcstPtService() in Nth fetch section --- ERROR\n");
                fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
                fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
                fflush(stderr);
            }
            initDbStatus(&dbStatus);
            return (NULL);
        }
    }

    initDbStatus(&dbStatus);
    setDbStatusRowsAffected(&dbStatus, rowCount);

    EXEC SQL CLOSE tcur1;
    return(listPtr);
}

/* ------------------------------------------------------------------------- */

FcstPtService * SelectFcstPtService(const char * where)
{

    FcstPtService * listPtr = NULL;
    FcstPtService * structPtr = NULL;
    char selectStatement[] = "SELECT * FROM FcstPtService ";

    int rowCount = 0;
    int first = 1;

    EXEC SQL BEGIN DECLARE SECTION;

    struct FcstPtService_t   dbs;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, SELECT);

    strcpy(queryBuffer, selectStatement);

    if ( ( where != NULL ) && ( * where != '\0' ) ) 
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE tid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectFcstPtService() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL DECLARE tcur2 CURSOR WITH HOLD FOR tid;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectFcstPtService() in Declare cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL OPEN tcur2;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectFcstPtService() in Open cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    listPtr = NULL;
    memset(&dbs, '\0', sizeof(dbs));

    EXEC SQL FETCH tcur2 INTO 
    :dbs.lid, :dbs.flood_thres:dbs.ind_flood_thres, 
    :dbs.exceed_prob:dbs.ind_exceed_prob, :dbs.service_type:dbs.ind_service_type, 
    :dbs.anal_start_date:dbs.ind_anal_start_date, :dbs.anal_end_date:dbs.ind_anal_end_date, 
    :dbs.impl_date:dbs.ind_impl_date, :dbs.web_date:dbs.ind_web_date    ;

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectFcstPtService() in Initial FETCH section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    while (SQLCODE == 0) 
    {
        rowCount++;
        if ((structPtr = (FcstPtService *) malloc(sizeof(FcstPtService))) != NULL)
        {

            strcpy(structPtr->lid, dbs.lid);

            structPtr->flood_thres = dbs.flood_thres;
            setNullIfIndicated(dbs.ind_flood_thres, DOUBLE, &structPtr->flood_thres);

            structPtr->exceed_prob = dbs.exceed_prob;
            setNullIfIndicated(dbs.ind_exceed_prob, SHORT, &structPtr->exceed_prob);

            strcpy(structPtr->service_type, dbs.service_type);
            setNullIfIndicated(dbs.ind_service_type, CHAR, structPtr->service_type);

            structPtr->anal_start_date = pg_date_to_date_t(dbs.anal_start_date);
            setNullIfIndicated(dbs.ind_anal_start_date, INT, &structPtr->anal_start_date);

            structPtr->anal_end_date = pg_date_to_date_t(dbs.anal_end_date);
            setNullIfIndicated(dbs.ind_anal_end_date, INT, &structPtr->anal_end_date);

            structPtr->impl_date = pg_date_to_date_t(dbs.impl_date);
            setNullIfIndicated(dbs.ind_impl_date, INT, &structPtr->impl_date);

            structPtr->web_date = pg_date_to_date_t(dbs.web_date);
            setNullIfIndicated(dbs.ind_web_date, INT, &structPtr->web_date);


        }
        else
        {
            break;
        }

        if (first)
        {
            listPtr = structPtr;
            ListInit(&listPtr->list);
            first = 0;
        }

        ListAdd(&listPtr->list, &structPtr->node);
        memset(&dbs, '\0', sizeof(dbs));

        EXEC SQL FETCH tcur2 INTO 
        :dbs.lid, :dbs.flood_thres:dbs.ind_flood_thres, 
        :dbs.exceed_prob:dbs.ind_exceed_prob, :dbs.service_type:dbs.ind_service_type, 
        :dbs.anal_start_date:dbs.ind_anal_start_date, :dbs.anal_end_date:dbs.ind_anal_end_date, 
        :dbs.impl_date:dbs.ind_impl_date, :dbs.web_date:dbs.ind_web_date        ;

        if (SQLCODE < 0)
        {
            if (errorLoggingOn)
            {
                fprintf(stderr, "SelectFcstPtService() in Nth fetch section --- ERROR\n");
                fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
                fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
                fflush(stderr);
            }
            initDbStatus(&dbStatus);
            return (NULL);
        }
    }

    initDbStatus(&dbStatus);
    setDbStatusRowsAffected(&dbStatus, rowCount);

    EXEC SQL CLOSE tcur2;
    return(listPtr);
}

/* ------------------------------------------------------------------------- */

int SelectFcstPtServiceCount(const char * where)
{

    char selectStatement[] = "SELECT COUNT(*) FROM FcstPtService ";

    EXEC SQL BEGIN DECLARE SECTION;

    int rowCount = 0;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, SELECT);

    strcpy(queryBuffer, selectStatement);

    if ( ( where != NULL ) && ( * where != '\0' ) ) 
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE tid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountFcstPtService() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }

    EXEC SQL DECLARE tcur3 CURSOR WITH HOLD FOR tid;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountFcstPtService() in Declare cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }

    EXEC SQL OPEN tcur3;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountFcstPtService() in Open cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }


    EXEC SQL FETCH tcur3 INTO :rowCount;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountFcstPtService() in Initial FETCH section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }

    initDbStatus(&dbStatus);
    setDbStatusRowsAffected(&dbStatus, rowCount);

    EXEC SQL CLOSE tcur3;
    return(rowCount);
}

/* ------------------------------------------------------------------------- */

int PutFcstPtService(const FcstPtService * structPtr)
{
    EXEC SQL BEGIN DECLARE SECTION;

    struct FcstPtService_t  dbs;

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, INSERT);

    if (structPtr == NULL)
    {
        return(ERR_BAD_ARGS);
    }

    memset(&dbs, '\0', sizeof(dbs));

    strcpy(dbs.lid, structPtr->lid);

    dbs.flood_thres = structPtr->flood_thres;
    dbs.ind_flood_thres = getIndicator(DOUBLE, (void *)&structPtr->flood_thres);

    dbs.exceed_prob = structPtr->exceed_prob;
    dbs.ind_exceed_prob = getIndicator(SHORT, (void *)&structPtr->exceed_prob);

    strcpy(dbs.service_type, structPtr->service_type);
    dbs.ind_service_type = getIndicator(CHAR, (void *)structPtr->service_type);

    dbs.anal_start_date = date_t_to_pg_date(structPtr->anal_start_date);
    dbs.ind_anal_start_date = getIndicator(INT, (void *)&structPtr->anal_start_date);

    dbs.anal_end_date = date_t_to_pg_date(structPtr->anal_end_date);
    dbs.ind_anal_end_date = getIndicator(INT, (void *)&structPtr->anal_end_date);

    dbs.impl_date = date_t_to_pg_date(structPtr->impl_date);
    dbs.ind_impl_date = getIndicator(INT, (void *)&structPtr->impl_date);

    dbs.web_date = date_t_to_pg_date(structPtr->web_date);
    dbs.ind_web_date = getIndicator(INT, (void *)&structPtr->web_date);


    EXEC SQL INSERT INTO FcstPtService (lid,flood_thres,
        exceed_prob,service_type,anal_start_date,
        anal_end_date,impl_date,web_date        )
        VALUES (
         :dbs.lid, :dbs.flood_thres:dbs.ind_flood_thres, :dbs.exceed_prob:dbs.ind_exceed_prob,
         :dbs.service_type:dbs.ind_service_type, :dbs.anal_start_date:dbs.ind_anal_start_date, :dbs.anal_end_date:dbs.ind_anal_end_date,
         :dbs.impl_date:dbs.ind_impl_date, :dbs.web_date:dbs.ind_web_date);

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "PutFcstPtService() in Insert section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

int InsertFcstPtService(const FcstPtService * structPtr)
{
    EXEC SQL BEGIN DECLARE SECTION;

    struct FcstPtService_t  dbs;

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, INSERT);

    if (structPtr == NULL)
    {
        return(ERR_BAD_ARGS);
    }

    memset(&dbs, '\0', sizeof(dbs));

    strcpy(dbs.lid, structPtr->lid);

    dbs.flood_thres = structPtr->flood_thres;
    dbs.ind_flood_thres = getIndicator(DOUBLE, (void *)&structPtr->flood_thres);

    dbs.exceed_prob = structPtr->exceed_prob;
    dbs.ind_exceed_prob = getIndicator(SHORT, (void *)&structPtr->exceed_prob);

    strcpy(dbs.service_type, structPtr->service_type);
    dbs.ind_service_type = getIndicator(CHAR, (void *)structPtr->service_type);

    dbs.anal_start_date = date_t_to_pg_date(structPtr->anal_start_date);
    dbs.ind_anal_start_date = getIndicator(INT, (void *)&structPtr->anal_start_date);

    dbs.anal_end_date = date_t_to_pg_date(structPtr->anal_end_date);
    dbs.ind_anal_end_date = getIndicator(INT, (void *)&structPtr->anal_end_date);

    dbs.impl_date = date_t_to_pg_date(structPtr->impl_date);
    dbs.ind_impl_date = getIndicator(INT, (void *)&structPtr->impl_date);

    dbs.web_date = date_t_to_pg_date(structPtr->web_date);
    dbs.ind_web_date = getIndicator(INT, (void *)&structPtr->web_date);


    EXEC SQL INSERT INTO FcstPtService (lid,flood_thres,
        exceed_prob,service_type,anal_start_date,
        anal_end_date,impl_date,web_date        )
        VALUES (
         :dbs.lid, :dbs.flood_thres:dbs.ind_flood_thres, :dbs.exceed_prob:dbs.ind_exceed_prob,
         :dbs.service_type:dbs.ind_service_type, :dbs.anal_start_date:dbs.ind_anal_start_date, :dbs.anal_end_date:dbs.ind_anal_end_date,
         :dbs.impl_date:dbs.ind_impl_date, :dbs.web_date:dbs.ind_web_date);

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "InsertFcstPtService() in Insert section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

int UpdateFcstPtService(const FcstPtService *structPtr, const char *where)
{
    EXEC SQL BEGIN DECLARE SECTION;

    struct FcstPtService_t   dbs;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, UPDATE);

    strcpy(dbs.lid, structPtr->lid);

    dbs.flood_thres = structPtr->flood_thres;
    dbs.ind_flood_thres = getIndicator(DOUBLE, (void *)&structPtr->flood_thres);

    dbs.exceed_prob = structPtr->exceed_prob;
    dbs.ind_exceed_prob = getIndicator(SHORT, (void *)&structPtr->exceed_prob);

    strcpy(dbs.service_type, structPtr->service_type);
    dbs.ind_service_type = getIndicator(CHAR, (void *)structPtr->service_type);

    dbs.anal_start_date = date_t_to_pg_date(structPtr->anal_start_date);
    dbs.ind_anal_start_date = getIndicator(INT, (void *)&structPtr->anal_start_date);

    dbs.anal_end_date = date_t_to_pg_date(structPtr->anal_end_date);
    dbs.ind_anal_end_date = getIndicator(INT, (void *)&structPtr->anal_end_date);

    dbs.impl_date = date_t_to_pg_date(structPtr->impl_date);
    dbs.ind_impl_date = getIndicator(INT, (void *)&structPtr->impl_date);

    dbs.web_date = date_t_to_pg_date(structPtr->web_date);
    dbs.ind_web_date = getIndicator(INT, (void *)&structPtr->web_date);


    sprintf(queryBuffer, " UPDATE FcstPtService SET " );
    strcat(queryBuffer, "lid = ? , flood_thres = ? , exceed_prob = ? , service_type = ? , anal_start_date = ? ,     ");
    strcat(queryBuffer, "anal_end_date = ? , impl_date = ? , web_date = ? ");

    if ( (where != NULL) && (*where != '\0'))
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE uid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "UpdateFcstPtService() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return(SQLCODE);
    }

    EXEC SQL EXECUTE uid USING  :dbs.lid, :dbs.flood_thres:dbs.ind_flood_thres, :dbs.exceed_prob:dbs.ind_exceed_prob, :dbs.service_type:dbs.ind_service_type, :dbs.anal_start_date:dbs.ind_anal_start_date,
     :dbs.anal_end_date:dbs.ind_anal_end_date, :dbs.impl_date:dbs.ind_impl_date, :dbs.web_date:dbs.ind_web_date;

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "UpdateFcstPtService() in Execute section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return(SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

int DeleteFcstPtService(const char *where)
{
    char deleteStatement[] = "DELETE FROM FcstPtService ";
    EXEC SQL BEGIN DECLARE SECTION;

    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    strcpy(queryBuffer, deleteStatement);
    if ( (where != NULL) && (*where != '\0'))
    {
        strcat(queryBuffer, where);
    }
    EXEC SQL EXECUTE IMMEDIATE :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "DeleteFcstPtService() in Execute Immediate section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return(SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

int UpdateFcstPtServiceByRecord (const FcstPtService * newStructPtr, const FcstPtService * oldStructPtr)
{
    char whereClause[BUFSIZ];
    GetFcstPtServicePrimaryKeyWhereString(oldStructPtr, whereClause);
    return (UpdateFcstPtService(newStructPtr, whereClause));
}

/* ------------------------------------------------------------------------- */

int InsertOrUpdateFcstPtService(const FcstPtService * structPtr)
{
    UpdateFcstPtServiceByRecord(structPtr, structPtr);
    setDbStatusSqlCommand(&dbStatus, UPDATE);

    if ( (SQLCODE < 0) || (SQLCODE == 100) )
    {
        InsertFcstPtService(structPtr);
        setDbStatusSqlCommand(&dbStatus, INSERT);
    }

    initDbStatus(&dbStatus);
    return(SQLCODE);
}

/* ------------------------------------------------------------------------- */

int InsertIfUniqueFcstPtService(const FcstPtService * structPtr, bool *isUnique)
{
    int resultCode = 0;
    if (FcstPtServiceExists(structPtr))
    {
        setDbStatusSqlCommand(&dbStatus, SELECT);
        *isUnique = false;
        resultCode = dbStatus.sql_code;
    }
    else
    {
        resultCode = dbStatus.sql_code;
        if (resultCode == 0)
        {
            InsertFcstPtService(structPtr);
            setDbStatusSqlCommand(&dbStatus, INSERT);
            *isUnique = true;
            resultCode = dbStatus.sql_code;
        }
        else
        {
            *isUnique = false;
        }
    }
    initDbStatus(&dbStatus);

    return(resultCode);
}

/* ------------------------------------------------------------------------- */

int DeleteFcstPtServiceByRecord(const FcstPtService * structPtr)
{
    char whereClause[BUFSIZ];
    GetFcstPtServicePrimaryKeyWhereString(structPtr, whereClause);
    return (DeleteFcstPtService(whereClause));
}

/* ------------------------------------------------------------------------- */

bool FcstPtServiceExists(const FcstPtService * structPtr)
{
    int result = false;
    int rowCount = 0;
    char whereString[QUERY_LEN];

    GetFcstPtServicePrimaryKeyWhereString(structPtr, whereString);
    rowCount = SelectFcstPtServiceCount(whereString);

    if (rowCount > 0)
    {
        result = true;
    }
    else
    {
        result = false;
    }

    return(result);
}

/* ------------------------------------------------------------------------- */

void GetFcstPtServicePrimaryKeyWhereString (const FcstPtService * structPtr, char returnWhereString[] )
{
    sprintf(returnWhereString, "WHERE lid = '%s' ",
            structPtr->lid);
}

/* ------------------------------------------------------------------------- */

void FreeFcstPtService( FcstPtService * structPtr)
{
    FcstPtService* nextPtr = NULL;

    while (structPtr != NULL)
    {
        nextPtr = ( FcstPtService * ) ListNext ( &structPtr->node );
        free (structPtr);
        structPtr = nextPtr;
    }
    return;
}

/* ------------------------------------------------------------------------- */

DbStatus * GetFcstPtServiceDbStatus()
{
    return &dbStatus;
}

/* ------------------------------------------------------------------------- */

void SetFcstPtServiceErrorLogging(int value)
{
    errorLoggingOn = value;
    return;
}


/* ------------------------------------------------------------------------- */

