/*
    File: ColorValue.pgc
    Author  : CDBGEN
    Created : Wed Aug 06 12:34:17 EDT 2008 using database hd_ob83empty
    Description: This .pgc file has an associated header file. 
            and defines all functions and the table's INTERNAL record structure.
*/

#include "ColorValue.h"

EXEC SQL include sqlda;
EXEC SQL include sqltypes;
EXEC SQL include sql3types;
EXEC SQL include pgtypes_timestamp;
EXEC SQL include pgtypes_date;
EXEC SQL include pgtypes_interval;
EXEC SQL include pgtypes_numeric;

EXEC SQL BEGIN DECLARE SECTION;
struct ColorValue_t
{
    char		userid[33];
    char		application_name[21];
    char		color_use_name[16];
    long		duration;
    double		threshold_value;
    char		threshold_unit[2];
    char		color_name[26];

} ColorValue_rec;
EXEC SQL END DECLARE SECTION;

#define QUERY_LEN 9999
static int errorLoggingOn = 1;

static DbStatus dbStatus;


/* ------------------------------------------------------------------------- */

ColorValue * GetColorValue(const char * where)
{

    ColorValue * listPtr = NULL;
    ColorValue * structPtr = NULL;
    char selectStatement[] = "SELECT * FROM ColorValue ";

    int rowCount = 0;
    int first = 1;

    EXEC SQL BEGIN DECLARE SECTION;

    struct ColorValue_t   dbs;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, SELECT);

    strcpy(queryBuffer, selectStatement);

    if ( ( where != NULL ) && ( * where != '\0' ) ) 
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE tid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetColorValue() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL DECLARE tcur1 CURSOR WITH HOLD FOR tid;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetColorValue() in Declare cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL OPEN tcur1;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetColorValue() in Open cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    listPtr = NULL;
    memset(&dbs, '\0', sizeof(dbs));

    EXEC SQL FETCH tcur1 INTO 
    :dbs.userid, :dbs.application_name, 
    :dbs.color_use_name, :dbs.duration, 
    :dbs.threshold_value, :dbs.threshold_unit, 
    :dbs.color_name    ;

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetColorValue() in Initial FETCH section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    while (SQLCODE == 0) 
    {
        rowCount++;
        if ((structPtr = (ColorValue *) malloc(sizeof(ColorValue))) != NULL)
        {

            strcpy(structPtr->userid, dbs.userid);

            strcpy(structPtr->application_name, dbs.application_name);

            strcpy(structPtr->color_use_name, dbs.color_use_name);

            structPtr->duration = dbs.duration;

            structPtr->threshold_value = dbs.threshold_value;

            strcpy(structPtr->threshold_unit, dbs.threshold_unit);

            strcpy(structPtr->color_name, dbs.color_name);


        }
        else
        {
            break;
        }

        if (first)
        {
            listPtr = structPtr;
            ListInit(&listPtr->list);
            first = 0;
        }

        ListAdd(&listPtr->list, &structPtr->node);
        memset(&dbs, '\0', sizeof(dbs));

        EXEC SQL FETCH tcur1 INTO 
        :dbs.userid, :dbs.application_name, 
        :dbs.color_use_name, :dbs.duration, 
        :dbs.threshold_value, :dbs.threshold_unit, 
        :dbs.color_name        ;

        if (SQLCODE < 0)
        {
            if (errorLoggingOn)
            {
                fprintf(stderr, "GetColorValue() in Nth fetch section --- ERROR\n");
                fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
                fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
                fflush(stderr);
            }
            initDbStatus(&dbStatus);
            return (NULL);
        }
    }

    initDbStatus(&dbStatus);
    setDbStatusRowsAffected(&dbStatus, rowCount);

    EXEC SQL CLOSE tcur1;
    return(listPtr);
}

/* ------------------------------------------------------------------------- */

ColorValue * SelectColorValue(const char * where)
{

    ColorValue * listPtr = NULL;
    ColorValue * structPtr = NULL;
    char selectStatement[] = "SELECT * FROM ColorValue ";

    int rowCount = 0;
    int first = 1;

    EXEC SQL BEGIN DECLARE SECTION;

    struct ColorValue_t   dbs;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, SELECT);

    strcpy(queryBuffer, selectStatement);

    if ( ( where != NULL ) && ( * where != '\0' ) ) 
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE tid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectColorValue() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL DECLARE tcur2 CURSOR WITH HOLD FOR tid;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectColorValue() in Declare cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL OPEN tcur2;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectColorValue() in Open cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    listPtr = NULL;
    memset(&dbs, '\0', sizeof(dbs));

    EXEC SQL FETCH tcur2 INTO 
    :dbs.userid, :dbs.application_name, 
    :dbs.color_use_name, :dbs.duration, 
    :dbs.threshold_value, :dbs.threshold_unit, 
    :dbs.color_name    ;

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectColorValue() in Initial FETCH section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    while (SQLCODE == 0) 
    {
        rowCount++;
        if ((structPtr = (ColorValue *) malloc(sizeof(ColorValue))) != NULL)
        {

            strcpy(structPtr->userid, dbs.userid);

            strcpy(structPtr->application_name, dbs.application_name);

            strcpy(structPtr->color_use_name, dbs.color_use_name);

            structPtr->duration = dbs.duration;

            structPtr->threshold_value = dbs.threshold_value;

            strcpy(structPtr->threshold_unit, dbs.threshold_unit);

            strcpy(structPtr->color_name, dbs.color_name);


        }
        else
        {
            break;
        }

        if (first)
        {
            listPtr = structPtr;
            ListInit(&listPtr->list);
            first = 0;
        }

        ListAdd(&listPtr->list, &structPtr->node);
        memset(&dbs, '\0', sizeof(dbs));

        EXEC SQL FETCH tcur2 INTO 
        :dbs.userid, :dbs.application_name, 
        :dbs.color_use_name, :dbs.duration, 
        :dbs.threshold_value, :dbs.threshold_unit, 
        :dbs.color_name        ;

        if (SQLCODE < 0)
        {
            if (errorLoggingOn)
            {
                fprintf(stderr, "SelectColorValue() in Nth fetch section --- ERROR\n");
                fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
                fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
                fflush(stderr);
            }
            initDbStatus(&dbStatus);
            return (NULL);
        }
    }

    initDbStatus(&dbStatus);
    setDbStatusRowsAffected(&dbStatus, rowCount);

    EXEC SQL CLOSE tcur2;
    return(listPtr);
}

/* ------------------------------------------------------------------------- */

int SelectColorValueCount(const char * where)
{

    char selectStatement[] = "SELECT COUNT(*) FROM ColorValue ";

    EXEC SQL BEGIN DECLARE SECTION;

    int rowCount = 0;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, SELECT);

    strcpy(queryBuffer, selectStatement);

    if ( ( where != NULL ) && ( * where != '\0' ) ) 
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE tid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountColorValue() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }

    EXEC SQL DECLARE tcur3 CURSOR WITH HOLD FOR tid;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountColorValue() in Declare cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }

    EXEC SQL OPEN tcur3;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountColorValue() in Open cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }


    EXEC SQL FETCH tcur3 INTO :rowCount;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountColorValue() in Initial FETCH section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }

    initDbStatus(&dbStatus);
    setDbStatusRowsAffected(&dbStatus, rowCount);

    EXEC SQL CLOSE tcur3;
    return(rowCount);
}

/* ------------------------------------------------------------------------- */

int PutColorValue(const ColorValue * structPtr)
{
    EXEC SQL BEGIN DECLARE SECTION;

    struct ColorValue_t  dbs;

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, INSERT);

    if (structPtr == NULL)
    {
        return(ERR_BAD_ARGS);
    }

    memset(&dbs, '\0', sizeof(dbs));

    strcpy(dbs.userid, structPtr->userid);

    strcpy(dbs.application_name, structPtr->application_name);

    strcpy(dbs.color_use_name, structPtr->color_use_name);

    dbs.duration = structPtr->duration;

    dbs.threshold_value = structPtr->threshold_value;

    strcpy(dbs.threshold_unit, structPtr->threshold_unit);

    strcpy(dbs.color_name, structPtr->color_name);


    EXEC SQL INSERT INTO ColorValue (userid,application_name,
        color_use_name,duration,threshold_value,
        threshold_unit,color_name        )
        VALUES (
         :dbs.userid, :dbs.application_name, :dbs.color_use_name,
         :dbs.duration, :dbs.threshold_value, :dbs.threshold_unit,
         :dbs.color_name);

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "PutColorValue() in Insert section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

int InsertColorValue(const ColorValue * structPtr)
{
    EXEC SQL BEGIN DECLARE SECTION;

    struct ColorValue_t  dbs;

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, INSERT);

    if (structPtr == NULL)
    {
        return(ERR_BAD_ARGS);
    }

    memset(&dbs, '\0', sizeof(dbs));

    strcpy(dbs.userid, structPtr->userid);

    strcpy(dbs.application_name, structPtr->application_name);

    strcpy(dbs.color_use_name, structPtr->color_use_name);

    dbs.duration = structPtr->duration;

    dbs.threshold_value = structPtr->threshold_value;

    strcpy(dbs.threshold_unit, structPtr->threshold_unit);

    strcpy(dbs.color_name, structPtr->color_name);


    EXEC SQL INSERT INTO ColorValue (userid,application_name,
        color_use_name,duration,threshold_value,
        threshold_unit,color_name        )
        VALUES (
         :dbs.userid, :dbs.application_name, :dbs.color_use_name,
         :dbs.duration, :dbs.threshold_value, :dbs.threshold_unit,
         :dbs.color_name);

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "InsertColorValue() in Insert section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

int UpdateColorValue(const ColorValue *structPtr, const char *where)
{
    EXEC SQL BEGIN DECLARE SECTION;

    struct ColorValue_t   dbs;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, UPDATE);

    strcpy(dbs.userid, structPtr->userid);

    strcpy(dbs.application_name, structPtr->application_name);

    strcpy(dbs.color_use_name, structPtr->color_use_name);

    dbs.duration = structPtr->duration;

    dbs.threshold_value = structPtr->threshold_value;

    strcpy(dbs.threshold_unit, structPtr->threshold_unit);

    strcpy(dbs.color_name, structPtr->color_name);


    sprintf(queryBuffer, " UPDATE ColorValue SET " );
    strcat(queryBuffer, "userid = ? , application_name = ? , color_use_name = ? , duration = ? , threshold_value = ? ,     ");
    strcat(queryBuffer, "threshold_unit = ? , color_name = ? ");

    if ( (where != NULL) && (*where != '\0'))
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE uid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "UpdateColorValue() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return(SQLCODE);
    }

    EXEC SQL EXECUTE uid USING  :dbs.userid, :dbs.application_name, :dbs.color_use_name, :dbs.duration, :dbs.threshold_value,
     :dbs.threshold_unit, :dbs.color_name;

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "UpdateColorValue() in Execute section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return(SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

int DeleteColorValue(const char *where)
{
    char deleteStatement[] = "DELETE FROM ColorValue ";
    EXEC SQL BEGIN DECLARE SECTION;

    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    strcpy(queryBuffer, deleteStatement);
    if ( (where != NULL) && (*where != '\0'))
    {
        strcat(queryBuffer, where);
    }
    EXEC SQL EXECUTE IMMEDIATE :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "DeleteColorValue() in Execute Immediate section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return(SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

int UpdateColorValueByRecord (const ColorValue * newStructPtr, const ColorValue * oldStructPtr)
{
    char whereClause[BUFSIZ];
    GetColorValuePrimaryKeyWhereString(oldStructPtr, whereClause);
    return (UpdateColorValue(newStructPtr, whereClause));
}

/* ------------------------------------------------------------------------- */

int InsertOrUpdateColorValue(const ColorValue * structPtr)
{
    UpdateColorValueByRecord(structPtr, structPtr);
    setDbStatusSqlCommand(&dbStatus, UPDATE);

    if ( (SQLCODE < 0) || (SQLCODE == 100) )
    {
        InsertColorValue(structPtr);
        setDbStatusSqlCommand(&dbStatus, INSERT);
    }

    initDbStatus(&dbStatus);
    return(SQLCODE);
}

/* ------------------------------------------------------------------------- */

int InsertIfUniqueColorValue(const ColorValue * structPtr, bool *isUnique)
{
    int resultCode = 0;
    if (ColorValueExists(structPtr))
    {
        setDbStatusSqlCommand(&dbStatus, SELECT);
        *isUnique = false;
        resultCode = dbStatus.sql_code;
    }
    else
    {
        resultCode = dbStatus.sql_code;
        if (resultCode == 0)
        {
            InsertColorValue(structPtr);
            setDbStatusSqlCommand(&dbStatus, INSERT);
            *isUnique = true;
            resultCode = dbStatus.sql_code;
        }
        else
        {
            *isUnique = false;
        }
    }
    initDbStatus(&dbStatus);

    return(resultCode);
}

/* ------------------------------------------------------------------------- */

int DeleteColorValueByRecord(const ColorValue * structPtr)
{
    char whereClause[BUFSIZ];
    GetColorValuePrimaryKeyWhereString(structPtr, whereClause);
    return (DeleteColorValue(whereClause));
}

/* ------------------------------------------------------------------------- */

bool ColorValueExists(const ColorValue * structPtr)
{
    int result = false;
    int rowCount = 0;
    char whereString[QUERY_LEN];

    GetColorValuePrimaryKeyWhereString(structPtr, whereString);
    rowCount = SelectColorValueCount(whereString);

    if (rowCount > 0)
    {
        result = true;
    }
    else
    {
        result = false;
    }

    return(result);
}

/* ------------------------------------------------------------------------- */

void GetColorValuePrimaryKeyWhereString (const ColorValue * structPtr, char returnWhereString[] )
{
    sprintf(returnWhereString, "WHERE userid = '%s'  AND application_name = '%s'  AND color_use_name = '%s'  AND duration = %ld  AND threshold_value = %lf  AND threshold_unit = '%s' ",
            structPtr->userid, structPtr->application_name, structPtr->color_use_name, structPtr->duration, structPtr->threshold_value, 
            structPtr->threshold_unit);
}

/* ------------------------------------------------------------------------- */

void FreeColorValue( ColorValue * structPtr)
{
    ColorValue* nextPtr = NULL;

    while (structPtr != NULL)
    {
        nextPtr = ( ColorValue * ) ListNext ( &structPtr->node );
        free (structPtr);
        structPtr = nextPtr;
    }
    return;
}

/* ------------------------------------------------------------------------- */

DbStatus * GetColorValueDbStatus()
{
    return &dbStatus;
}

/* ------------------------------------------------------------------------- */

void SetColorValueErrorLogging(int value)
{
    errorLoggingOn = value;
    return;
}


/* ------------------------------------------------------------------------- */

