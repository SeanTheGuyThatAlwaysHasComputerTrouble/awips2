/*
    File: LineSegs.pgc
    Author  : CDBGEN
    Created : Wed Aug 06 12:34:24 EDT 2008 using database hd_ob83empty
    Description: This .pgc file has an associated header file. 
            and defines all functions and the table's INTERNAL record structure.
*/

#include "LineSegs.h"

EXEC SQL include sqlda;
EXEC SQL include sqltypes;
EXEC SQL include sql3types;
EXEC SQL include pgtypes_timestamp;
EXEC SQL include pgtypes_date;
EXEC SQL include pgtypes_interval;
EXEC SQL include pgtypes_numeric;

EXEC SQL BEGIN DECLARE SECTION;
struct LineSegs_t
{
    char		area_id[9];
    long		hrap_row;
    long		hrap_beg_col;
    long		hrap_end_col;
    double		area;

    int		ind_hrap_end_col;
    int		ind_area;
} LineSegs_rec;
EXEC SQL END DECLARE SECTION;

#define QUERY_LEN 9999
static int errorLoggingOn = 1;

static DbStatus dbStatus;


/* ------------------------------------------------------------------------- */

LineSegs * GetLineSegs(const char * where)
{

    LineSegs * listPtr = NULL;
    LineSegs * structPtr = NULL;
    char selectStatement[] = "SELECT * FROM LineSegs ";

    int rowCount = 0;
    int first = 1;

    EXEC SQL BEGIN DECLARE SECTION;

    struct LineSegs_t   dbs;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, SELECT);

    strcpy(queryBuffer, selectStatement);

    if ( ( where != NULL ) && ( * where != '\0' ) ) 
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE tid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetLineSegs() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL DECLARE tcur1 CURSOR WITH HOLD FOR tid;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetLineSegs() in Declare cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL OPEN tcur1;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetLineSegs() in Open cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    listPtr = NULL;
    memset(&dbs, '\0', sizeof(dbs));

    EXEC SQL FETCH tcur1 INTO 
    :dbs.area_id, :dbs.hrap_row, 
    :dbs.hrap_beg_col, :dbs.hrap_end_col:dbs.ind_hrap_end_col, 
    :dbs.area:dbs.ind_area    ;

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetLineSegs() in Initial FETCH section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    while (SQLCODE == 0) 
    {
        rowCount++;
        if ((structPtr = (LineSegs *) malloc(sizeof(LineSegs))) != NULL)
        {

            strcpy(structPtr->area_id, dbs.area_id);

            structPtr->hrap_row = dbs.hrap_row;

            structPtr->hrap_beg_col = dbs.hrap_beg_col;

            structPtr->hrap_end_col = dbs.hrap_end_col;
            setNullIfIndicated(dbs.ind_hrap_end_col, INT, &structPtr->hrap_end_col);

            structPtr->area = dbs.area;
            setNullIfIndicated(dbs.ind_area, DOUBLE, &structPtr->area);


        }
        else
        {
            break;
        }

        if (first)
        {
            listPtr = structPtr;
            ListInit(&listPtr->list);
            first = 0;
        }

        ListAdd(&listPtr->list, &structPtr->node);
        memset(&dbs, '\0', sizeof(dbs));

        EXEC SQL FETCH tcur1 INTO 
        :dbs.area_id, :dbs.hrap_row, 
        :dbs.hrap_beg_col, :dbs.hrap_end_col:dbs.ind_hrap_end_col, 
        :dbs.area:dbs.ind_area        ;

        if (SQLCODE < 0)
        {
            if (errorLoggingOn)
            {
                fprintf(stderr, "GetLineSegs() in Nth fetch section --- ERROR\n");
                fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
                fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
                fflush(stderr);
            }
            initDbStatus(&dbStatus);
            return (NULL);
        }
    }

    initDbStatus(&dbStatus);
    setDbStatusRowsAffected(&dbStatus, rowCount);

    EXEC SQL CLOSE tcur1;
    return(listPtr);
}

/* ------------------------------------------------------------------------- */

LineSegs * SelectLineSegs(const char * where)
{

    LineSegs * listPtr = NULL;
    LineSegs * structPtr = NULL;
    char selectStatement[] = "SELECT * FROM LineSegs ";

    int rowCount = 0;
    int first = 1;

    EXEC SQL BEGIN DECLARE SECTION;

    struct LineSegs_t   dbs;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, SELECT);

    strcpy(queryBuffer, selectStatement);

    if ( ( where != NULL ) && ( * where != '\0' ) ) 
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE tid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectLineSegs() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL DECLARE tcur2 CURSOR WITH HOLD FOR tid;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectLineSegs() in Declare cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL OPEN tcur2;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectLineSegs() in Open cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    listPtr = NULL;
    memset(&dbs, '\0', sizeof(dbs));

    EXEC SQL FETCH tcur2 INTO 
    :dbs.area_id, :dbs.hrap_row, 
    :dbs.hrap_beg_col, :dbs.hrap_end_col:dbs.ind_hrap_end_col, 
    :dbs.area:dbs.ind_area    ;

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectLineSegs() in Initial FETCH section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    while (SQLCODE == 0) 
    {
        rowCount++;
        if ((structPtr = (LineSegs *) malloc(sizeof(LineSegs))) != NULL)
        {

            strcpy(structPtr->area_id, dbs.area_id);

            structPtr->hrap_row = dbs.hrap_row;

            structPtr->hrap_beg_col = dbs.hrap_beg_col;

            structPtr->hrap_end_col = dbs.hrap_end_col;
            setNullIfIndicated(dbs.ind_hrap_end_col, INT, &structPtr->hrap_end_col);

            structPtr->area = dbs.area;
            setNullIfIndicated(dbs.ind_area, DOUBLE, &structPtr->area);


        }
        else
        {
            break;
        }

        if (first)
        {
            listPtr = structPtr;
            ListInit(&listPtr->list);
            first = 0;
        }

        ListAdd(&listPtr->list, &structPtr->node);
        memset(&dbs, '\0', sizeof(dbs));

        EXEC SQL FETCH tcur2 INTO 
        :dbs.area_id, :dbs.hrap_row, 
        :dbs.hrap_beg_col, :dbs.hrap_end_col:dbs.ind_hrap_end_col, 
        :dbs.area:dbs.ind_area        ;

        if (SQLCODE < 0)
        {
            if (errorLoggingOn)
            {
                fprintf(stderr, "SelectLineSegs() in Nth fetch section --- ERROR\n");
                fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
                fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
                fflush(stderr);
            }
            initDbStatus(&dbStatus);
            return (NULL);
        }
    }

    initDbStatus(&dbStatus);
    setDbStatusRowsAffected(&dbStatus, rowCount);

    EXEC SQL CLOSE tcur2;
    return(listPtr);
}

/* ------------------------------------------------------------------------- */

int SelectLineSegsCount(const char * where)
{

    char selectStatement[] = "SELECT COUNT(*) FROM LineSegs ";

    EXEC SQL BEGIN DECLARE SECTION;

    int rowCount = 0;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, SELECT);

    strcpy(queryBuffer, selectStatement);

    if ( ( where != NULL ) && ( * where != '\0' ) ) 
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE tid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountLineSegs() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }

    EXEC SQL DECLARE tcur3 CURSOR WITH HOLD FOR tid;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountLineSegs() in Declare cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }

    EXEC SQL OPEN tcur3;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountLineSegs() in Open cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }


    EXEC SQL FETCH tcur3 INTO :rowCount;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountLineSegs() in Initial FETCH section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }

    initDbStatus(&dbStatus);
    setDbStatusRowsAffected(&dbStatus, rowCount);

    EXEC SQL CLOSE tcur3;
    return(rowCount);
}

/* ------------------------------------------------------------------------- */

int PutLineSegs(const LineSegs * structPtr)
{
    EXEC SQL BEGIN DECLARE SECTION;

    struct LineSegs_t  dbs;

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, INSERT);

    if (structPtr == NULL)
    {
        return(ERR_BAD_ARGS);
    }

    memset(&dbs, '\0', sizeof(dbs));

    strcpy(dbs.area_id, structPtr->area_id);

    dbs.hrap_row = structPtr->hrap_row;

    dbs.hrap_beg_col = structPtr->hrap_beg_col;

    dbs.hrap_end_col = structPtr->hrap_end_col;
    dbs.ind_hrap_end_col = getIndicator(INT, (void *)&structPtr->hrap_end_col);

    dbs.area = structPtr->area;
    dbs.ind_area = getIndicator(DOUBLE, (void *)&structPtr->area);


    EXEC SQL INSERT INTO LineSegs (area_id,hrap_row,
        hrap_beg_col,hrap_end_col,area        )
        VALUES (
         :dbs.area_id, :dbs.hrap_row, :dbs.hrap_beg_col,
         :dbs.hrap_end_col:dbs.ind_hrap_end_col, :dbs.area:dbs.ind_area);

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "PutLineSegs() in Insert section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

int InsertLineSegs(const LineSegs * structPtr)
{
    EXEC SQL BEGIN DECLARE SECTION;

    struct LineSegs_t  dbs;

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, INSERT);

    if (structPtr == NULL)
    {
        return(ERR_BAD_ARGS);
    }

    memset(&dbs, '\0', sizeof(dbs));

    strcpy(dbs.area_id, structPtr->area_id);

    dbs.hrap_row = structPtr->hrap_row;

    dbs.hrap_beg_col = structPtr->hrap_beg_col;

    dbs.hrap_end_col = structPtr->hrap_end_col;
    dbs.ind_hrap_end_col = getIndicator(INT, (void *)&structPtr->hrap_end_col);

    dbs.area = structPtr->area;
    dbs.ind_area = getIndicator(DOUBLE, (void *)&structPtr->area);


    EXEC SQL INSERT INTO LineSegs (area_id,hrap_row,
        hrap_beg_col,hrap_end_col,area        )
        VALUES (
         :dbs.area_id, :dbs.hrap_row, :dbs.hrap_beg_col,
         :dbs.hrap_end_col:dbs.ind_hrap_end_col, :dbs.area:dbs.ind_area);

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "InsertLineSegs() in Insert section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

int UpdateLineSegs(const LineSegs *structPtr, const char *where)
{
    EXEC SQL BEGIN DECLARE SECTION;

    struct LineSegs_t   dbs;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, UPDATE);

    strcpy(dbs.area_id, structPtr->area_id);

    dbs.hrap_row = structPtr->hrap_row;

    dbs.hrap_beg_col = structPtr->hrap_beg_col;

    dbs.hrap_end_col = structPtr->hrap_end_col;
    dbs.ind_hrap_end_col = getIndicator(INT, (void *)&structPtr->hrap_end_col);

    dbs.area = structPtr->area;
    dbs.ind_area = getIndicator(DOUBLE, (void *)&structPtr->area);


    sprintf(queryBuffer, " UPDATE LineSegs SET " );
    strcat(queryBuffer, "area_id = ? , hrap_row = ? , hrap_beg_col = ? , hrap_end_col = ? , area = ? ");

    if ( (where != NULL) && (*where != '\0'))
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE uid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "UpdateLineSegs() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return(SQLCODE);
    }

    EXEC SQL EXECUTE uid USING  :dbs.area_id, :dbs.hrap_row, :dbs.hrap_beg_col, :dbs.hrap_end_col:dbs.ind_hrap_end_col, :dbs.area:dbs.ind_area;

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "UpdateLineSegs() in Execute section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return(SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

int DeleteLineSegs(const char *where)
{
    char deleteStatement[] = "DELETE FROM LineSegs ";
    EXEC SQL BEGIN DECLARE SECTION;

    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    strcpy(queryBuffer, deleteStatement);
    if ( (where != NULL) && (*where != '\0'))
    {
        strcat(queryBuffer, where);
    }
    EXEC SQL EXECUTE IMMEDIATE :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "DeleteLineSegs() in Execute Immediate section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return(SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

int UpdateLineSegsByRecord (const LineSegs * newStructPtr, const LineSegs * oldStructPtr)
{
    char whereClause[BUFSIZ];
    GetLineSegsPrimaryKeyWhereString(oldStructPtr, whereClause);
    return (UpdateLineSegs(newStructPtr, whereClause));
}

/* ------------------------------------------------------------------------- */

int InsertOrUpdateLineSegs(const LineSegs * structPtr)
{
    UpdateLineSegsByRecord(structPtr, structPtr);
    setDbStatusSqlCommand(&dbStatus, UPDATE);

    if ( (SQLCODE < 0) || (SQLCODE == 100) )
    {
        InsertLineSegs(structPtr);
        setDbStatusSqlCommand(&dbStatus, INSERT);
    }

    initDbStatus(&dbStatus);
    return(SQLCODE);
}

/* ------------------------------------------------------------------------- */

int InsertIfUniqueLineSegs(const LineSegs * structPtr, bool *isUnique)
{
    int resultCode = 0;
    if (LineSegsExists(structPtr))
    {
        setDbStatusSqlCommand(&dbStatus, SELECT);
        *isUnique = false;
        resultCode = dbStatus.sql_code;
    }
    else
    {
        resultCode = dbStatus.sql_code;
        if (resultCode == 0)
        {
            InsertLineSegs(structPtr);
            setDbStatusSqlCommand(&dbStatus, INSERT);
            *isUnique = true;
            resultCode = dbStatus.sql_code;
        }
        else
        {
            *isUnique = false;
        }
    }
    initDbStatus(&dbStatus);

    return(resultCode);
}

/* ------------------------------------------------------------------------- */

int DeleteLineSegsByRecord(const LineSegs * structPtr)
{
    char whereClause[BUFSIZ];
    GetLineSegsPrimaryKeyWhereString(structPtr, whereClause);
    return (DeleteLineSegs(whereClause));
}

/* ------------------------------------------------------------------------- */

bool LineSegsExists(const LineSegs * structPtr)
{
    int result = false;
    int rowCount = 0;
    char whereString[QUERY_LEN];

    GetLineSegsPrimaryKeyWhereString(structPtr, whereString);
    rowCount = SelectLineSegsCount(whereString);

    if (rowCount > 0)
    {
        result = true;
    }
    else
    {
        result = false;
    }

    return(result);
}

/* ------------------------------------------------------------------------- */

void GetLineSegsPrimaryKeyWhereString (const LineSegs * structPtr, char returnWhereString[] )
{
    sprintf(returnWhereString, "WHERE area_id = '%s'  AND hrap_row = %ld  AND hrap_beg_col = %ld ",
            structPtr->area_id, structPtr->hrap_row, structPtr->hrap_beg_col);
}

/* ------------------------------------------------------------------------- */

void FreeLineSegs( LineSegs * structPtr)
{
    LineSegs* nextPtr = NULL;

    while (structPtr != NULL)
    {
        nextPtr = ( LineSegs * ) ListNext ( &structPtr->node );
        free (structPtr);
        structPtr = nextPtr;
    }
    return;
}

/* ------------------------------------------------------------------------- */

DbStatus * GetLineSegsDbStatus()
{
    return &dbStatus;
}

/* ------------------------------------------------------------------------- */

void SetLineSegsErrorLogging(int value)
{
    errorLoggingOn = value;
    return;
}


/* ------------------------------------------------------------------------- */

