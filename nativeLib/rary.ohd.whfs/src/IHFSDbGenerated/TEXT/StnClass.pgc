/*
    File: StnClass.pgc
    Author  : CDBGEN
    Created : Wed Aug 06 12:34:31 EDT 2008 using database hd_ob83empty
    Description: This .pgc file has an associated header file. 
            and defines all functions and the table's INTERNAL record structure.
*/

#include "StnClass.h"

EXEC SQL include sqlda;
EXEC SQL include sqltypes;
EXEC SQL include sql3types;
EXEC SQL include pgtypes_timestamp;
EXEC SQL include pgtypes_date;
EXEC SQL include pgtypes_interval;
EXEC SQL include pgtypes_numeric;

EXEC SQL BEGIN DECLARE SECTION;
struct StnClass_t
{
    char		lid[9];
    char		disp_class[11];
    char		dcp[2];
    char		observer[2];
    char		telem_type[11];

    int		ind_disp_class;
    int		ind_dcp;
    int		ind_observer;
    int		ind_telem_type;
} StnClass_rec;
EXEC SQL END DECLARE SECTION;

#define QUERY_LEN 9999
static int errorLoggingOn = 1;

static DbStatus dbStatus;


/* ------------------------------------------------------------------------- */

StnClass * GetStnClass(const char * where)
{

    StnClass * listPtr = NULL;
    StnClass * structPtr = NULL;
    char selectStatement[] = "SELECT * FROM StnClass ";

    int rowCount = 0;
    int first = 1;

    EXEC SQL BEGIN DECLARE SECTION;

    struct StnClass_t   dbs;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, SELECT);

    strcpy(queryBuffer, selectStatement);

    if ( ( where != NULL ) && ( * where != '\0' ) ) 
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE tid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetStnClass() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL DECLARE tcur1 CURSOR WITH HOLD FOR tid;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetStnClass() in Declare cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL OPEN tcur1;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetStnClass() in Open cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    listPtr = NULL;
    memset(&dbs, '\0', sizeof(dbs));

    EXEC SQL FETCH tcur1 INTO 
    :dbs.lid, :dbs.disp_class:dbs.ind_disp_class, 
    :dbs.dcp:dbs.ind_dcp, :dbs.observer:dbs.ind_observer, 
    :dbs.telem_type:dbs.ind_telem_type    ;

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetStnClass() in Initial FETCH section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    while (SQLCODE == 0) 
    {
        rowCount++;
        if ((structPtr = (StnClass *) malloc(sizeof(StnClass))) != NULL)
        {

            strcpy(structPtr->lid, dbs.lid);

            strcpy(structPtr->disp_class, dbs.disp_class);
            setNullIfIndicated(dbs.ind_disp_class, CHAR, structPtr->disp_class);

            strcpy(structPtr->dcp, dbs.dcp);
            setNullIfIndicated(dbs.ind_dcp, CHAR, structPtr->dcp);

            strcpy(structPtr->observer, dbs.observer);
            setNullIfIndicated(dbs.ind_observer, CHAR, structPtr->observer);

            strcpy(structPtr->telem_type, dbs.telem_type);
            setNullIfIndicated(dbs.ind_telem_type, CHAR, structPtr->telem_type);


        }
        else
        {
            break;
        }

        if (first)
        {
            listPtr = structPtr;
            ListInit(&listPtr->list);
            first = 0;
        }

        ListAdd(&listPtr->list, &structPtr->node);
        memset(&dbs, '\0', sizeof(dbs));

        EXEC SQL FETCH tcur1 INTO 
        :dbs.lid, :dbs.disp_class:dbs.ind_disp_class, 
        :dbs.dcp:dbs.ind_dcp, :dbs.observer:dbs.ind_observer, 
        :dbs.telem_type:dbs.ind_telem_type        ;

        if (SQLCODE < 0)
        {
            if (errorLoggingOn)
            {
                fprintf(stderr, "GetStnClass() in Nth fetch section --- ERROR\n");
                fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
                fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
                fflush(stderr);
            }
            initDbStatus(&dbStatus);
            return (NULL);
        }
    }

    initDbStatus(&dbStatus);
    setDbStatusRowsAffected(&dbStatus, rowCount);

    EXEC SQL CLOSE tcur1;
    return(listPtr);
}

/* ------------------------------------------------------------------------- */

StnClass * SelectStnClass(const char * where)
{

    StnClass * listPtr = NULL;
    StnClass * structPtr = NULL;
    char selectStatement[] = "SELECT * FROM StnClass ";

    int rowCount = 0;
    int first = 1;

    EXEC SQL BEGIN DECLARE SECTION;

    struct StnClass_t   dbs;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, SELECT);

    strcpy(queryBuffer, selectStatement);

    if ( ( where != NULL ) && ( * where != '\0' ) ) 
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE tid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectStnClass() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL DECLARE tcur2 CURSOR WITH HOLD FOR tid;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectStnClass() in Declare cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL OPEN tcur2;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectStnClass() in Open cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    listPtr = NULL;
    memset(&dbs, '\0', sizeof(dbs));

    EXEC SQL FETCH tcur2 INTO 
    :dbs.lid, :dbs.disp_class:dbs.ind_disp_class, 
    :dbs.dcp:dbs.ind_dcp, :dbs.observer:dbs.ind_observer, 
    :dbs.telem_type:dbs.ind_telem_type    ;

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectStnClass() in Initial FETCH section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    while (SQLCODE == 0) 
    {
        rowCount++;
        if ((structPtr = (StnClass *) malloc(sizeof(StnClass))) != NULL)
        {

            strcpy(structPtr->lid, dbs.lid);

            strcpy(structPtr->disp_class, dbs.disp_class);
            setNullIfIndicated(dbs.ind_disp_class, CHAR, structPtr->disp_class);

            strcpy(structPtr->dcp, dbs.dcp);
            setNullIfIndicated(dbs.ind_dcp, CHAR, structPtr->dcp);

            strcpy(structPtr->observer, dbs.observer);
            setNullIfIndicated(dbs.ind_observer, CHAR, structPtr->observer);

            strcpy(structPtr->telem_type, dbs.telem_type);
            setNullIfIndicated(dbs.ind_telem_type, CHAR, structPtr->telem_type);


        }
        else
        {
            break;
        }

        if (first)
        {
            listPtr = structPtr;
            ListInit(&listPtr->list);
            first = 0;
        }

        ListAdd(&listPtr->list, &structPtr->node);
        memset(&dbs, '\0', sizeof(dbs));

        EXEC SQL FETCH tcur2 INTO 
        :dbs.lid, :dbs.disp_class:dbs.ind_disp_class, 
        :dbs.dcp:dbs.ind_dcp, :dbs.observer:dbs.ind_observer, 
        :dbs.telem_type:dbs.ind_telem_type        ;

        if (SQLCODE < 0)
        {
            if (errorLoggingOn)
            {
                fprintf(stderr, "SelectStnClass() in Nth fetch section --- ERROR\n");
                fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
                fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
                fflush(stderr);
            }
            initDbStatus(&dbStatus);
            return (NULL);
        }
    }

    initDbStatus(&dbStatus);
    setDbStatusRowsAffected(&dbStatus, rowCount);

    EXEC SQL CLOSE tcur2;
    return(listPtr);
}

/* ------------------------------------------------------------------------- */

int SelectStnClassCount(const char * where)
{

    char selectStatement[] = "SELECT COUNT(*) FROM StnClass ";

    EXEC SQL BEGIN DECLARE SECTION;

    int rowCount = 0;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, SELECT);

    strcpy(queryBuffer, selectStatement);

    if ( ( where != NULL ) && ( * where != '\0' ) ) 
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE tid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountStnClass() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }

    EXEC SQL DECLARE tcur3 CURSOR WITH HOLD FOR tid;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountStnClass() in Declare cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }

    EXEC SQL OPEN tcur3;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountStnClass() in Open cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }


    EXEC SQL FETCH tcur3 INTO :rowCount;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountStnClass() in Initial FETCH section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }

    initDbStatus(&dbStatus);
    setDbStatusRowsAffected(&dbStatus, rowCount);

    EXEC SQL CLOSE tcur3;
    return(rowCount);
}

/* ------------------------------------------------------------------------- */

int PutStnClass(const StnClass * structPtr)
{
    EXEC SQL BEGIN DECLARE SECTION;

    struct StnClass_t  dbs;

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, INSERT);

    if (structPtr == NULL)
    {
        return(ERR_BAD_ARGS);
    }

    memset(&dbs, '\0', sizeof(dbs));

    strcpy(dbs.lid, structPtr->lid);

    strcpy(dbs.disp_class, structPtr->disp_class);
    dbs.ind_disp_class = getIndicator(CHAR, (void *)structPtr->disp_class);

    strcpy(dbs.dcp, structPtr->dcp);
    dbs.ind_dcp = getIndicator(CHAR, (void *)structPtr->dcp);

    strcpy(dbs.observer, structPtr->observer);
    dbs.ind_observer = getIndicator(CHAR, (void *)structPtr->observer);

    strcpy(dbs.telem_type, structPtr->telem_type);
    dbs.ind_telem_type = getIndicator(CHAR, (void *)structPtr->telem_type);


    EXEC SQL INSERT INTO StnClass (lid,disp_class,
        dcp,observer,telem_type        )
        VALUES (
         :dbs.lid, :dbs.disp_class:dbs.ind_disp_class, :dbs.dcp:dbs.ind_dcp,
         :dbs.observer:dbs.ind_observer, :dbs.telem_type:dbs.ind_telem_type);

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "PutStnClass() in Insert section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

int InsertStnClass(const StnClass * structPtr)
{
    EXEC SQL BEGIN DECLARE SECTION;

    struct StnClass_t  dbs;

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, INSERT);

    if (structPtr == NULL)
    {
        return(ERR_BAD_ARGS);
    }

    memset(&dbs, '\0', sizeof(dbs));

    strcpy(dbs.lid, structPtr->lid);

    strcpy(dbs.disp_class, structPtr->disp_class);
    dbs.ind_disp_class = getIndicator(CHAR, (void *)structPtr->disp_class);

    strcpy(dbs.dcp, structPtr->dcp);
    dbs.ind_dcp = getIndicator(CHAR, (void *)structPtr->dcp);

    strcpy(dbs.observer, structPtr->observer);
    dbs.ind_observer = getIndicator(CHAR, (void *)structPtr->observer);

    strcpy(dbs.telem_type, structPtr->telem_type);
    dbs.ind_telem_type = getIndicator(CHAR, (void *)structPtr->telem_type);


    EXEC SQL INSERT INTO StnClass (lid,disp_class,
        dcp,observer,telem_type        )
        VALUES (
         :dbs.lid, :dbs.disp_class:dbs.ind_disp_class, :dbs.dcp:dbs.ind_dcp,
         :dbs.observer:dbs.ind_observer, :dbs.telem_type:dbs.ind_telem_type);

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "InsertStnClass() in Insert section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

int UpdateStnClass(const StnClass *structPtr, const char *where)
{
    EXEC SQL BEGIN DECLARE SECTION;

    struct StnClass_t   dbs;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, UPDATE);

    strcpy(dbs.lid, structPtr->lid);

    strcpy(dbs.disp_class, structPtr->disp_class);
    dbs.ind_disp_class = getIndicator(CHAR, (void *)structPtr->disp_class);

    strcpy(dbs.dcp, structPtr->dcp);
    dbs.ind_dcp = getIndicator(CHAR, (void *)structPtr->dcp);

    strcpy(dbs.observer, structPtr->observer);
    dbs.ind_observer = getIndicator(CHAR, (void *)structPtr->observer);

    strcpy(dbs.telem_type, structPtr->telem_type);
    dbs.ind_telem_type = getIndicator(CHAR, (void *)structPtr->telem_type);


    sprintf(queryBuffer, " UPDATE StnClass SET " );
    strcat(queryBuffer, "lid = ? , disp_class = ? , dcp = ? , observer = ? , telem_type = ? ");

    if ( (where != NULL) && (*where != '\0'))
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE uid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "UpdateStnClass() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return(SQLCODE);
    }

    EXEC SQL EXECUTE uid USING  :dbs.lid, :dbs.disp_class:dbs.ind_disp_class, :dbs.dcp:dbs.ind_dcp, :dbs.observer:dbs.ind_observer, :dbs.telem_type:dbs.ind_telem_type;

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "UpdateStnClass() in Execute section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return(SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

int DeleteStnClass(const char *where)
{
    char deleteStatement[] = "DELETE FROM StnClass ";
    EXEC SQL BEGIN DECLARE SECTION;

    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    strcpy(queryBuffer, deleteStatement);
    if ( (where != NULL) && (*where != '\0'))
    {
        strcat(queryBuffer, where);
    }
    EXEC SQL EXECUTE IMMEDIATE :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "DeleteStnClass() in Execute Immediate section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return(SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

int UpdateStnClassByRecord (const StnClass * newStructPtr, const StnClass * oldStructPtr)
{
    char whereClause[BUFSIZ];
    GetStnClassPrimaryKeyWhereString(oldStructPtr, whereClause);
    return (UpdateStnClass(newStructPtr, whereClause));
}

/* ------------------------------------------------------------------------- */

int InsertOrUpdateStnClass(const StnClass * structPtr)
{
    UpdateStnClassByRecord(structPtr, structPtr);
    setDbStatusSqlCommand(&dbStatus, UPDATE);

    if ( (SQLCODE < 0) || (SQLCODE == 100) )
    {
        InsertStnClass(structPtr);
        setDbStatusSqlCommand(&dbStatus, INSERT);
    }

    initDbStatus(&dbStatus);
    return(SQLCODE);
}

/* ------------------------------------------------------------------------- */

int InsertIfUniqueStnClass(const StnClass * structPtr, bool *isUnique)
{
    int resultCode = 0;
    if (StnClassExists(structPtr))
    {
        setDbStatusSqlCommand(&dbStatus, SELECT);
        *isUnique = false;
        resultCode = dbStatus.sql_code;
    }
    else
    {
        resultCode = dbStatus.sql_code;
        if (resultCode == 0)
        {
            InsertStnClass(structPtr);
            setDbStatusSqlCommand(&dbStatus, INSERT);
            *isUnique = true;
            resultCode = dbStatus.sql_code;
        }
        else
        {
            *isUnique = false;
        }
    }
    initDbStatus(&dbStatus);

    return(resultCode);
}

/* ------------------------------------------------------------------------- */

int DeleteStnClassByRecord(const StnClass * structPtr)
{
    char whereClause[BUFSIZ];
    GetStnClassPrimaryKeyWhereString(structPtr, whereClause);
    return (DeleteStnClass(whereClause));
}

/* ------------------------------------------------------------------------- */

bool StnClassExists(const StnClass * structPtr)
{
    int result = false;
    int rowCount = 0;
    char whereString[QUERY_LEN];

    GetStnClassPrimaryKeyWhereString(structPtr, whereString);
    rowCount = SelectStnClassCount(whereString);

    if (rowCount > 0)
    {
        result = true;
    }
    else
    {
        result = false;
    }

    return(result);
}

/* ------------------------------------------------------------------------- */

void GetStnClassPrimaryKeyWhereString (const StnClass * structPtr, char returnWhereString[] )
{
    sprintf(returnWhereString, "WHERE lid = '%s' ",
            structPtr->lid);
}

/* ------------------------------------------------------------------------- */

void FreeStnClass( StnClass * structPtr)
{
    StnClass* nextPtr = NULL;

    while (structPtr != NULL)
    {
        nextPtr = ( StnClass * ) ListNext ( &structPtr->node );
        free (structPtr);
        structPtr = nextPtr;
    }
    return;
}

/* ------------------------------------------------------------------------- */

DbStatus * GetStnClassDbStatus()
{
    return &dbStatus;
}

/* ------------------------------------------------------------------------- */

void SetStnClassErrorLogging(int value)
{
    errorLoggingOn = value;
    return;
}


/* ------------------------------------------------------------------------- */

