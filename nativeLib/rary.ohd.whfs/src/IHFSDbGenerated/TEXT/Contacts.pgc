/*
    File: Contacts.pgc
    Author  : CDBGEN
    Created : Wed Aug 06 12:34:17 EDT 2008 using database hd_ob83empty
    Description: This .pgc file has an associated header file. 
            and defines all functions and the table's INTERNAL record structure.
*/

#include "Contacts.h"

EXEC SQL include sqlda;
EXEC SQL include sqltypes;
EXEC SQL include sql3types;
EXEC SQL include pgtypes_timestamp;
EXEC SQL include pgtypes_date;
EXEC SQL include pgtypes_interval;
EXEC SQL include pgtypes_numeric;

EXEC SQL BEGIN DECLARE SECTION;
struct Contacts_t
{
    char		lid[9];
    char		contact[29];
    char		phone[19];
    char		email[61];
    char		remark[256];
    long		priority;

    int		ind_phone;
    int		ind_email;
    int		ind_remark;
    int		ind_priority;
} Contacts_rec;
EXEC SQL END DECLARE SECTION;

#define QUERY_LEN 9999
static int errorLoggingOn = 1;

static DbStatus dbStatus;


/* ------------------------------------------------------------------------- */

Contacts * GetContacts(const char * where)
{

    Contacts * listPtr = NULL;
    Contacts * structPtr = NULL;
    char selectStatement[] = "SELECT * FROM Contacts ";

    int rowCount = 0;
    int first = 1;

    EXEC SQL BEGIN DECLARE SECTION;

    struct Contacts_t   dbs;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, SELECT);

    strcpy(queryBuffer, selectStatement);

    if ( ( where != NULL ) && ( * where != '\0' ) ) 
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE tid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetContacts() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL DECLARE tcur1 CURSOR WITH HOLD FOR tid;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetContacts() in Declare cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL OPEN tcur1;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetContacts() in Open cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    listPtr = NULL;
    memset(&dbs, '\0', sizeof(dbs));

    EXEC SQL FETCH tcur1 INTO 
    :dbs.lid, :dbs.contact, 
    :dbs.phone:dbs.ind_phone, :dbs.email:dbs.ind_email, 
    :dbs.remark:dbs.ind_remark, :dbs.priority:dbs.ind_priority    ;

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetContacts() in Initial FETCH section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    while (SQLCODE == 0) 
    {
        rowCount++;
        if ((structPtr = (Contacts *) malloc(sizeof(Contacts))) != NULL)
        {

            strcpy(structPtr->lid, dbs.lid);

            strcpy(structPtr->contact, dbs.contact);

            strcpy(structPtr->phone, dbs.phone);
            setNullIfIndicated(dbs.ind_phone, CHAR, structPtr->phone);

            strcpy(structPtr->email, dbs.email);
            setNullIfIndicated(dbs.ind_email, CHAR, structPtr->email);

            strcpy(structPtr->remark, dbs.remark);
            setNullIfIndicated(dbs.ind_remark, CHAR, structPtr->remark);

            structPtr->priority = dbs.priority;
            setNullIfIndicated(dbs.ind_priority, INT, &structPtr->priority);


        }
        else
        {
            break;
        }

        if (first)
        {
            listPtr = structPtr;
            ListInit(&listPtr->list);
            first = 0;
        }

        ListAdd(&listPtr->list, &structPtr->node);
        memset(&dbs, '\0', sizeof(dbs));

        EXEC SQL FETCH tcur1 INTO 
        :dbs.lid, :dbs.contact, 
        :dbs.phone:dbs.ind_phone, :dbs.email:dbs.ind_email, 
        :dbs.remark:dbs.ind_remark, :dbs.priority:dbs.ind_priority        ;

        if (SQLCODE < 0)
        {
            if (errorLoggingOn)
            {
                fprintf(stderr, "GetContacts() in Nth fetch section --- ERROR\n");
                fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
                fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
                fflush(stderr);
            }
            initDbStatus(&dbStatus);
            return (NULL);
        }
    }

    initDbStatus(&dbStatus);
    setDbStatusRowsAffected(&dbStatus, rowCount);

    EXEC SQL CLOSE tcur1;
    return(listPtr);
}

/* ------------------------------------------------------------------------- */

Contacts * SelectContacts(const char * where)
{

    Contacts * listPtr = NULL;
    Contacts * structPtr = NULL;
    char selectStatement[] = "SELECT * FROM Contacts ";

    int rowCount = 0;
    int first = 1;

    EXEC SQL BEGIN DECLARE SECTION;

    struct Contacts_t   dbs;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, SELECT);

    strcpy(queryBuffer, selectStatement);

    if ( ( where != NULL ) && ( * where != '\0' ) ) 
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE tid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectContacts() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL DECLARE tcur2 CURSOR WITH HOLD FOR tid;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectContacts() in Declare cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL OPEN tcur2;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectContacts() in Open cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    listPtr = NULL;
    memset(&dbs, '\0', sizeof(dbs));

    EXEC SQL FETCH tcur2 INTO 
    :dbs.lid, :dbs.contact, 
    :dbs.phone:dbs.ind_phone, :dbs.email:dbs.ind_email, 
    :dbs.remark:dbs.ind_remark, :dbs.priority:dbs.ind_priority    ;

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectContacts() in Initial FETCH section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    while (SQLCODE == 0) 
    {
        rowCount++;
        if ((structPtr = (Contacts *) malloc(sizeof(Contacts))) != NULL)
        {

            strcpy(structPtr->lid, dbs.lid);

            strcpy(structPtr->contact, dbs.contact);

            strcpy(structPtr->phone, dbs.phone);
            setNullIfIndicated(dbs.ind_phone, CHAR, structPtr->phone);

            strcpy(structPtr->email, dbs.email);
            setNullIfIndicated(dbs.ind_email, CHAR, structPtr->email);

            strcpy(structPtr->remark, dbs.remark);
            setNullIfIndicated(dbs.ind_remark, CHAR, structPtr->remark);

            structPtr->priority = dbs.priority;
            setNullIfIndicated(dbs.ind_priority, INT, &structPtr->priority);


        }
        else
        {
            break;
        }

        if (first)
        {
            listPtr = structPtr;
            ListInit(&listPtr->list);
            first = 0;
        }

        ListAdd(&listPtr->list, &structPtr->node);
        memset(&dbs, '\0', sizeof(dbs));

        EXEC SQL FETCH tcur2 INTO 
        :dbs.lid, :dbs.contact, 
        :dbs.phone:dbs.ind_phone, :dbs.email:dbs.ind_email, 
        :dbs.remark:dbs.ind_remark, :dbs.priority:dbs.ind_priority        ;

        if (SQLCODE < 0)
        {
            if (errorLoggingOn)
            {
                fprintf(stderr, "SelectContacts() in Nth fetch section --- ERROR\n");
                fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
                fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
                fflush(stderr);
            }
            initDbStatus(&dbStatus);
            return (NULL);
        }
    }

    initDbStatus(&dbStatus);
    setDbStatusRowsAffected(&dbStatus, rowCount);

    EXEC SQL CLOSE tcur2;
    return(listPtr);
}

/* ------------------------------------------------------------------------- */

int SelectContactsCount(const char * where)
{

    char selectStatement[] = "SELECT COUNT(*) FROM Contacts ";

    EXEC SQL BEGIN DECLARE SECTION;

    int rowCount = 0;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, SELECT);

    strcpy(queryBuffer, selectStatement);

    if ( ( where != NULL ) && ( * where != '\0' ) ) 
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE tid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountContacts() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }

    EXEC SQL DECLARE tcur3 CURSOR WITH HOLD FOR tid;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountContacts() in Declare cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }

    EXEC SQL OPEN tcur3;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountContacts() in Open cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }


    EXEC SQL FETCH tcur3 INTO :rowCount;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountContacts() in Initial FETCH section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }

    initDbStatus(&dbStatus);
    setDbStatusRowsAffected(&dbStatus, rowCount);

    EXEC SQL CLOSE tcur3;
    return(rowCount);
}

/* ------------------------------------------------------------------------- */

int PutContacts(const Contacts * structPtr)
{
    EXEC SQL BEGIN DECLARE SECTION;

    struct Contacts_t  dbs;

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, INSERT);

    if (structPtr == NULL)
    {
        return(ERR_BAD_ARGS);
    }

    memset(&dbs, '\0', sizeof(dbs));

    strcpy(dbs.lid, structPtr->lid);

    strcpy(dbs.contact, structPtr->contact);

    strcpy(dbs.phone, structPtr->phone);
    dbs.ind_phone = getIndicator(CHAR, (void *)structPtr->phone);

    strcpy(dbs.email, structPtr->email);
    dbs.ind_email = getIndicator(CHAR, (void *)structPtr->email);

    strcpy(dbs.remark, structPtr->remark);
    dbs.ind_remark = getIndicator(CHAR, (void *)structPtr->remark);

    dbs.priority = structPtr->priority;
    dbs.ind_priority = getIndicator(INT, (void *)&structPtr->priority);


    EXEC SQL INSERT INTO Contacts (lid,contact,
        phone,email,remark,
        priority        )
        VALUES (
         :dbs.lid, :dbs.contact, :dbs.phone:dbs.ind_phone,
         :dbs.email:dbs.ind_email, :dbs.remark:dbs.ind_remark, :dbs.priority:dbs.ind_priority);

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "PutContacts() in Insert section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

int InsertContacts(const Contacts * structPtr)
{
    EXEC SQL BEGIN DECLARE SECTION;

    struct Contacts_t  dbs;

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, INSERT);

    if (structPtr == NULL)
    {
        return(ERR_BAD_ARGS);
    }

    memset(&dbs, '\0', sizeof(dbs));

    strcpy(dbs.lid, structPtr->lid);

    strcpy(dbs.contact, structPtr->contact);

    strcpy(dbs.phone, structPtr->phone);
    dbs.ind_phone = getIndicator(CHAR, (void *)structPtr->phone);

    strcpy(dbs.email, structPtr->email);
    dbs.ind_email = getIndicator(CHAR, (void *)structPtr->email);

    strcpy(dbs.remark, structPtr->remark);
    dbs.ind_remark = getIndicator(CHAR, (void *)structPtr->remark);

    dbs.priority = structPtr->priority;
    dbs.ind_priority = getIndicator(INT, (void *)&structPtr->priority);


    EXEC SQL INSERT INTO Contacts (lid,contact,
        phone,email,remark,
        priority        )
        VALUES (
         :dbs.lid, :dbs.contact, :dbs.phone:dbs.ind_phone,
         :dbs.email:dbs.ind_email, :dbs.remark:dbs.ind_remark, :dbs.priority:dbs.ind_priority);

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "InsertContacts() in Insert section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

int UpdateContacts(const Contacts *structPtr, const char *where)
{
    EXEC SQL BEGIN DECLARE SECTION;

    struct Contacts_t   dbs;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, UPDATE);

    strcpy(dbs.lid, structPtr->lid);

    strcpy(dbs.contact, structPtr->contact);

    strcpy(dbs.phone, structPtr->phone);
    dbs.ind_phone = getIndicator(CHAR, (void *)structPtr->phone);

    strcpy(dbs.email, structPtr->email);
    dbs.ind_email = getIndicator(CHAR, (void *)structPtr->email);

    strcpy(dbs.remark, structPtr->remark);
    dbs.ind_remark = getIndicator(CHAR, (void *)structPtr->remark);

    dbs.priority = structPtr->priority;
    dbs.ind_priority = getIndicator(INT, (void *)&structPtr->priority);


    sprintf(queryBuffer, " UPDATE Contacts SET " );
    strcat(queryBuffer, "lid = ? , contact = ? , phone = ? , email = ? , remark = ? ,     ");
    strcat(queryBuffer, "priority = ? ");

    if ( (where != NULL) && (*where != '\0'))
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE uid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "UpdateContacts() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return(SQLCODE);
    }

    EXEC SQL EXECUTE uid USING  :dbs.lid, :dbs.contact, :dbs.phone:dbs.ind_phone, :dbs.email:dbs.ind_email, :dbs.remark:dbs.ind_remark,
     :dbs.priority:dbs.ind_priority;

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "UpdateContacts() in Execute section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return(SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

int DeleteContacts(const char *where)
{
    char deleteStatement[] = "DELETE FROM Contacts ";
    EXEC SQL BEGIN DECLARE SECTION;

    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    strcpy(queryBuffer, deleteStatement);
    if ( (where != NULL) && (*where != '\0'))
    {
        strcat(queryBuffer, where);
    }
    EXEC SQL EXECUTE IMMEDIATE :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "DeleteContacts() in Execute Immediate section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return(SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

int UpdateContactsByRecord (const Contacts * newStructPtr, const Contacts * oldStructPtr)
{
    char whereClause[BUFSIZ];
    GetContactsPrimaryKeyWhereString(oldStructPtr, whereClause);
    return (UpdateContacts(newStructPtr, whereClause));
}

/* ------------------------------------------------------------------------- */

int InsertOrUpdateContacts(const Contacts * structPtr)
{
    UpdateContactsByRecord(structPtr, structPtr);
    setDbStatusSqlCommand(&dbStatus, UPDATE);

    if ( (SQLCODE < 0) || (SQLCODE == 100) )
    {
        InsertContacts(structPtr);
        setDbStatusSqlCommand(&dbStatus, INSERT);
    }

    initDbStatus(&dbStatus);
    return(SQLCODE);
}

/* ------------------------------------------------------------------------- */

int InsertIfUniqueContacts(const Contacts * structPtr, bool *isUnique)
{
    int resultCode = 0;
    if (ContactsExists(structPtr))
    {
        setDbStatusSqlCommand(&dbStatus, SELECT);
        *isUnique = false;
        resultCode = dbStatus.sql_code;
    }
    else
    {
        resultCode = dbStatus.sql_code;
        if (resultCode == 0)
        {
            InsertContacts(structPtr);
            setDbStatusSqlCommand(&dbStatus, INSERT);
            *isUnique = true;
            resultCode = dbStatus.sql_code;
        }
        else
        {
            *isUnique = false;
        }
    }
    initDbStatus(&dbStatus);

    return(resultCode);
}

/* ------------------------------------------------------------------------- */

int DeleteContactsByRecord(const Contacts * structPtr)
{
    char whereClause[BUFSIZ];
    GetContactsPrimaryKeyWhereString(structPtr, whereClause);
    return (DeleteContacts(whereClause));
}

/* ------------------------------------------------------------------------- */

bool ContactsExists(const Contacts * structPtr)
{
    int result = false;
    int rowCount = 0;
    char whereString[QUERY_LEN];

    GetContactsPrimaryKeyWhereString(structPtr, whereString);
    rowCount = SelectContactsCount(whereString);

    if (rowCount > 0)
    {
        result = true;
    }
    else
    {
        result = false;
    }

    return(result);
}

/* ------------------------------------------------------------------------- */

void GetContactsPrimaryKeyWhereString (const Contacts * structPtr, char returnWhereString[] )
{
    sprintf(returnWhereString, "WHERE lid = '%s'  AND contact = '%s' ",
            structPtr->lid, structPtr->contact);
}

/* ------------------------------------------------------------------------- */

void FreeContacts( Contacts * structPtr)
{
    Contacts* nextPtr = NULL;

    while (structPtr != NULL)
    {
        nextPtr = ( Contacts * ) ListNext ( &structPtr->node );
        free (structPtr);
        structPtr = nextPtr;
    }
    return;
}

/* ------------------------------------------------------------------------- */

DbStatus * GetContactsDbStatus()
{
    return &dbStatus;
}

/* ------------------------------------------------------------------------- */

void SetContactsErrorLogging(int value)
{
    errorLoggingOn = value;
    return;
}


/* ------------------------------------------------------------------------- */

