/*
    File: RWRadarResult.pgc
    Author  : CDBGEN
    Created : Wed Aug 06 12:34:29 EDT 2008 using database hd_ob83empty
    Description: This .pgc file has an associated header file. 
            and defines all functions and the table's INTERNAL record structure.
*/

#include "RWRadarResult.h"

EXEC SQL include sqlda;
EXEC SQL include sqltypes;
EXEC SQL include sql3types;
EXEC SQL include pgtypes_timestamp;
EXEC SQL include pgtypes_date;
EXEC SQL include pgtypes_interval;
EXEC SQL include pgtypes_numeric;

EXEC SQL BEGIN DECLARE SECTION;
struct RWRadarResult_t
{
    char		radid[4];
    dtime_t		obstime;
    short		num_gages;
    char		rad_avail[2];
    double		rw_bias_val_used;
    double		mem_span_used;
    char		edit_bias[2];
    char		ignore_radar[2];

    int		ind_num_gages;
    int		ind_rad_avail;
    int		ind_rw_bias_val_used;
    int		ind_mem_span_used;
    int		ind_edit_bias;
    int		ind_ignore_radar;
} RWRadarResult_rec;
EXEC SQL END DECLARE SECTION;

#define QUERY_LEN 9999
static int errorLoggingOn = 1;

static DbStatus dbStatus;


/* ------------------------------------------------------------------------- */

RWRadarResult * GetRWRadarResult(const char * where)
{

    RWRadarResult * listPtr = NULL;
    RWRadarResult * structPtr = NULL;
    char selectStatement[] = "SELECT * FROM RWRadarResult ";

    int rowCount = 0;
    int first = 1;

    EXEC SQL BEGIN DECLARE SECTION;

    struct RWRadarResult_t   dbs;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, SELECT);

    strcpy(queryBuffer, selectStatement);

    if ( ( where != NULL ) && ( * where != '\0' ) ) 
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE tid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetRWRadarResult() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL DECLARE tcur1 CURSOR WITH HOLD FOR tid;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetRWRadarResult() in Declare cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL OPEN tcur1;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetRWRadarResult() in Open cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    listPtr = NULL;
    memset(&dbs, '\0', sizeof(dbs));

    EXEC SQL FETCH tcur1 INTO 
    :dbs.radid, :dbs.obstime, 
    :dbs.num_gages:dbs.ind_num_gages, :dbs.rad_avail:dbs.ind_rad_avail, 
    :dbs.rw_bias_val_used:dbs.ind_rw_bias_val_used, :dbs.mem_span_used:dbs.ind_mem_span_used, 
    :dbs.edit_bias:dbs.ind_edit_bias, :dbs.ignore_radar:dbs.ind_ignore_radar    ;

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetRWRadarResult() in Initial FETCH section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    while (SQLCODE == 0) 
    {
        rowCount++;
        if ((structPtr = (RWRadarResult *) malloc(sizeof(RWRadarResult))) != NULL)
        {

            strcpy(structPtr->radid, dbs.radid);

            structPtr->obstime = dbs.obstime;

            structPtr->num_gages = dbs.num_gages;
            setNullIfIndicated(dbs.ind_num_gages, SHORT, &structPtr->num_gages);

            strcpy(structPtr->rad_avail, dbs.rad_avail);
            setNullIfIndicated(dbs.ind_rad_avail, CHAR, structPtr->rad_avail);

            structPtr->rw_bias_val_used = dbs.rw_bias_val_used;
            setNullIfIndicated(dbs.ind_rw_bias_val_used, DOUBLE, &structPtr->rw_bias_val_used);

            structPtr->mem_span_used = dbs.mem_span_used;
            setNullIfIndicated(dbs.ind_mem_span_used, DOUBLE, &structPtr->mem_span_used);

            strcpy(structPtr->edit_bias, dbs.edit_bias);
            setNullIfIndicated(dbs.ind_edit_bias, CHAR, structPtr->edit_bias);

            strcpy(structPtr->ignore_radar, dbs.ignore_radar);
            setNullIfIndicated(dbs.ind_ignore_radar, CHAR, structPtr->ignore_radar);


        }
        else
        {
            break;
        }

        if (first)
        {
            listPtr = structPtr;
            ListInit(&listPtr->list);
            first = 0;
        }

        ListAdd(&listPtr->list, &structPtr->node);
        memset(&dbs, '\0', sizeof(dbs));

        EXEC SQL FETCH tcur1 INTO 
        :dbs.radid, :dbs.obstime, 
        :dbs.num_gages:dbs.ind_num_gages, :dbs.rad_avail:dbs.ind_rad_avail, 
        :dbs.rw_bias_val_used:dbs.ind_rw_bias_val_used, :dbs.mem_span_used:dbs.ind_mem_span_used, 
        :dbs.edit_bias:dbs.ind_edit_bias, :dbs.ignore_radar:dbs.ind_ignore_radar        ;

        if (SQLCODE < 0)
        {
            if (errorLoggingOn)
            {
                fprintf(stderr, "GetRWRadarResult() in Nth fetch section --- ERROR\n");
                fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
                fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
                fflush(stderr);
            }
            initDbStatus(&dbStatus);
            return (NULL);
        }
    }

    initDbStatus(&dbStatus);
    setDbStatusRowsAffected(&dbStatus, rowCount);

    EXEC SQL CLOSE tcur1;
    return(listPtr);
}

/* ------------------------------------------------------------------------- */

RWRadarResult * SelectRWRadarResult(const char * where)
{

    RWRadarResult * listPtr = NULL;
    RWRadarResult * structPtr = NULL;
    char selectStatement[] = "SELECT * FROM RWRadarResult ";

    int rowCount = 0;
    int first = 1;

    EXEC SQL BEGIN DECLARE SECTION;

    struct RWRadarResult_t   dbs;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, SELECT);

    strcpy(queryBuffer, selectStatement);

    if ( ( where != NULL ) && ( * where != '\0' ) ) 
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE tid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectRWRadarResult() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL DECLARE tcur2 CURSOR WITH HOLD FOR tid;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectRWRadarResult() in Declare cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL OPEN tcur2;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectRWRadarResult() in Open cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    listPtr = NULL;
    memset(&dbs, '\0', sizeof(dbs));

    EXEC SQL FETCH tcur2 INTO 
    :dbs.radid, :dbs.obstime, 
    :dbs.num_gages:dbs.ind_num_gages, :dbs.rad_avail:dbs.ind_rad_avail, 
    :dbs.rw_bias_val_used:dbs.ind_rw_bias_val_used, :dbs.mem_span_used:dbs.ind_mem_span_used, 
    :dbs.edit_bias:dbs.ind_edit_bias, :dbs.ignore_radar:dbs.ind_ignore_radar    ;

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectRWRadarResult() in Initial FETCH section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    while (SQLCODE == 0) 
    {
        rowCount++;
        if ((structPtr = (RWRadarResult *) malloc(sizeof(RWRadarResult))) != NULL)
        {

            strcpy(structPtr->radid, dbs.radid);

            structPtr->obstime = dbs.obstime;

            structPtr->num_gages = dbs.num_gages;
            setNullIfIndicated(dbs.ind_num_gages, SHORT, &structPtr->num_gages);

            strcpy(structPtr->rad_avail, dbs.rad_avail);
            setNullIfIndicated(dbs.ind_rad_avail, CHAR, structPtr->rad_avail);

            structPtr->rw_bias_val_used = dbs.rw_bias_val_used;
            setNullIfIndicated(dbs.ind_rw_bias_val_used, DOUBLE, &structPtr->rw_bias_val_used);

            structPtr->mem_span_used = dbs.mem_span_used;
            setNullIfIndicated(dbs.ind_mem_span_used, DOUBLE, &structPtr->mem_span_used);

            strcpy(structPtr->edit_bias, dbs.edit_bias);
            setNullIfIndicated(dbs.ind_edit_bias, CHAR, structPtr->edit_bias);

            strcpy(structPtr->ignore_radar, dbs.ignore_radar);
            setNullIfIndicated(dbs.ind_ignore_radar, CHAR, structPtr->ignore_radar);


        }
        else
        {
            break;
        }

        if (first)
        {
            listPtr = structPtr;
            ListInit(&listPtr->list);
            first = 0;
        }

        ListAdd(&listPtr->list, &structPtr->node);
        memset(&dbs, '\0', sizeof(dbs));

        EXEC SQL FETCH tcur2 INTO 
        :dbs.radid, :dbs.obstime, 
        :dbs.num_gages:dbs.ind_num_gages, :dbs.rad_avail:dbs.ind_rad_avail, 
        :dbs.rw_bias_val_used:dbs.ind_rw_bias_val_used, :dbs.mem_span_used:dbs.ind_mem_span_used, 
        :dbs.edit_bias:dbs.ind_edit_bias, :dbs.ignore_radar:dbs.ind_ignore_radar        ;

        if (SQLCODE < 0)
        {
            if (errorLoggingOn)
            {
                fprintf(stderr, "SelectRWRadarResult() in Nth fetch section --- ERROR\n");
                fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
                fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
                fflush(stderr);
            }
            initDbStatus(&dbStatus);
            return (NULL);
        }
    }

    initDbStatus(&dbStatus);
    setDbStatusRowsAffected(&dbStatus, rowCount);

    EXEC SQL CLOSE tcur2;
    return(listPtr);
}

/* ------------------------------------------------------------------------- */

int SelectRWRadarResultCount(const char * where)
{

    char selectStatement[] = "SELECT COUNT(*) FROM RWRadarResult ";

    EXEC SQL BEGIN DECLARE SECTION;

    int rowCount = 0;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, SELECT);

    strcpy(queryBuffer, selectStatement);

    if ( ( where != NULL ) && ( * where != '\0' ) ) 
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE tid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountRWRadarResult() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }

    EXEC SQL DECLARE tcur3 CURSOR WITH HOLD FOR tid;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountRWRadarResult() in Declare cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }

    EXEC SQL OPEN tcur3;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountRWRadarResult() in Open cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }


    EXEC SQL FETCH tcur3 INTO :rowCount;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountRWRadarResult() in Initial FETCH section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }

    initDbStatus(&dbStatus);
    setDbStatusRowsAffected(&dbStatus, rowCount);

    EXEC SQL CLOSE tcur3;
    return(rowCount);
}

/* ------------------------------------------------------------------------- */

int PutRWRadarResult(const RWRadarResult * structPtr)
{
    EXEC SQL BEGIN DECLARE SECTION;

    struct RWRadarResult_t  dbs;

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, INSERT);

    if (structPtr == NULL)
    {
        return(ERR_BAD_ARGS);
    }

    memset(&dbs, '\0', sizeof(dbs));

    strcpy(dbs.radid, structPtr->radid);

    dbs.obstime = structPtr->obstime;

    dbs.num_gages = structPtr->num_gages;
    dbs.ind_num_gages = getIndicator(SHORT, (void *)&structPtr->num_gages);

    strcpy(dbs.rad_avail, structPtr->rad_avail);
    dbs.ind_rad_avail = getIndicator(CHAR, (void *)structPtr->rad_avail);

    dbs.rw_bias_val_used = structPtr->rw_bias_val_used;
    dbs.ind_rw_bias_val_used = getIndicator(DOUBLE, (void *)&structPtr->rw_bias_val_used);

    dbs.mem_span_used = structPtr->mem_span_used;
    dbs.ind_mem_span_used = getIndicator(DOUBLE, (void *)&structPtr->mem_span_used);

    strcpy(dbs.edit_bias, structPtr->edit_bias);
    dbs.ind_edit_bias = getIndicator(CHAR, (void *)structPtr->edit_bias);

    strcpy(dbs.ignore_radar, structPtr->ignore_radar);
    dbs.ind_ignore_radar = getIndicator(CHAR, (void *)structPtr->ignore_radar);


    EXEC SQL INSERT INTO RWRadarResult (radid,obstime,
        num_gages,rad_avail,rw_bias_val_used,
        mem_span_used,edit_bias,ignore_radar        )
        VALUES (
         :dbs.radid, :dbs.obstime, :dbs.num_gages:dbs.ind_num_gages,
         :dbs.rad_avail:dbs.ind_rad_avail, :dbs.rw_bias_val_used:dbs.ind_rw_bias_val_used, :dbs.mem_span_used:dbs.ind_mem_span_used,
         :dbs.edit_bias:dbs.ind_edit_bias, :dbs.ignore_radar:dbs.ind_ignore_radar);

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "PutRWRadarResult() in Insert section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

int InsertRWRadarResult(const RWRadarResult * structPtr)
{
    EXEC SQL BEGIN DECLARE SECTION;

    struct RWRadarResult_t  dbs;

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, INSERT);

    if (structPtr == NULL)
    {
        return(ERR_BAD_ARGS);
    }

    memset(&dbs, '\0', sizeof(dbs));

    strcpy(dbs.radid, structPtr->radid);

    dbs.obstime = structPtr->obstime;

    dbs.num_gages = structPtr->num_gages;
    dbs.ind_num_gages = getIndicator(SHORT, (void *)&structPtr->num_gages);

    strcpy(dbs.rad_avail, structPtr->rad_avail);
    dbs.ind_rad_avail = getIndicator(CHAR, (void *)structPtr->rad_avail);

    dbs.rw_bias_val_used = structPtr->rw_bias_val_used;
    dbs.ind_rw_bias_val_used = getIndicator(DOUBLE, (void *)&structPtr->rw_bias_val_used);

    dbs.mem_span_used = structPtr->mem_span_used;
    dbs.ind_mem_span_used = getIndicator(DOUBLE, (void *)&structPtr->mem_span_used);

    strcpy(dbs.edit_bias, structPtr->edit_bias);
    dbs.ind_edit_bias = getIndicator(CHAR, (void *)structPtr->edit_bias);

    strcpy(dbs.ignore_radar, structPtr->ignore_radar);
    dbs.ind_ignore_radar = getIndicator(CHAR, (void *)structPtr->ignore_radar);


    EXEC SQL INSERT INTO RWRadarResult (radid,obstime,
        num_gages,rad_avail,rw_bias_val_used,
        mem_span_used,edit_bias,ignore_radar        )
        VALUES (
         :dbs.radid, :dbs.obstime, :dbs.num_gages:dbs.ind_num_gages,
         :dbs.rad_avail:dbs.ind_rad_avail, :dbs.rw_bias_val_used:dbs.ind_rw_bias_val_used, :dbs.mem_span_used:dbs.ind_mem_span_used,
         :dbs.edit_bias:dbs.ind_edit_bias, :dbs.ignore_radar:dbs.ind_ignore_radar);

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "InsertRWRadarResult() in Insert section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

int UpdateRWRadarResult(const RWRadarResult *structPtr, const char *where)
{
    EXEC SQL BEGIN DECLARE SECTION;

    struct RWRadarResult_t   dbs;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, UPDATE);

    strcpy(dbs.radid, structPtr->radid);

    dbs.obstime = structPtr->obstime;

    dbs.num_gages = structPtr->num_gages;
    dbs.ind_num_gages = getIndicator(SHORT, (void *)&structPtr->num_gages);

    strcpy(dbs.rad_avail, structPtr->rad_avail);
    dbs.ind_rad_avail = getIndicator(CHAR, (void *)structPtr->rad_avail);

    dbs.rw_bias_val_used = structPtr->rw_bias_val_used;
    dbs.ind_rw_bias_val_used = getIndicator(DOUBLE, (void *)&structPtr->rw_bias_val_used);

    dbs.mem_span_used = structPtr->mem_span_used;
    dbs.ind_mem_span_used = getIndicator(DOUBLE, (void *)&structPtr->mem_span_used);

    strcpy(dbs.edit_bias, structPtr->edit_bias);
    dbs.ind_edit_bias = getIndicator(CHAR, (void *)structPtr->edit_bias);

    strcpy(dbs.ignore_radar, structPtr->ignore_radar);
    dbs.ind_ignore_radar = getIndicator(CHAR, (void *)structPtr->ignore_radar);


    sprintf(queryBuffer, " UPDATE RWRadarResult SET " );
    strcat(queryBuffer, "radid = ? , obstime = ? , num_gages = ? , rad_avail = ? , rw_bias_val_used = ? ,     ");
    strcat(queryBuffer, "mem_span_used = ? , edit_bias = ? , ignore_radar = ? ");

    if ( (where != NULL) && (*where != '\0'))
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE uid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "UpdateRWRadarResult() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return(SQLCODE);
    }

    EXEC SQL EXECUTE uid USING  :dbs.radid, :dbs.obstime, :dbs.num_gages:dbs.ind_num_gages, :dbs.rad_avail:dbs.ind_rad_avail, :dbs.rw_bias_val_used:dbs.ind_rw_bias_val_used,
     :dbs.mem_span_used:dbs.ind_mem_span_used, :dbs.edit_bias:dbs.ind_edit_bias, :dbs.ignore_radar:dbs.ind_ignore_radar;

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "UpdateRWRadarResult() in Execute section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return(SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

int DeleteRWRadarResult(const char *where)
{
    char deleteStatement[] = "DELETE FROM RWRadarResult ";
    EXEC SQL BEGIN DECLARE SECTION;

    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    strcpy(queryBuffer, deleteStatement);
    if ( (where != NULL) && (*where != '\0'))
    {
        strcat(queryBuffer, where);
    }
    EXEC SQL EXECUTE IMMEDIATE :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "DeleteRWRadarResult() in Execute Immediate section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return(SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

int UpdateRWRadarResultByRecord (const RWRadarResult * newStructPtr, const RWRadarResult * oldStructPtr)
{
    char whereClause[BUFSIZ];
    GetRWRadarResultPrimaryKeyWhereString(oldStructPtr, whereClause);
    return (UpdateRWRadarResult(newStructPtr, whereClause));
}

/* ------------------------------------------------------------------------- */

int InsertOrUpdateRWRadarResult(const RWRadarResult * structPtr)
{
    UpdateRWRadarResultByRecord(structPtr, structPtr);
    setDbStatusSqlCommand(&dbStatus, UPDATE);

    if ( (SQLCODE < 0) || (SQLCODE == 100) )
    {
        InsertRWRadarResult(structPtr);
        setDbStatusSqlCommand(&dbStatus, INSERT);
    }

    initDbStatus(&dbStatus);
    return(SQLCODE);
}

/* ------------------------------------------------------------------------- */

int InsertIfUniqueRWRadarResult(const RWRadarResult * structPtr, bool *isUnique)
{
    int resultCode = 0;
    if (RWRadarResultExists(structPtr))
    {
        setDbStatusSqlCommand(&dbStatus, SELECT);
        *isUnique = false;
        resultCode = dbStatus.sql_code;
    }
    else
    {
        resultCode = dbStatus.sql_code;
        if (resultCode == 0)
        {
            InsertRWRadarResult(structPtr);
            setDbStatusSqlCommand(&dbStatus, INSERT);
            *isUnique = true;
            resultCode = dbStatus.sql_code;
        }
        else
        {
            *isUnique = false;
        }
    }
    initDbStatus(&dbStatus);

    return(resultCode);
}

/* ------------------------------------------------------------------------- */

int DeleteRWRadarResultByRecord(const RWRadarResult * structPtr)
{
    char whereClause[BUFSIZ];
    GetRWRadarResultPrimaryKeyWhereString(structPtr, whereClause);
    return (DeleteRWRadarResult(whereClause));
}

/* ------------------------------------------------------------------------- */

bool RWRadarResultExists(const RWRadarResult * structPtr)
{
    int result = false;
    int rowCount = 0;
    char whereString[QUERY_LEN];

    GetRWRadarResultPrimaryKeyWhereString(structPtr, whereString);
    rowCount = SelectRWRadarResultCount(whereString);

    if (rowCount > 0)
    {
        result = true;
    }
    else
    {
        result = false;
    }

    return(result);
}

/* ------------------------------------------------------------------------- */

void GetRWRadarResultPrimaryKeyWhereString (const RWRadarResult * structPtr, char returnWhereString[] )
{
    char time_buffer0[40];
    sprintf(returnWhereString, "WHERE radid = '%s'  AND obstime = '%s' ",
            structPtr->radid, dtimet_to_ansi(structPtr->obstime, time_buffer0));
}

/* ------------------------------------------------------------------------- */

void FreeRWRadarResult( RWRadarResult * structPtr)
{
    RWRadarResult* nextPtr = NULL;

    while (structPtr != NULL)
    {
        nextPtr = ( RWRadarResult * ) ListNext ( &structPtr->node );
        free (structPtr);
        structPtr = nextPtr;
    }
    return;
}

/* ------------------------------------------------------------------------- */

DbStatus * GetRWRadarResultDbStatus()
{
    return &dbStatus;
}

/* ------------------------------------------------------------------------- */

void SetRWRadarResultErrorLogging(int value)
{
    errorLoggingOn = value;
    return;
}


/* ------------------------------------------------------------------------- */

