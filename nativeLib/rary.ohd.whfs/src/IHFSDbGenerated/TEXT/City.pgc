/*
    File: City.pgc
    Author  : CDBGEN
    Created : Wed Aug 06 12:34:17 EDT 2008 using database hd_ob83empty
    Description: This .pgc file has an associated header file. 
            and defines all functions and the table's INTERNAL record structure.
*/

#include "City.h"

EXEC SQL include sqlda;
EXEC SQL include sqltypes;
EXEC SQL include sql3types;
EXEC SQL include pgtypes_timestamp;
EXEC SQL include pgtypes_date;
EXEC SQL include pgtypes_interval;
EXEC SQL include pgtypes_numeric;

EXEC SQL BEGIN DECLARE SECTION;
struct City_t
{
    char		name[21];
    char		state[3];
    double		lat;
    double		lon;
    long		disp_precedence;
    long		population;

    int		ind_state;
    int		ind_lat;
    int		ind_lon;
    int		ind_disp_precedence;
    int		ind_population;
} City_rec;
EXEC SQL END DECLARE SECTION;

#define QUERY_LEN 9999
static int errorLoggingOn = 1;

static DbStatus dbStatus;


/* ------------------------------------------------------------------------- */

City * GetCity(const char * where)
{

    City * listPtr = NULL;
    City * structPtr = NULL;
    char selectStatement[] = "SELECT * FROM City ";

    int rowCount = 0;
    int first = 1;

    EXEC SQL BEGIN DECLARE SECTION;

    struct City_t   dbs;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, SELECT);

    strcpy(queryBuffer, selectStatement);

    if ( ( where != NULL ) && ( * where != '\0' ) ) 
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE tid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetCity() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL DECLARE tcur1 CURSOR WITH HOLD FOR tid;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetCity() in Declare cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL OPEN tcur1;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetCity() in Open cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    listPtr = NULL;
    memset(&dbs, '\0', sizeof(dbs));

    EXEC SQL FETCH tcur1 INTO 
    :dbs.name, :dbs.state:dbs.ind_state, 
    :dbs.lat:dbs.ind_lat, :dbs.lon:dbs.ind_lon, 
    :dbs.disp_precedence:dbs.ind_disp_precedence, :dbs.population:dbs.ind_population    ;

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetCity() in Initial FETCH section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    while (SQLCODE == 0) 
    {
        rowCount++;
        if ((structPtr = (City *) malloc(sizeof(City))) != NULL)
        {

            strcpy(structPtr->name, dbs.name);

            strcpy(structPtr->state, dbs.state);
            setNullIfIndicated(dbs.ind_state, CHAR, structPtr->state);

            structPtr->lat = dbs.lat;
            setNullIfIndicated(dbs.ind_lat, DOUBLE, &structPtr->lat);

            structPtr->lon = dbs.lon;
            setNullIfIndicated(dbs.ind_lon, DOUBLE, &structPtr->lon);

            structPtr->disp_precedence = dbs.disp_precedence;
            setNullIfIndicated(dbs.ind_disp_precedence, INT, &structPtr->disp_precedence);

            structPtr->population = dbs.population;
            setNullIfIndicated(dbs.ind_population, INT, &structPtr->population);


        }
        else
        {
            break;
        }

        if (first)
        {
            listPtr = structPtr;
            ListInit(&listPtr->list);
            first = 0;
        }

        ListAdd(&listPtr->list, &structPtr->node);
        memset(&dbs, '\0', sizeof(dbs));

        EXEC SQL FETCH tcur1 INTO 
        :dbs.name, :dbs.state:dbs.ind_state, 
        :dbs.lat:dbs.ind_lat, :dbs.lon:dbs.ind_lon, 
        :dbs.disp_precedence:dbs.ind_disp_precedence, :dbs.population:dbs.ind_population        ;

        if (SQLCODE < 0)
        {
            if (errorLoggingOn)
            {
                fprintf(stderr, "GetCity() in Nth fetch section --- ERROR\n");
                fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
                fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
                fflush(stderr);
            }
            initDbStatus(&dbStatus);
            return (NULL);
        }
    }

    initDbStatus(&dbStatus);
    setDbStatusRowsAffected(&dbStatus, rowCount);

    EXEC SQL CLOSE tcur1;
    return(listPtr);
}

/* ------------------------------------------------------------------------- */

City * SelectCity(const char * where)
{

    City * listPtr = NULL;
    City * structPtr = NULL;
    char selectStatement[] = "SELECT * FROM City ";

    int rowCount = 0;
    int first = 1;

    EXEC SQL BEGIN DECLARE SECTION;

    struct City_t   dbs;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, SELECT);

    strcpy(queryBuffer, selectStatement);

    if ( ( where != NULL ) && ( * where != '\0' ) ) 
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE tid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCity() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL DECLARE tcur2 CURSOR WITH HOLD FOR tid;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCity() in Declare cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL OPEN tcur2;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCity() in Open cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    listPtr = NULL;
    memset(&dbs, '\0', sizeof(dbs));

    EXEC SQL FETCH tcur2 INTO 
    :dbs.name, :dbs.state:dbs.ind_state, 
    :dbs.lat:dbs.ind_lat, :dbs.lon:dbs.ind_lon, 
    :dbs.disp_precedence:dbs.ind_disp_precedence, :dbs.population:dbs.ind_population    ;

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCity() in Initial FETCH section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    while (SQLCODE == 0) 
    {
        rowCount++;
        if ((structPtr = (City *) malloc(sizeof(City))) != NULL)
        {

            strcpy(structPtr->name, dbs.name);

            strcpy(structPtr->state, dbs.state);
            setNullIfIndicated(dbs.ind_state, CHAR, structPtr->state);

            structPtr->lat = dbs.lat;
            setNullIfIndicated(dbs.ind_lat, DOUBLE, &structPtr->lat);

            structPtr->lon = dbs.lon;
            setNullIfIndicated(dbs.ind_lon, DOUBLE, &structPtr->lon);

            structPtr->disp_precedence = dbs.disp_precedence;
            setNullIfIndicated(dbs.ind_disp_precedence, INT, &structPtr->disp_precedence);

            structPtr->population = dbs.population;
            setNullIfIndicated(dbs.ind_population, INT, &structPtr->population);


        }
        else
        {
            break;
        }

        if (first)
        {
            listPtr = structPtr;
            ListInit(&listPtr->list);
            first = 0;
        }

        ListAdd(&listPtr->list, &structPtr->node);
        memset(&dbs, '\0', sizeof(dbs));

        EXEC SQL FETCH tcur2 INTO 
        :dbs.name, :dbs.state:dbs.ind_state, 
        :dbs.lat:dbs.ind_lat, :dbs.lon:dbs.ind_lon, 
        :dbs.disp_precedence:dbs.ind_disp_precedence, :dbs.population:dbs.ind_population        ;

        if (SQLCODE < 0)
        {
            if (errorLoggingOn)
            {
                fprintf(stderr, "SelectCity() in Nth fetch section --- ERROR\n");
                fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
                fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
                fflush(stderr);
            }
            initDbStatus(&dbStatus);
            return (NULL);
        }
    }

    initDbStatus(&dbStatus);
    setDbStatusRowsAffected(&dbStatus, rowCount);

    EXEC SQL CLOSE tcur2;
    return(listPtr);
}

/* ------------------------------------------------------------------------- */

int SelectCityCount(const char * where)
{

    char selectStatement[] = "SELECT COUNT(*) FROM City ";

    EXEC SQL BEGIN DECLARE SECTION;

    int rowCount = 0;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, SELECT);

    strcpy(queryBuffer, selectStatement);

    if ( ( where != NULL ) && ( * where != '\0' ) ) 
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE tid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountCity() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }

    EXEC SQL DECLARE tcur3 CURSOR WITH HOLD FOR tid;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountCity() in Declare cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }

    EXEC SQL OPEN tcur3;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountCity() in Open cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }


    EXEC SQL FETCH tcur3 INTO :rowCount;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountCity() in Initial FETCH section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }

    initDbStatus(&dbStatus);
    setDbStatusRowsAffected(&dbStatus, rowCount);

    EXEC SQL CLOSE tcur3;
    return(rowCount);
}

/* ------------------------------------------------------------------------- */

int PutCity(const City * structPtr)
{
    EXEC SQL BEGIN DECLARE SECTION;

    struct City_t  dbs;

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, INSERT);

    if (structPtr == NULL)
    {
        return(ERR_BAD_ARGS);
    }

    memset(&dbs, '\0', sizeof(dbs));

    strcpy(dbs.name, structPtr->name);

    strcpy(dbs.state, structPtr->state);
    dbs.ind_state = getIndicator(CHAR, (void *)structPtr->state);

    dbs.lat = structPtr->lat;
    dbs.ind_lat = getIndicator(DOUBLE, (void *)&structPtr->lat);

    dbs.lon = structPtr->lon;
    dbs.ind_lon = getIndicator(DOUBLE, (void *)&structPtr->lon);

    dbs.disp_precedence = structPtr->disp_precedence;
    dbs.ind_disp_precedence = getIndicator(INT, (void *)&structPtr->disp_precedence);

    dbs.population = structPtr->population;
    dbs.ind_population = getIndicator(INT, (void *)&structPtr->population);


    EXEC SQL INSERT INTO City (name,state,
        lat,lon,disp_precedence,
        population        )
        VALUES (
         :dbs.name, :dbs.state:dbs.ind_state, :dbs.lat:dbs.ind_lat,
         :dbs.lon:dbs.ind_lon, :dbs.disp_precedence:dbs.ind_disp_precedence, :dbs.population:dbs.ind_population);

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "PutCity() in Insert section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

int InsertCity(const City * structPtr)
{
    EXEC SQL BEGIN DECLARE SECTION;

    struct City_t  dbs;

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, INSERT);

    if (structPtr == NULL)
    {
        return(ERR_BAD_ARGS);
    }

    memset(&dbs, '\0', sizeof(dbs));

    strcpy(dbs.name, structPtr->name);

    strcpy(dbs.state, structPtr->state);
    dbs.ind_state = getIndicator(CHAR, (void *)structPtr->state);

    dbs.lat = structPtr->lat;
    dbs.ind_lat = getIndicator(DOUBLE, (void *)&structPtr->lat);

    dbs.lon = structPtr->lon;
    dbs.ind_lon = getIndicator(DOUBLE, (void *)&structPtr->lon);

    dbs.disp_precedence = structPtr->disp_precedence;
    dbs.ind_disp_precedence = getIndicator(INT, (void *)&structPtr->disp_precedence);

    dbs.population = structPtr->population;
    dbs.ind_population = getIndicator(INT, (void *)&structPtr->population);


    EXEC SQL INSERT INTO City (name,state,
        lat,lon,disp_precedence,
        population        )
        VALUES (
         :dbs.name, :dbs.state:dbs.ind_state, :dbs.lat:dbs.ind_lat,
         :dbs.lon:dbs.ind_lon, :dbs.disp_precedence:dbs.ind_disp_precedence, :dbs.population:dbs.ind_population);

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "InsertCity() in Insert section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

int UpdateCity(const City *structPtr, const char *where)
{
    EXEC SQL BEGIN DECLARE SECTION;

    struct City_t   dbs;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, UPDATE);

    strcpy(dbs.name, structPtr->name);

    strcpy(dbs.state, structPtr->state);
    dbs.ind_state = getIndicator(CHAR, (void *)structPtr->state);

    dbs.lat = structPtr->lat;
    dbs.ind_lat = getIndicator(DOUBLE, (void *)&structPtr->lat);

    dbs.lon = structPtr->lon;
    dbs.ind_lon = getIndicator(DOUBLE, (void *)&structPtr->lon);

    dbs.disp_precedence = structPtr->disp_precedence;
    dbs.ind_disp_precedence = getIndicator(INT, (void *)&structPtr->disp_precedence);

    dbs.population = structPtr->population;
    dbs.ind_population = getIndicator(INT, (void *)&structPtr->population);


    sprintf(queryBuffer, " UPDATE City SET " );
    strcat(queryBuffer, "name = ? , state = ? , lat = ? , lon = ? , disp_precedence = ? ,     ");
    strcat(queryBuffer, "population = ? ");

    if ( (where != NULL) && (*where != '\0'))
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE uid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "UpdateCity() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return(SQLCODE);
    }

    EXEC SQL EXECUTE uid USING  :dbs.name, :dbs.state:dbs.ind_state, :dbs.lat:dbs.ind_lat, :dbs.lon:dbs.ind_lon, :dbs.disp_precedence:dbs.ind_disp_precedence,
     :dbs.population:dbs.ind_population;

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "UpdateCity() in Execute section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return(SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

int DeleteCity(const char *where)
{
    char deleteStatement[] = "DELETE FROM City ";
    EXEC SQL BEGIN DECLARE SECTION;

    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    strcpy(queryBuffer, deleteStatement);
    if ( (where != NULL) && (*where != '\0'))
    {
        strcat(queryBuffer, where);
    }
    EXEC SQL EXECUTE IMMEDIATE :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "DeleteCity() in Execute Immediate section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return(SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

void FreeCity( City * structPtr)
{
    City* nextPtr = NULL;

    while (structPtr != NULL)
    {
        nextPtr = ( City * ) ListNext ( &structPtr->node );
        free (structPtr);
        structPtr = nextPtr;
    }
    return;
}

/* ------------------------------------------------------------------------- */

DbStatus * GetCityDbStatus()
{
    return &dbStatus;
}

/* ------------------------------------------------------------------------- */

void SetCityErrorLogging(int value)
{
    errorLoggingOn = value;
    return;
}


/* ------------------------------------------------------------------------- */

