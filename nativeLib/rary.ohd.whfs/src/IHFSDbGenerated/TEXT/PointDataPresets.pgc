/*
    File: PointDataPresets.pgc
    Author  : CDBGEN
    Created : Wed Aug 06 12:34:26 EDT 2008 using database hd_ob83empty
    Description: This .pgc file has an associated header file. 
            and defines all functions and the table's INTERNAL record structure.
*/

#include "PointDataPresets.h"

EXEC SQL include sqlda;
EXEC SQL include sqltypes;
EXEC SQL include sql3types;
EXEC SQL include pgtypes_timestamp;
EXEC SQL include pgtypes_date;
EXEC SQL include pgtypes_interval;
EXEC SQL include pgtypes_numeric;

EXEC SQL BEGIN DECLARE SECTION;
struct PointDataPresets_t
{
    char		preset_id[9];
    char		descr[31];
    short		preset_rank;
    char		preset_string[513];

    int		ind_descr;
    int		ind_preset_rank;
    int		ind_preset_string;
} PointDataPresets_rec;
EXEC SQL END DECLARE SECTION;

#define QUERY_LEN 9999
static int errorLoggingOn = 1;

static DbStatus dbStatus;


/* ------------------------------------------------------------------------- */

PointDataPresets * GetPointDataPresets(const char * where)
{

    PointDataPresets * listPtr = NULL;
    PointDataPresets * structPtr = NULL;
    char selectStatement[] = "SELECT * FROM PointDataPresets ";

    int rowCount = 0;
    int first = 1;

    EXEC SQL BEGIN DECLARE SECTION;

    struct PointDataPresets_t   dbs;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, SELECT);

    strcpy(queryBuffer, selectStatement);

    if ( ( where != NULL ) && ( * where != '\0' ) ) 
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE tid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetPointDataPresets() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL DECLARE tcur1 CURSOR WITH HOLD FOR tid;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetPointDataPresets() in Declare cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL OPEN tcur1;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetPointDataPresets() in Open cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    listPtr = NULL;
    memset(&dbs, '\0', sizeof(dbs));

    EXEC SQL FETCH tcur1 INTO 
    :dbs.preset_id, :dbs.descr:dbs.ind_descr, 
    :dbs.preset_rank:dbs.ind_preset_rank, :dbs.preset_string:dbs.ind_preset_string    ;

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetPointDataPresets() in Initial FETCH section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    while (SQLCODE == 0) 
    {
        rowCount++;
        if ((structPtr = (PointDataPresets *) malloc(sizeof(PointDataPresets))) != NULL)
        {

            strcpy(structPtr->preset_id, dbs.preset_id);

            strcpy(structPtr->descr, dbs.descr);
            setNullIfIndicated(dbs.ind_descr, CHAR, structPtr->descr);

            structPtr->preset_rank = dbs.preset_rank;
            setNullIfIndicated(dbs.ind_preset_rank, SHORT, &structPtr->preset_rank);

            strcpy(structPtr->preset_string, dbs.preset_string);
            setNullIfIndicated(dbs.ind_preset_string, CHAR, structPtr->preset_string);


        }
        else
        {
            break;
        }

        if (first)
        {
            listPtr = structPtr;
            ListInit(&listPtr->list);
            first = 0;
        }

        ListAdd(&listPtr->list, &structPtr->node);
        memset(&dbs, '\0', sizeof(dbs));

        EXEC SQL FETCH tcur1 INTO 
        :dbs.preset_id, :dbs.descr:dbs.ind_descr, 
        :dbs.preset_rank:dbs.ind_preset_rank, :dbs.preset_string:dbs.ind_preset_string        ;

        if (SQLCODE < 0)
        {
            if (errorLoggingOn)
            {
                fprintf(stderr, "GetPointDataPresets() in Nth fetch section --- ERROR\n");
                fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
                fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
                fflush(stderr);
            }
            initDbStatus(&dbStatus);
            return (NULL);
        }
    }

    initDbStatus(&dbStatus);
    setDbStatusRowsAffected(&dbStatus, rowCount);

    EXEC SQL CLOSE tcur1;
    return(listPtr);
}

/* ------------------------------------------------------------------------- */

PointDataPresets * SelectPointDataPresets(const char * where)
{

    PointDataPresets * listPtr = NULL;
    PointDataPresets * structPtr = NULL;
    char selectStatement[] = "SELECT * FROM PointDataPresets ";

    int rowCount = 0;
    int first = 1;

    EXEC SQL BEGIN DECLARE SECTION;

    struct PointDataPresets_t   dbs;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, SELECT);

    strcpy(queryBuffer, selectStatement);

    if ( ( where != NULL ) && ( * where != '\0' ) ) 
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE tid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectPointDataPresets() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL DECLARE tcur2 CURSOR WITH HOLD FOR tid;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectPointDataPresets() in Declare cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL OPEN tcur2;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectPointDataPresets() in Open cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    listPtr = NULL;
    memset(&dbs, '\0', sizeof(dbs));

    EXEC SQL FETCH tcur2 INTO 
    :dbs.preset_id, :dbs.descr:dbs.ind_descr, 
    :dbs.preset_rank:dbs.ind_preset_rank, :dbs.preset_string:dbs.ind_preset_string    ;

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectPointDataPresets() in Initial FETCH section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    while (SQLCODE == 0) 
    {
        rowCount++;
        if ((structPtr = (PointDataPresets *) malloc(sizeof(PointDataPresets))) != NULL)
        {

            strcpy(structPtr->preset_id, dbs.preset_id);

            strcpy(structPtr->descr, dbs.descr);
            setNullIfIndicated(dbs.ind_descr, CHAR, structPtr->descr);

            structPtr->preset_rank = dbs.preset_rank;
            setNullIfIndicated(dbs.ind_preset_rank, SHORT, &structPtr->preset_rank);

            strcpy(structPtr->preset_string, dbs.preset_string);
            setNullIfIndicated(dbs.ind_preset_string, CHAR, structPtr->preset_string);


        }
        else
        {
            break;
        }

        if (first)
        {
            listPtr = structPtr;
            ListInit(&listPtr->list);
            first = 0;
        }

        ListAdd(&listPtr->list, &structPtr->node);
        memset(&dbs, '\0', sizeof(dbs));

        EXEC SQL FETCH tcur2 INTO 
        :dbs.preset_id, :dbs.descr:dbs.ind_descr, 
        :dbs.preset_rank:dbs.ind_preset_rank, :dbs.preset_string:dbs.ind_preset_string        ;

        if (SQLCODE < 0)
        {
            if (errorLoggingOn)
            {
                fprintf(stderr, "SelectPointDataPresets() in Nth fetch section --- ERROR\n");
                fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
                fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
                fflush(stderr);
            }
            initDbStatus(&dbStatus);
            return (NULL);
        }
    }

    initDbStatus(&dbStatus);
    setDbStatusRowsAffected(&dbStatus, rowCount);

    EXEC SQL CLOSE tcur2;
    return(listPtr);
}

/* ------------------------------------------------------------------------- */

int SelectPointDataPresetsCount(const char * where)
{

    char selectStatement[] = "SELECT COUNT(*) FROM PointDataPresets ";

    EXEC SQL BEGIN DECLARE SECTION;

    int rowCount = 0;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, SELECT);

    strcpy(queryBuffer, selectStatement);

    if ( ( where != NULL ) && ( * where != '\0' ) ) 
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE tid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountPointDataPresets() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }

    EXEC SQL DECLARE tcur3 CURSOR WITH HOLD FOR tid;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountPointDataPresets() in Declare cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }

    EXEC SQL OPEN tcur3;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountPointDataPresets() in Open cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }


    EXEC SQL FETCH tcur3 INTO :rowCount;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountPointDataPresets() in Initial FETCH section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }

    initDbStatus(&dbStatus);
    setDbStatusRowsAffected(&dbStatus, rowCount);

    EXEC SQL CLOSE tcur3;
    return(rowCount);
}

/* ------------------------------------------------------------------------- */

int PutPointDataPresets(const PointDataPresets * structPtr)
{
    EXEC SQL BEGIN DECLARE SECTION;

    struct PointDataPresets_t  dbs;

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, INSERT);

    if (structPtr == NULL)
    {
        return(ERR_BAD_ARGS);
    }

    memset(&dbs, '\0', sizeof(dbs));

    strcpy(dbs.preset_id, structPtr->preset_id);

    strcpy(dbs.descr, structPtr->descr);
    dbs.ind_descr = getIndicator(CHAR, (void *)structPtr->descr);

    dbs.preset_rank = structPtr->preset_rank;
    dbs.ind_preset_rank = getIndicator(SHORT, (void *)&structPtr->preset_rank);

    strcpy(dbs.preset_string, structPtr->preset_string);
    dbs.ind_preset_string = getIndicator(CHAR, (void *)structPtr->preset_string);


    EXEC SQL INSERT INTO PointDataPresets (preset_id,descr,
        preset_rank,preset_string        )
        VALUES (
         :dbs.preset_id, :dbs.descr:dbs.ind_descr, :dbs.preset_rank:dbs.ind_preset_rank,
         :dbs.preset_string:dbs.ind_preset_string);

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "PutPointDataPresets() in Insert section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

int InsertPointDataPresets(const PointDataPresets * structPtr)
{
    EXEC SQL BEGIN DECLARE SECTION;

    struct PointDataPresets_t  dbs;

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, INSERT);

    if (structPtr == NULL)
    {
        return(ERR_BAD_ARGS);
    }

    memset(&dbs, '\0', sizeof(dbs));

    strcpy(dbs.preset_id, structPtr->preset_id);

    strcpy(dbs.descr, structPtr->descr);
    dbs.ind_descr = getIndicator(CHAR, (void *)structPtr->descr);

    dbs.preset_rank = structPtr->preset_rank;
    dbs.ind_preset_rank = getIndicator(SHORT, (void *)&structPtr->preset_rank);

    strcpy(dbs.preset_string, structPtr->preset_string);
    dbs.ind_preset_string = getIndicator(CHAR, (void *)structPtr->preset_string);


    EXEC SQL INSERT INTO PointDataPresets (preset_id,descr,
        preset_rank,preset_string        )
        VALUES (
         :dbs.preset_id, :dbs.descr:dbs.ind_descr, :dbs.preset_rank:dbs.ind_preset_rank,
         :dbs.preset_string:dbs.ind_preset_string);

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "InsertPointDataPresets() in Insert section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

int UpdatePointDataPresets(const PointDataPresets *structPtr, const char *where)
{
    EXEC SQL BEGIN DECLARE SECTION;

    struct PointDataPresets_t   dbs;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, UPDATE);

    strcpy(dbs.preset_id, structPtr->preset_id);

    strcpy(dbs.descr, structPtr->descr);
    dbs.ind_descr = getIndicator(CHAR, (void *)structPtr->descr);

    dbs.preset_rank = structPtr->preset_rank;
    dbs.ind_preset_rank = getIndicator(SHORT, (void *)&structPtr->preset_rank);

    strcpy(dbs.preset_string, structPtr->preset_string);
    dbs.ind_preset_string = getIndicator(CHAR, (void *)structPtr->preset_string);


    sprintf(queryBuffer, " UPDATE PointDataPresets SET " );
    strcat(queryBuffer, "preset_id = ? , descr = ? , preset_rank = ? , preset_string = ? ");

    if ( (where != NULL) && (*where != '\0'))
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE uid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "UpdatePointDataPresets() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return(SQLCODE);
    }

    EXEC SQL EXECUTE uid USING  :dbs.preset_id, :dbs.descr:dbs.ind_descr, :dbs.preset_rank:dbs.ind_preset_rank, :dbs.preset_string:dbs.ind_preset_string;

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "UpdatePointDataPresets() in Execute section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return(SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

int DeletePointDataPresets(const char *where)
{
    char deleteStatement[] = "DELETE FROM PointDataPresets ";
    EXEC SQL BEGIN DECLARE SECTION;

    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    strcpy(queryBuffer, deleteStatement);
    if ( (where != NULL) && (*where != '\0'))
    {
        strcat(queryBuffer, where);
    }
    EXEC SQL EXECUTE IMMEDIATE :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "DeletePointDataPresets() in Execute Immediate section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return(SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

int UpdatePointDataPresetsByRecord (const PointDataPresets * newStructPtr, const PointDataPresets * oldStructPtr)
{
    char whereClause[BUFSIZ];
    GetPointDataPresetsPrimaryKeyWhereString(oldStructPtr, whereClause);
    return (UpdatePointDataPresets(newStructPtr, whereClause));
}

/* ------------------------------------------------------------------------- */

int InsertOrUpdatePointDataPresets(const PointDataPresets * structPtr)
{
    UpdatePointDataPresetsByRecord(structPtr, structPtr);
    setDbStatusSqlCommand(&dbStatus, UPDATE);

    if ( (SQLCODE < 0) || (SQLCODE == 100) )
    {
        InsertPointDataPresets(structPtr);
        setDbStatusSqlCommand(&dbStatus, INSERT);
    }

    initDbStatus(&dbStatus);
    return(SQLCODE);
}

/* ------------------------------------------------------------------------- */

int InsertIfUniquePointDataPresets(const PointDataPresets * structPtr, bool *isUnique)
{
    int resultCode = 0;
    if (PointDataPresetsExists(structPtr))
    {
        setDbStatusSqlCommand(&dbStatus, SELECT);
        *isUnique = false;
        resultCode = dbStatus.sql_code;
    }
    else
    {
        resultCode = dbStatus.sql_code;
        if (resultCode == 0)
        {
            InsertPointDataPresets(structPtr);
            setDbStatusSqlCommand(&dbStatus, INSERT);
            *isUnique = true;
            resultCode = dbStatus.sql_code;
        }
        else
        {
            *isUnique = false;
        }
    }
    initDbStatus(&dbStatus);

    return(resultCode);
}

/* ------------------------------------------------------------------------- */

int DeletePointDataPresetsByRecord(const PointDataPresets * structPtr)
{
    char whereClause[BUFSIZ];
    GetPointDataPresetsPrimaryKeyWhereString(structPtr, whereClause);
    return (DeletePointDataPresets(whereClause));
}

/* ------------------------------------------------------------------------- */

bool PointDataPresetsExists(const PointDataPresets * structPtr)
{
    int result = false;
    int rowCount = 0;
    char whereString[QUERY_LEN];

    GetPointDataPresetsPrimaryKeyWhereString(structPtr, whereString);
    rowCount = SelectPointDataPresetsCount(whereString);

    if (rowCount > 0)
    {
        result = true;
    }
    else
    {
        result = false;
    }

    return(result);
}

/* ------------------------------------------------------------------------- */

void GetPointDataPresetsPrimaryKeyWhereString (const PointDataPresets * structPtr, char returnWhereString[] )
{
    sprintf(returnWhereString, "WHERE preset_id = '%s' ",
            structPtr->preset_id);
}

/* ------------------------------------------------------------------------- */

void FreePointDataPresets( PointDataPresets * structPtr)
{
    PointDataPresets* nextPtr = NULL;

    while (structPtr != NULL)
    {
        nextPtr = ( PointDataPresets * ) ListNext ( &structPtr->node );
        free (structPtr);
        structPtr = nextPtr;
    }
    return;
}

/* ------------------------------------------------------------------------- */

DbStatus * GetPointDataPresetsDbStatus()
{
    return &dbStatus;
}

/* ------------------------------------------------------------------------- */

void SetPointDataPresetsErrorLogging(int value)
{
    errorLoggingOn = value;
    return;
}


/* ------------------------------------------------------------------------- */

