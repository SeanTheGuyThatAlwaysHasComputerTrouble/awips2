/*
    File: RiverMonGroup.pgc
    Author  : CDBGEN
    Created : Wed Aug 06 12:34:28 EDT 2008 using database hd_ob83empty
    Description: This .pgc file has an associated header file. 
            and defines all functions and the table's INTERNAL record structure.
*/

#include "RiverMonGroup.h"

EXEC SQL include sqlda;
EXEC SQL include sqltypes;
EXEC SQL include sql3types;
EXEC SQL include pgtypes_timestamp;
EXEC SQL include pgtypes_date;
EXEC SQL include pgtypes_interval;
EXEC SQL include pgtypes_numeric;

EXEC SQL BEGIN DECLARE SECTION;
struct RiverMonGroup_t
{
    char		group_id[9];
    char		group_name[33];
    long		ordinal;
    char		hsa[4];

    int		ind_group_name;
    int		ind_ordinal;
    int		ind_hsa;
} RiverMonGroup_rec;
EXEC SQL END DECLARE SECTION;

#define QUERY_LEN 9999
static int errorLoggingOn = 1;

static DbStatus dbStatus;


/* ------------------------------------------------------------------------- */

RiverMonGroup * GetRiverMonGroup(const char * where)
{

    RiverMonGroup * listPtr = NULL;
    RiverMonGroup * structPtr = NULL;
    char selectStatement[] = "SELECT * FROM RiverMonGroup ";

    int rowCount = 0;
    int first = 1;

    EXEC SQL BEGIN DECLARE SECTION;

    struct RiverMonGroup_t   dbs;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, SELECT);

    strcpy(queryBuffer, selectStatement);

    if ( ( where != NULL ) && ( * where != '\0' ) ) 
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE tid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetRiverMonGroup() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL DECLARE tcur1 CURSOR WITH HOLD FOR tid;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetRiverMonGroup() in Declare cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL OPEN tcur1;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetRiverMonGroup() in Open cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    listPtr = NULL;
    memset(&dbs, '\0', sizeof(dbs));

    EXEC SQL FETCH tcur1 INTO 
    :dbs.group_id, :dbs.group_name:dbs.ind_group_name, 
    :dbs.ordinal:dbs.ind_ordinal, :dbs.hsa:dbs.ind_hsa    ;

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetRiverMonGroup() in Initial FETCH section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    while (SQLCODE == 0) 
    {
        rowCount++;
        if ((structPtr = (RiverMonGroup *) malloc(sizeof(RiverMonGroup))) != NULL)
        {

            strcpy(structPtr->group_id, dbs.group_id);

            strcpy(structPtr->group_name, dbs.group_name);
            setNullIfIndicated(dbs.ind_group_name, CHAR, structPtr->group_name);

            structPtr->ordinal = dbs.ordinal;
            setNullIfIndicated(dbs.ind_ordinal, INT, &structPtr->ordinal);

            strcpy(structPtr->hsa, dbs.hsa);
            setNullIfIndicated(dbs.ind_hsa, CHAR, structPtr->hsa);


        }
        else
        {
            break;
        }

        if (first)
        {
            listPtr = structPtr;
            ListInit(&listPtr->list);
            first = 0;
        }

        ListAdd(&listPtr->list, &structPtr->node);
        memset(&dbs, '\0', sizeof(dbs));

        EXEC SQL FETCH tcur1 INTO 
        :dbs.group_id, :dbs.group_name:dbs.ind_group_name, 
        :dbs.ordinal:dbs.ind_ordinal, :dbs.hsa:dbs.ind_hsa        ;

        if (SQLCODE < 0)
        {
            if (errorLoggingOn)
            {
                fprintf(stderr, "GetRiverMonGroup() in Nth fetch section --- ERROR\n");
                fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
                fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
                fflush(stderr);
            }
            initDbStatus(&dbStatus);
            return (NULL);
        }
    }

    initDbStatus(&dbStatus);
    setDbStatusRowsAffected(&dbStatus, rowCount);

    EXEC SQL CLOSE tcur1;
    return(listPtr);
}

/* ------------------------------------------------------------------------- */

RiverMonGroup * SelectRiverMonGroup(const char * where)
{

    RiverMonGroup * listPtr = NULL;
    RiverMonGroup * structPtr = NULL;
    char selectStatement[] = "SELECT * FROM RiverMonGroup ";

    int rowCount = 0;
    int first = 1;

    EXEC SQL BEGIN DECLARE SECTION;

    struct RiverMonGroup_t   dbs;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, SELECT);

    strcpy(queryBuffer, selectStatement);

    if ( ( where != NULL ) && ( * where != '\0' ) ) 
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE tid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectRiverMonGroup() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL DECLARE tcur2 CURSOR WITH HOLD FOR tid;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectRiverMonGroup() in Declare cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL OPEN tcur2;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectRiverMonGroup() in Open cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    listPtr = NULL;
    memset(&dbs, '\0', sizeof(dbs));

    EXEC SQL FETCH tcur2 INTO 
    :dbs.group_id, :dbs.group_name:dbs.ind_group_name, 
    :dbs.ordinal:dbs.ind_ordinal, :dbs.hsa:dbs.ind_hsa    ;

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectRiverMonGroup() in Initial FETCH section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    while (SQLCODE == 0) 
    {
        rowCount++;
        if ((structPtr = (RiverMonGroup *) malloc(sizeof(RiverMonGroup))) != NULL)
        {

            strcpy(structPtr->group_id, dbs.group_id);

            strcpy(structPtr->group_name, dbs.group_name);
            setNullIfIndicated(dbs.ind_group_name, CHAR, structPtr->group_name);

            structPtr->ordinal = dbs.ordinal;
            setNullIfIndicated(dbs.ind_ordinal, INT, &structPtr->ordinal);

            strcpy(structPtr->hsa, dbs.hsa);
            setNullIfIndicated(dbs.ind_hsa, CHAR, structPtr->hsa);


        }
        else
        {
            break;
        }

        if (first)
        {
            listPtr = structPtr;
            ListInit(&listPtr->list);
            first = 0;
        }

        ListAdd(&listPtr->list, &structPtr->node);
        memset(&dbs, '\0', sizeof(dbs));

        EXEC SQL FETCH tcur2 INTO 
        :dbs.group_id, :dbs.group_name:dbs.ind_group_name, 
        :dbs.ordinal:dbs.ind_ordinal, :dbs.hsa:dbs.ind_hsa        ;

        if (SQLCODE < 0)
        {
            if (errorLoggingOn)
            {
                fprintf(stderr, "SelectRiverMonGroup() in Nth fetch section --- ERROR\n");
                fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
                fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
                fflush(stderr);
            }
            initDbStatus(&dbStatus);
            return (NULL);
        }
    }

    initDbStatus(&dbStatus);
    setDbStatusRowsAffected(&dbStatus, rowCount);

    EXEC SQL CLOSE tcur2;
    return(listPtr);
}

/* ------------------------------------------------------------------------- */

int SelectRiverMonGroupCount(const char * where)
{

    char selectStatement[] = "SELECT COUNT(*) FROM RiverMonGroup ";

    EXEC SQL BEGIN DECLARE SECTION;

    int rowCount = 0;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, SELECT);

    strcpy(queryBuffer, selectStatement);

    if ( ( where != NULL ) && ( * where != '\0' ) ) 
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE tid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountRiverMonGroup() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }

    EXEC SQL DECLARE tcur3 CURSOR WITH HOLD FOR tid;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountRiverMonGroup() in Declare cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }

    EXEC SQL OPEN tcur3;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountRiverMonGroup() in Open cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }


    EXEC SQL FETCH tcur3 INTO :rowCount;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountRiverMonGroup() in Initial FETCH section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }

    initDbStatus(&dbStatus);
    setDbStatusRowsAffected(&dbStatus, rowCount);

    EXEC SQL CLOSE tcur3;
    return(rowCount);
}

/* ------------------------------------------------------------------------- */

int PutRiverMonGroup(const RiverMonGroup * structPtr)
{
    EXEC SQL BEGIN DECLARE SECTION;

    struct RiverMonGroup_t  dbs;

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, INSERT);

    if (structPtr == NULL)
    {
        return(ERR_BAD_ARGS);
    }

    memset(&dbs, '\0', sizeof(dbs));

    strcpy(dbs.group_id, structPtr->group_id);

    strcpy(dbs.group_name, structPtr->group_name);
    dbs.ind_group_name = getIndicator(CHAR, (void *)structPtr->group_name);

    dbs.ordinal = structPtr->ordinal;
    dbs.ind_ordinal = getIndicator(INT, (void *)&structPtr->ordinal);

    strcpy(dbs.hsa, structPtr->hsa);
    dbs.ind_hsa = getIndicator(CHAR, (void *)structPtr->hsa);


    EXEC SQL INSERT INTO RiverMonGroup (group_id,group_name,
        ordinal,hsa        )
        VALUES (
         :dbs.group_id, :dbs.group_name:dbs.ind_group_name, :dbs.ordinal:dbs.ind_ordinal,
         :dbs.hsa:dbs.ind_hsa);

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "PutRiverMonGroup() in Insert section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

int InsertRiverMonGroup(const RiverMonGroup * structPtr)
{
    EXEC SQL BEGIN DECLARE SECTION;

    struct RiverMonGroup_t  dbs;

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, INSERT);

    if (structPtr == NULL)
    {
        return(ERR_BAD_ARGS);
    }

    memset(&dbs, '\0', sizeof(dbs));

    strcpy(dbs.group_id, structPtr->group_id);

    strcpy(dbs.group_name, structPtr->group_name);
    dbs.ind_group_name = getIndicator(CHAR, (void *)structPtr->group_name);

    dbs.ordinal = structPtr->ordinal;
    dbs.ind_ordinal = getIndicator(INT, (void *)&structPtr->ordinal);

    strcpy(dbs.hsa, structPtr->hsa);
    dbs.ind_hsa = getIndicator(CHAR, (void *)structPtr->hsa);


    EXEC SQL INSERT INTO RiverMonGroup (group_id,group_name,
        ordinal,hsa        )
        VALUES (
         :dbs.group_id, :dbs.group_name:dbs.ind_group_name, :dbs.ordinal:dbs.ind_ordinal,
         :dbs.hsa:dbs.ind_hsa);

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "InsertRiverMonGroup() in Insert section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

int UpdateRiverMonGroup(const RiverMonGroup *structPtr, const char *where)
{
    EXEC SQL BEGIN DECLARE SECTION;

    struct RiverMonGroup_t   dbs;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, UPDATE);

    strcpy(dbs.group_id, structPtr->group_id);

    strcpy(dbs.group_name, structPtr->group_name);
    dbs.ind_group_name = getIndicator(CHAR, (void *)structPtr->group_name);

    dbs.ordinal = structPtr->ordinal;
    dbs.ind_ordinal = getIndicator(INT, (void *)&structPtr->ordinal);

    strcpy(dbs.hsa, structPtr->hsa);
    dbs.ind_hsa = getIndicator(CHAR, (void *)structPtr->hsa);


    sprintf(queryBuffer, " UPDATE RiverMonGroup SET " );
    strcat(queryBuffer, "group_id = ? , group_name = ? , ordinal = ? , hsa = ? ");

    if ( (where != NULL) && (*where != '\0'))
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE uid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "UpdateRiverMonGroup() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return(SQLCODE);
    }

    EXEC SQL EXECUTE uid USING  :dbs.group_id, :dbs.group_name:dbs.ind_group_name, :dbs.ordinal:dbs.ind_ordinal, :dbs.hsa:dbs.ind_hsa;

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "UpdateRiverMonGroup() in Execute section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return(SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

int DeleteRiverMonGroup(const char *where)
{
    char deleteStatement[] = "DELETE FROM RiverMonGroup ";
    EXEC SQL BEGIN DECLARE SECTION;

    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    strcpy(queryBuffer, deleteStatement);
    if ( (where != NULL) && (*where != '\0'))
    {
        strcat(queryBuffer, where);
    }
    EXEC SQL EXECUTE IMMEDIATE :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "DeleteRiverMonGroup() in Execute Immediate section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return(SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

int UpdateRiverMonGroupByRecord (const RiverMonGroup * newStructPtr, const RiverMonGroup * oldStructPtr)
{
    char whereClause[BUFSIZ];
    GetRiverMonGroupPrimaryKeyWhereString(oldStructPtr, whereClause);
    return (UpdateRiverMonGroup(newStructPtr, whereClause));
}

/* ------------------------------------------------------------------------- */

int InsertOrUpdateRiverMonGroup(const RiverMonGroup * structPtr)
{
    UpdateRiverMonGroupByRecord(structPtr, structPtr);
    setDbStatusSqlCommand(&dbStatus, UPDATE);

    if ( (SQLCODE < 0) || (SQLCODE == 100) )
    {
        InsertRiverMonGroup(structPtr);
        setDbStatusSqlCommand(&dbStatus, INSERT);
    }

    initDbStatus(&dbStatus);
    return(SQLCODE);
}

/* ------------------------------------------------------------------------- */

int InsertIfUniqueRiverMonGroup(const RiverMonGroup * structPtr, bool *isUnique)
{
    int resultCode = 0;
    if (RiverMonGroupExists(structPtr))
    {
        setDbStatusSqlCommand(&dbStatus, SELECT);
        *isUnique = false;
        resultCode = dbStatus.sql_code;
    }
    else
    {
        resultCode = dbStatus.sql_code;
        if (resultCode == 0)
        {
            InsertRiverMonGroup(structPtr);
            setDbStatusSqlCommand(&dbStatus, INSERT);
            *isUnique = true;
            resultCode = dbStatus.sql_code;
        }
        else
        {
            *isUnique = false;
        }
    }
    initDbStatus(&dbStatus);

    return(resultCode);
}

/* ------------------------------------------------------------------------- */

int DeleteRiverMonGroupByRecord(const RiverMonGroup * structPtr)
{
    char whereClause[BUFSIZ];
    GetRiverMonGroupPrimaryKeyWhereString(structPtr, whereClause);
    return (DeleteRiverMonGroup(whereClause));
}

/* ------------------------------------------------------------------------- */

bool RiverMonGroupExists(const RiverMonGroup * structPtr)
{
    int result = false;
    int rowCount = 0;
    char whereString[QUERY_LEN];

    GetRiverMonGroupPrimaryKeyWhereString(structPtr, whereString);
    rowCount = SelectRiverMonGroupCount(whereString);

    if (rowCount > 0)
    {
        result = true;
    }
    else
    {
        result = false;
    }

    return(result);
}

/* ------------------------------------------------------------------------- */

void GetRiverMonGroupPrimaryKeyWhereString (const RiverMonGroup * structPtr, char returnWhereString[] )
{
    sprintf(returnWhereString, "WHERE group_id = '%s' ",
            structPtr->group_id);
}

/* ------------------------------------------------------------------------- */

void FreeRiverMonGroup( RiverMonGroup * structPtr)
{
    RiverMonGroup* nextPtr = NULL;

    while (structPtr != NULL)
    {
        nextPtr = ( RiverMonGroup * ) ListNext ( &structPtr->node );
        free (structPtr);
        structPtr = nextPtr;
    }
    return;
}

/* ------------------------------------------------------------------------- */

DbStatus * GetRiverMonGroupDbStatus()
{
    return &dbStatus;
}

/* ------------------------------------------------------------------------- */

void SetRiverMonGroupErrorLogging(int value)
{
    errorLoggingOn = value;
    return;
}


/* ------------------------------------------------------------------------- */

