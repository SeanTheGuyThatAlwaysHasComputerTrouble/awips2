/*
    File: Pressure.pgc
    Author  : CDBGEN
    Created : Wed Aug 06 12:34:26 EDT 2008 using database hd_ob83empty
    Description: This .pgc file has an associated header file. 
            and defines all functions and the table's INTERNAL record structure.
*/

#include "Pressure.h"

EXEC SQL include sqlda;
EXEC SQL include sqltypes;
EXEC SQL include sql3types;
EXEC SQL include pgtypes_timestamp;
EXEC SQL include pgtypes_date;
EXEC SQL include pgtypes_interval;
EXEC SQL include pgtypes_numeric;

EXEC SQL BEGIN DECLARE SECTION;
struct Pressure_t
{
    char		lid[9];
    char		pe[3];
    short		dur;
    char		ts[3];
    char		extremum[2];
    dtime_t		obstime;
    double		value;
    char		shef_qual_code[2];
    long		quality_code;
    short		revision;
    char		product_id[11];
    dtime_t		producttime;
    dtime_t		postingtime;

    int		ind_value;
    int		ind_shef_qual_code;
    int		ind_quality_code;
    int		ind_revision;
    int		ind_product_id;
    int		ind_producttime;
    int		ind_postingtime;
} Pressure_rec;
EXEC SQL END DECLARE SECTION;

#define QUERY_LEN 9999
static int errorLoggingOn = 1;

static DbStatus dbStatus;


/* ------------------------------------------------------------------------- */

Pressure * GetPressure(const char * where)
{

    Pressure * listPtr = NULL;
    Pressure * structPtr = NULL;
    char selectStatement[] = "SELECT * FROM Pressure ";

    int rowCount = 0;
    int first = 1;

    EXEC SQL BEGIN DECLARE SECTION;

    struct Pressure_t   dbs;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, SELECT);

    strcpy(queryBuffer, selectStatement);

    if ( ( where != NULL ) && ( * where != '\0' ) ) 
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE tid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetPressure() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL DECLARE tcur1 CURSOR WITH HOLD FOR tid;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetPressure() in Declare cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL OPEN tcur1;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetPressure() in Open cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    listPtr = NULL;
    memset(&dbs, '\0', sizeof(dbs));

    EXEC SQL FETCH tcur1 INTO 
    :dbs.lid, :dbs.pe, 
    :dbs.dur, :dbs.ts, 
    :dbs.extremum, :dbs.obstime, 
    :dbs.value:dbs.ind_value, :dbs.shef_qual_code:dbs.ind_shef_qual_code, 
    :dbs.quality_code:dbs.ind_quality_code, :dbs.revision:dbs.ind_revision, 
    :dbs.product_id:dbs.ind_product_id, :dbs.producttime:dbs.ind_producttime, 
    :dbs.postingtime:dbs.ind_postingtime    ;

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetPressure() in Initial FETCH section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    while (SQLCODE == 0) 
    {
        rowCount++;
        if ((structPtr = (Pressure *) malloc(sizeof(Pressure))) != NULL)
        {

            strcpy(structPtr->lid, dbs.lid);

            strcpy(structPtr->pe, dbs.pe);

            structPtr->dur = dbs.dur;

            strcpy(structPtr->ts, dbs.ts);

            strcpy(structPtr->extremum, dbs.extremum);

            structPtr->obstime = dbs.obstime;

            structPtr->value = dbs.value;
            setNullIfIndicated(dbs.ind_value, DOUBLE, &structPtr->value);

            strcpy(structPtr->shef_qual_code, dbs.shef_qual_code);
            setNullIfIndicated(dbs.ind_shef_qual_code, CHAR, structPtr->shef_qual_code);

            structPtr->quality_code = dbs.quality_code;
            setNullIfIndicated(dbs.ind_quality_code, INT, &structPtr->quality_code);

            structPtr->revision = dbs.revision;
            setNullIfIndicated(dbs.ind_revision, SHORT, &structPtr->revision);

            strcpy(structPtr->product_id, dbs.product_id);
            setNullIfIndicated(dbs.ind_product_id, CHAR, structPtr->product_id);

            structPtr->producttime = dbs.producttime;
            setNullIfIndicated(dbs.ind_producttime, DATETIME, &structPtr->producttime);

            structPtr->postingtime = dbs.postingtime;
            setNullIfIndicated(dbs.ind_postingtime, DATETIME, &structPtr->postingtime);


        }
        else
        {
            break;
        }

        if (first)
        {
            listPtr = structPtr;
            ListInit(&listPtr->list);
            first = 0;
        }

        ListAdd(&listPtr->list, &structPtr->node);
        memset(&dbs, '\0', sizeof(dbs));

        EXEC SQL FETCH tcur1 INTO 
        :dbs.lid, :dbs.pe, 
        :dbs.dur, :dbs.ts, 
        :dbs.extremum, :dbs.obstime, 
        :dbs.value:dbs.ind_value, :dbs.shef_qual_code:dbs.ind_shef_qual_code, 
        :dbs.quality_code:dbs.ind_quality_code, :dbs.revision:dbs.ind_revision, 
        :dbs.product_id:dbs.ind_product_id, :dbs.producttime:dbs.ind_producttime, 
        :dbs.postingtime:dbs.ind_postingtime        ;

        if (SQLCODE < 0)
        {
            if (errorLoggingOn)
            {
                fprintf(stderr, "GetPressure() in Nth fetch section --- ERROR\n");
                fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
                fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
                fflush(stderr);
            }
            initDbStatus(&dbStatus);
            return (NULL);
        }
    }

    initDbStatus(&dbStatus);
    setDbStatusRowsAffected(&dbStatus, rowCount);

    EXEC SQL CLOSE tcur1;
    return(listPtr);
}

/* ------------------------------------------------------------------------- */

Pressure * SelectPressure(const char * where)
{

    Pressure * listPtr = NULL;
    Pressure * structPtr = NULL;
    char selectStatement[] = "SELECT * FROM Pressure ";

    int rowCount = 0;
    int first = 1;

    EXEC SQL BEGIN DECLARE SECTION;

    struct Pressure_t   dbs;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, SELECT);

    strcpy(queryBuffer, selectStatement);

    if ( ( where != NULL ) && ( * where != '\0' ) ) 
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE tid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectPressure() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL DECLARE tcur2 CURSOR WITH HOLD FOR tid;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectPressure() in Declare cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL OPEN tcur2;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectPressure() in Open cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    listPtr = NULL;
    memset(&dbs, '\0', sizeof(dbs));

    EXEC SQL FETCH tcur2 INTO 
    :dbs.lid, :dbs.pe, 
    :dbs.dur, :dbs.ts, 
    :dbs.extremum, :dbs.obstime, 
    :dbs.value:dbs.ind_value, :dbs.shef_qual_code:dbs.ind_shef_qual_code, 
    :dbs.quality_code:dbs.ind_quality_code, :dbs.revision:dbs.ind_revision, 
    :dbs.product_id:dbs.ind_product_id, :dbs.producttime:dbs.ind_producttime, 
    :dbs.postingtime:dbs.ind_postingtime    ;

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectPressure() in Initial FETCH section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    while (SQLCODE == 0) 
    {
        rowCount++;
        if ((structPtr = (Pressure *) malloc(sizeof(Pressure))) != NULL)
        {

            strcpy(structPtr->lid, dbs.lid);

            strcpy(structPtr->pe, dbs.pe);

            structPtr->dur = dbs.dur;

            strcpy(structPtr->ts, dbs.ts);

            strcpy(structPtr->extremum, dbs.extremum);

            structPtr->obstime = dbs.obstime;

            structPtr->value = dbs.value;
            setNullIfIndicated(dbs.ind_value, DOUBLE, &structPtr->value);

            strcpy(structPtr->shef_qual_code, dbs.shef_qual_code);
            setNullIfIndicated(dbs.ind_shef_qual_code, CHAR, structPtr->shef_qual_code);

            structPtr->quality_code = dbs.quality_code;
            setNullIfIndicated(dbs.ind_quality_code, INT, &structPtr->quality_code);

            structPtr->revision = dbs.revision;
            setNullIfIndicated(dbs.ind_revision, SHORT, &structPtr->revision);

            strcpy(structPtr->product_id, dbs.product_id);
            setNullIfIndicated(dbs.ind_product_id, CHAR, structPtr->product_id);

            structPtr->producttime = dbs.producttime;
            setNullIfIndicated(dbs.ind_producttime, DATETIME, &structPtr->producttime);

            structPtr->postingtime = dbs.postingtime;
            setNullIfIndicated(dbs.ind_postingtime, DATETIME, &structPtr->postingtime);


        }
        else
        {
            break;
        }

        if (first)
        {
            listPtr = structPtr;
            ListInit(&listPtr->list);
            first = 0;
        }

        ListAdd(&listPtr->list, &structPtr->node);
        memset(&dbs, '\0', sizeof(dbs));

        EXEC SQL FETCH tcur2 INTO 
        :dbs.lid, :dbs.pe, 
        :dbs.dur, :dbs.ts, 
        :dbs.extremum, :dbs.obstime, 
        :dbs.value:dbs.ind_value, :dbs.shef_qual_code:dbs.ind_shef_qual_code, 
        :dbs.quality_code:dbs.ind_quality_code, :dbs.revision:dbs.ind_revision, 
        :dbs.product_id:dbs.ind_product_id, :dbs.producttime:dbs.ind_producttime, 
        :dbs.postingtime:dbs.ind_postingtime        ;

        if (SQLCODE < 0)
        {
            if (errorLoggingOn)
            {
                fprintf(stderr, "SelectPressure() in Nth fetch section --- ERROR\n");
                fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
                fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
                fflush(stderr);
            }
            initDbStatus(&dbStatus);
            return (NULL);
        }
    }

    initDbStatus(&dbStatus);
    setDbStatusRowsAffected(&dbStatus, rowCount);

    EXEC SQL CLOSE tcur2;
    return(listPtr);
}

/* ------------------------------------------------------------------------- */

int SelectPressureCount(const char * where)
{

    char selectStatement[] = "SELECT COUNT(*) FROM Pressure ";

    EXEC SQL BEGIN DECLARE SECTION;

    int rowCount = 0;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, SELECT);

    strcpy(queryBuffer, selectStatement);

    if ( ( where != NULL ) && ( * where != '\0' ) ) 
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE tid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountPressure() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }

    EXEC SQL DECLARE tcur3 CURSOR WITH HOLD FOR tid;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountPressure() in Declare cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }

    EXEC SQL OPEN tcur3;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountPressure() in Open cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }


    EXEC SQL FETCH tcur3 INTO :rowCount;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountPressure() in Initial FETCH section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }

    initDbStatus(&dbStatus);
    setDbStatusRowsAffected(&dbStatus, rowCount);

    EXEC SQL CLOSE tcur3;
    return(rowCount);
}

/* ------------------------------------------------------------------------- */

int PutPressure(const Pressure * structPtr)
{
    EXEC SQL BEGIN DECLARE SECTION;

    struct Pressure_t  dbs;

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, INSERT);

    if (structPtr == NULL)
    {
        return(ERR_BAD_ARGS);
    }

    memset(&dbs, '\0', sizeof(dbs));

    strcpy(dbs.lid, structPtr->lid);

    strcpy(dbs.pe, structPtr->pe);

    dbs.dur = structPtr->dur;

    strcpy(dbs.ts, structPtr->ts);

    strcpy(dbs.extremum, structPtr->extremum);

    dbs.obstime = structPtr->obstime;

    dbs.value = structPtr->value;
    dbs.ind_value = getIndicator(DOUBLE, (void *)&structPtr->value);

    strcpy(dbs.shef_qual_code, structPtr->shef_qual_code);
    dbs.ind_shef_qual_code = getIndicator(CHAR, (void *)structPtr->shef_qual_code);

    dbs.quality_code = structPtr->quality_code;
    dbs.ind_quality_code = getIndicator(INT, (void *)&structPtr->quality_code);

    dbs.revision = structPtr->revision;
    dbs.ind_revision = getIndicator(SHORT, (void *)&structPtr->revision);

    strcpy(dbs.product_id, structPtr->product_id);
    dbs.ind_product_id = getIndicator(CHAR, (void *)structPtr->product_id);

    dbs.producttime = structPtr->producttime;
    dbs.ind_producttime = getIndicator(DATETIME, (void *)&structPtr->producttime);

    dbs.postingtime = structPtr->postingtime;
    dbs.ind_postingtime = getIndicator(DATETIME, (void *)&structPtr->postingtime);


    EXEC SQL INSERT INTO Pressure (lid,pe,
        dur,ts,extremum,
        obstime,"value",shef_qual_code,
        quality_code,revision,product_id,
        producttime,postingtime        )
        VALUES (
         :dbs.lid, :dbs.pe, :dbs.dur,
         :dbs.ts, :dbs.extremum, :dbs.obstime,
         :dbs.value:dbs.ind_value, :dbs.shef_qual_code:dbs.ind_shef_qual_code, :dbs.quality_code:dbs.ind_quality_code,
         :dbs.revision:dbs.ind_revision, :dbs.product_id:dbs.ind_product_id, :dbs.producttime:dbs.ind_producttime,
         :dbs.postingtime:dbs.ind_postingtime);

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "PutPressure() in Insert section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

int InsertPressure(const Pressure * structPtr)
{
    EXEC SQL BEGIN DECLARE SECTION;

    struct Pressure_t  dbs;

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, INSERT);

    if (structPtr == NULL)
    {
        return(ERR_BAD_ARGS);
    }

    memset(&dbs, '\0', sizeof(dbs));

    strcpy(dbs.lid, structPtr->lid);

    strcpy(dbs.pe, structPtr->pe);

    dbs.dur = structPtr->dur;

    strcpy(dbs.ts, structPtr->ts);

    strcpy(dbs.extremum, structPtr->extremum);

    dbs.obstime = structPtr->obstime;

    dbs.value = structPtr->value;
    dbs.ind_value = getIndicator(DOUBLE, (void *)&structPtr->value);

    strcpy(dbs.shef_qual_code, structPtr->shef_qual_code);
    dbs.ind_shef_qual_code = getIndicator(CHAR, (void *)structPtr->shef_qual_code);

    dbs.quality_code = structPtr->quality_code;
    dbs.ind_quality_code = getIndicator(INT, (void *)&structPtr->quality_code);

    dbs.revision = structPtr->revision;
    dbs.ind_revision = getIndicator(SHORT, (void *)&structPtr->revision);

    strcpy(dbs.product_id, structPtr->product_id);
    dbs.ind_product_id = getIndicator(CHAR, (void *)structPtr->product_id);

    dbs.producttime = structPtr->producttime;
    dbs.ind_producttime = getIndicator(DATETIME, (void *)&structPtr->producttime);

    dbs.postingtime = structPtr->postingtime;
    dbs.ind_postingtime = getIndicator(DATETIME, (void *)&structPtr->postingtime);


    EXEC SQL INSERT INTO Pressure (lid,pe,
        dur,ts,extremum,
        obstime,"value",shef_qual_code,
        quality_code,revision,product_id,
        producttime,postingtime        )
        VALUES (
         :dbs.lid, :dbs.pe, :dbs.dur,
         :dbs.ts, :dbs.extremum, :dbs.obstime,
         :dbs.value:dbs.ind_value, :dbs.shef_qual_code:dbs.ind_shef_qual_code, :dbs.quality_code:dbs.ind_quality_code,
         :dbs.revision:dbs.ind_revision, :dbs.product_id:dbs.ind_product_id, :dbs.producttime:dbs.ind_producttime,
         :dbs.postingtime:dbs.ind_postingtime);

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "InsertPressure() in Insert section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

int UpdatePressure(const Pressure *structPtr, const char *where)
{
    EXEC SQL BEGIN DECLARE SECTION;

    struct Pressure_t   dbs;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, UPDATE);

    strcpy(dbs.lid, structPtr->lid);

    strcpy(dbs.pe, structPtr->pe);

    dbs.dur = structPtr->dur;

    strcpy(dbs.ts, structPtr->ts);

    strcpy(dbs.extremum, structPtr->extremum);

    dbs.obstime = structPtr->obstime;

    dbs.value = structPtr->value;
    dbs.ind_value = getIndicator(DOUBLE, (void *)&structPtr->value);

    strcpy(dbs.shef_qual_code, structPtr->shef_qual_code);
    dbs.ind_shef_qual_code = getIndicator(CHAR, (void *)structPtr->shef_qual_code);

    dbs.quality_code = structPtr->quality_code;
    dbs.ind_quality_code = getIndicator(INT, (void *)&structPtr->quality_code);

    dbs.revision = structPtr->revision;
    dbs.ind_revision = getIndicator(SHORT, (void *)&structPtr->revision);

    strcpy(dbs.product_id, structPtr->product_id);
    dbs.ind_product_id = getIndicator(CHAR, (void *)structPtr->product_id);

    dbs.producttime = structPtr->producttime;
    dbs.ind_producttime = getIndicator(DATETIME, (void *)&structPtr->producttime);

    dbs.postingtime = structPtr->postingtime;
    dbs.ind_postingtime = getIndicator(DATETIME, (void *)&structPtr->postingtime);


    sprintf(queryBuffer, " UPDATE Pressure SET " );
    strcat(queryBuffer, "lid = ? , pe = ? , dur = ? , ts = ? , extremum = ? ,     ");
    strcat(queryBuffer, "obstime = ? , \"value\" = ? , shef_qual_code = ? , quality_code = ? , revision = ? ,     ");
    strcat(queryBuffer, "product_id = ? , producttime = ? , postingtime = ? ");

    if ( (where != NULL) && (*where != '\0'))
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE uid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "UpdatePressure() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return(SQLCODE);
    }

    EXEC SQL EXECUTE uid USING  :dbs.lid, :dbs.pe, :dbs.dur, :dbs.ts, :dbs.extremum,
     :dbs.obstime, :dbs.value:dbs.ind_value, :dbs.shef_qual_code:dbs.ind_shef_qual_code, :dbs.quality_code:dbs.ind_quality_code, :dbs.revision:dbs.ind_revision,
     :dbs.product_id:dbs.ind_product_id, :dbs.producttime:dbs.ind_producttime, :dbs.postingtime:dbs.ind_postingtime;

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "UpdatePressure() in Execute section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return(SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

int DeletePressure(const char *where)
{
    char deleteStatement[] = "DELETE FROM Pressure ";
    EXEC SQL BEGIN DECLARE SECTION;

    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    strcpy(queryBuffer, deleteStatement);
    if ( (where != NULL) && (*where != '\0'))
    {
        strcat(queryBuffer, where);
    }
    EXEC SQL EXECUTE IMMEDIATE :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "DeletePressure() in Execute Immediate section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return(SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

int UpdatePressureByRecord (const Pressure * newStructPtr, const Pressure * oldStructPtr)
{
    char whereClause[BUFSIZ];
    GetPressurePrimaryKeyWhereString(oldStructPtr, whereClause);
    return (UpdatePressure(newStructPtr, whereClause));
}

/* ------------------------------------------------------------------------- */

int InsertOrUpdatePressure(const Pressure * structPtr)
{
    UpdatePressureByRecord(structPtr, structPtr);
    setDbStatusSqlCommand(&dbStatus, UPDATE);

    if ( (SQLCODE < 0) || (SQLCODE == 100) )
    {
        InsertPressure(structPtr);
        setDbStatusSqlCommand(&dbStatus, INSERT);
    }

    initDbStatus(&dbStatus);
    return(SQLCODE);
}

/* ------------------------------------------------------------------------- */

int InsertIfUniquePressure(const Pressure * structPtr, bool *isUnique)
{
    int resultCode = 0;
    if (PressureExists(structPtr))
    {
        setDbStatusSqlCommand(&dbStatus, SELECT);
        *isUnique = false;
        resultCode = dbStatus.sql_code;
    }
    else
    {
        resultCode = dbStatus.sql_code;
        if (resultCode == 0)
        {
            InsertPressure(structPtr);
            setDbStatusSqlCommand(&dbStatus, INSERT);
            *isUnique = true;
            resultCode = dbStatus.sql_code;
        }
        else
        {
            *isUnique = false;
        }
    }
    initDbStatus(&dbStatus);

    return(resultCode);
}

/* ------------------------------------------------------------------------- */

int DeletePressureByRecord(const Pressure * structPtr)
{
    char whereClause[BUFSIZ];
    GetPressurePrimaryKeyWhereString(structPtr, whereClause);
    return (DeletePressure(whereClause));
}

/* ------------------------------------------------------------------------- */

bool PressureExists(const Pressure * structPtr)
{
    int result = false;
    int rowCount = 0;
    char whereString[QUERY_LEN];

    GetPressurePrimaryKeyWhereString(structPtr, whereString);
    rowCount = SelectPressureCount(whereString);

    if (rowCount > 0)
    {
        result = true;
    }
    else
    {
        result = false;
    }

    return(result);
}

/* ------------------------------------------------------------------------- */

void GetPressurePrimaryKeyWhereString (const Pressure * structPtr, char returnWhereString[] )
{
    char time_buffer0[40];
    sprintf(returnWhereString, "WHERE lid = '%s'  AND pe = '%s'  AND dur = %d  AND ts = '%s'  AND extremum = '%s'  AND obstime = '%s' ",
            structPtr->lid, structPtr->pe, structPtr->dur, structPtr->ts, structPtr->extremum, 
            dtimet_to_ansi(structPtr->obstime, time_buffer0));
}

/* ------------------------------------------------------------------------- */

void FreePressure( Pressure * structPtr)
{
    Pressure* nextPtr = NULL;

    while (structPtr != NULL)
    {
        nextPtr = ( Pressure * ) ListNext ( &structPtr->node );
        free (structPtr);
        structPtr = nextPtr;
    }
    return;
}

/* ------------------------------------------------------------------------- */

DbStatus * GetPressureDbStatus()
{
    return &dbStatus;
}

/* ------------------------------------------------------------------------- */

void SetPressureErrorLogging(int value)
{
    errorLoggingOn = value;
    return;
}


/* ------------------------------------------------------------------------- */

