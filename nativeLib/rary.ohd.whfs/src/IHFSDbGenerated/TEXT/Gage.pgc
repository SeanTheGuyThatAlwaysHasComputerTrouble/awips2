/*
    File: Gage.pgc
    Author  : CDBGEN
    Created : Wed Aug 06 12:34:22 EDT 2008 using database hd_ob83empty
    Description: This .pgc file has an associated header file. 
            and defines all functions and the table's INTERNAL record structure.
*/

#include "Gage.h"

EXEC SQL include sqlda;
EXEC SQL include sqltypes;
EXEC SQL include sql3types;
EXEC SQL include pgtypes_timestamp;
EXEC SQL include pgtypes_date;
EXEC SQL include pgtypes_interval;
EXEC SQL include pgtypes_numeric;

EXEC SQL BEGIN DECLARE SECTION;
struct Gage_t
{
    char		lid[9];
    date		gbegin;
    char		type[11];
    date		gend;
    char		remark[256];
    char		maint[11];
    char		owner[11];

    int		ind_gend;
    int		ind_remark;
    int		ind_maint;
    int		ind_owner;
} Gage_rec;
EXEC SQL END DECLARE SECTION;

#define QUERY_LEN 9999
static int errorLoggingOn = 1;

static DbStatus dbStatus;


/* ------------------------------------------------------------------------- */

Gage * GetGage(const char * where)
{

    Gage * listPtr = NULL;
    Gage * structPtr = NULL;
    char selectStatement[] = "SELECT * FROM Gage ";

    int rowCount = 0;
    int first = 1;

    EXEC SQL BEGIN DECLARE SECTION;

    struct Gage_t   dbs;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, SELECT);

    strcpy(queryBuffer, selectStatement);

    if ( ( where != NULL ) && ( * where != '\0' ) ) 
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE tid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetGage() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL DECLARE tcur1 CURSOR WITH HOLD FOR tid;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetGage() in Declare cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL OPEN tcur1;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetGage() in Open cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    listPtr = NULL;
    memset(&dbs, '\0', sizeof(dbs));

    EXEC SQL FETCH tcur1 INTO 
    :dbs.lid, :dbs.gbegin, 
    :dbs.type, :dbs.gend:dbs.ind_gend, 
    :dbs.remark:dbs.ind_remark, :dbs.maint:dbs.ind_maint, 
    :dbs.owner:dbs.ind_owner    ;

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetGage() in Initial FETCH section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    while (SQLCODE == 0) 
    {
        rowCount++;
        if ((structPtr = (Gage *) malloc(sizeof(Gage))) != NULL)
        {

            strcpy(structPtr->lid, dbs.lid);

            structPtr->gbegin = pg_date_to_date_t(dbs.gbegin);

            strcpy(structPtr->type, dbs.type);

            structPtr->gend = pg_date_to_date_t(dbs.gend);
            setNullIfIndicated(dbs.ind_gend, INT, &structPtr->gend);

            strcpy(structPtr->remark, dbs.remark);
            setNullIfIndicated(dbs.ind_remark, CHAR, structPtr->remark);

            strcpy(structPtr->maint, dbs.maint);
            setNullIfIndicated(dbs.ind_maint, CHAR, structPtr->maint);

            strcpy(structPtr->owner, dbs.owner);
            setNullIfIndicated(dbs.ind_owner, CHAR, structPtr->owner);


        }
        else
        {
            break;
        }

        if (first)
        {
            listPtr = structPtr;
            ListInit(&listPtr->list);
            first = 0;
        }

        ListAdd(&listPtr->list, &structPtr->node);
        memset(&dbs, '\0', sizeof(dbs));

        EXEC SQL FETCH tcur1 INTO 
        :dbs.lid, :dbs.gbegin, 
        :dbs.type, :dbs.gend:dbs.ind_gend, 
        :dbs.remark:dbs.ind_remark, :dbs.maint:dbs.ind_maint, 
        :dbs.owner:dbs.ind_owner        ;

        if (SQLCODE < 0)
        {
            if (errorLoggingOn)
            {
                fprintf(stderr, "GetGage() in Nth fetch section --- ERROR\n");
                fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
                fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
                fflush(stderr);
            }
            initDbStatus(&dbStatus);
            return (NULL);
        }
    }

    initDbStatus(&dbStatus);
    setDbStatusRowsAffected(&dbStatus, rowCount);

    EXEC SQL CLOSE tcur1;
    return(listPtr);
}

/* ------------------------------------------------------------------------- */

Gage * SelectGage(const char * where)
{

    Gage * listPtr = NULL;
    Gage * structPtr = NULL;
    char selectStatement[] = "SELECT * FROM Gage ";

    int rowCount = 0;
    int first = 1;

    EXEC SQL BEGIN DECLARE SECTION;

    struct Gage_t   dbs;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, SELECT);

    strcpy(queryBuffer, selectStatement);

    if ( ( where != NULL ) && ( * where != '\0' ) ) 
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE tid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectGage() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL DECLARE tcur2 CURSOR WITH HOLD FOR tid;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectGage() in Declare cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL OPEN tcur2;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectGage() in Open cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    listPtr = NULL;
    memset(&dbs, '\0', sizeof(dbs));

    EXEC SQL FETCH tcur2 INTO 
    :dbs.lid, :dbs.gbegin, 
    :dbs.type, :dbs.gend:dbs.ind_gend, 
    :dbs.remark:dbs.ind_remark, :dbs.maint:dbs.ind_maint, 
    :dbs.owner:dbs.ind_owner    ;

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectGage() in Initial FETCH section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    while (SQLCODE == 0) 
    {
        rowCount++;
        if ((structPtr = (Gage *) malloc(sizeof(Gage))) != NULL)
        {

            strcpy(structPtr->lid, dbs.lid);

            structPtr->gbegin = pg_date_to_date_t(dbs.gbegin);

            strcpy(structPtr->type, dbs.type);

            structPtr->gend = pg_date_to_date_t(dbs.gend);
            setNullIfIndicated(dbs.ind_gend, INT, &structPtr->gend);

            strcpy(structPtr->remark, dbs.remark);
            setNullIfIndicated(dbs.ind_remark, CHAR, structPtr->remark);

            strcpy(structPtr->maint, dbs.maint);
            setNullIfIndicated(dbs.ind_maint, CHAR, structPtr->maint);

            strcpy(structPtr->owner, dbs.owner);
            setNullIfIndicated(dbs.ind_owner, CHAR, structPtr->owner);


        }
        else
        {
            break;
        }

        if (first)
        {
            listPtr = structPtr;
            ListInit(&listPtr->list);
            first = 0;
        }

        ListAdd(&listPtr->list, &structPtr->node);
        memset(&dbs, '\0', sizeof(dbs));

        EXEC SQL FETCH tcur2 INTO 
        :dbs.lid, :dbs.gbegin, 
        :dbs.type, :dbs.gend:dbs.ind_gend, 
        :dbs.remark:dbs.ind_remark, :dbs.maint:dbs.ind_maint, 
        :dbs.owner:dbs.ind_owner        ;

        if (SQLCODE < 0)
        {
            if (errorLoggingOn)
            {
                fprintf(stderr, "SelectGage() in Nth fetch section --- ERROR\n");
                fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
                fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
                fflush(stderr);
            }
            initDbStatus(&dbStatus);
            return (NULL);
        }
    }

    initDbStatus(&dbStatus);
    setDbStatusRowsAffected(&dbStatus, rowCount);

    EXEC SQL CLOSE tcur2;
    return(listPtr);
}

/* ------------------------------------------------------------------------- */

int SelectGageCount(const char * where)
{

    char selectStatement[] = "SELECT COUNT(*) FROM Gage ";

    EXEC SQL BEGIN DECLARE SECTION;

    int rowCount = 0;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, SELECT);

    strcpy(queryBuffer, selectStatement);

    if ( ( where != NULL ) && ( * where != '\0' ) ) 
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE tid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountGage() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }

    EXEC SQL DECLARE tcur3 CURSOR WITH HOLD FOR tid;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountGage() in Declare cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }

    EXEC SQL OPEN tcur3;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountGage() in Open cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }


    EXEC SQL FETCH tcur3 INTO :rowCount;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountGage() in Initial FETCH section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }

    initDbStatus(&dbStatus);
    setDbStatusRowsAffected(&dbStatus, rowCount);

    EXEC SQL CLOSE tcur3;
    return(rowCount);
}

/* ------------------------------------------------------------------------- */

int PutGage(const Gage * structPtr)
{
    EXEC SQL BEGIN DECLARE SECTION;

    struct Gage_t  dbs;

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, INSERT);

    if (structPtr == NULL)
    {
        return(ERR_BAD_ARGS);
    }

    memset(&dbs, '\0', sizeof(dbs));

    strcpy(dbs.lid, structPtr->lid);

    dbs.gbegin = date_t_to_pg_date(structPtr->gbegin);

    strcpy(dbs.type, structPtr->type);

    dbs.gend = date_t_to_pg_date(structPtr->gend);
    dbs.ind_gend = getIndicator(INT, (void *)&structPtr->gend);

    strcpy(dbs.remark, structPtr->remark);
    dbs.ind_remark = getIndicator(CHAR, (void *)structPtr->remark);

    strcpy(dbs.maint, structPtr->maint);
    dbs.ind_maint = getIndicator(CHAR, (void *)structPtr->maint);

    strcpy(dbs.owner, structPtr->owner);
    dbs.ind_owner = getIndicator(CHAR, (void *)structPtr->owner);


    EXEC SQL INSERT INTO Gage (lid,gbegin,
        type,gend,remark,
        maint,owner        )
        VALUES (
         :dbs.lid, :dbs.gbegin, :dbs.type,
         :dbs.gend:dbs.ind_gend, :dbs.remark:dbs.ind_remark, :dbs.maint:dbs.ind_maint,
         :dbs.owner:dbs.ind_owner);

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "PutGage() in Insert section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

int InsertGage(const Gage * structPtr)
{
    EXEC SQL BEGIN DECLARE SECTION;

    struct Gage_t  dbs;

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, INSERT);

    if (structPtr == NULL)
    {
        return(ERR_BAD_ARGS);
    }

    memset(&dbs, '\0', sizeof(dbs));

    strcpy(dbs.lid, structPtr->lid);

    dbs.gbegin = date_t_to_pg_date(structPtr->gbegin);

    strcpy(dbs.type, structPtr->type);

    dbs.gend = date_t_to_pg_date(structPtr->gend);
    dbs.ind_gend = getIndicator(INT, (void *)&structPtr->gend);

    strcpy(dbs.remark, structPtr->remark);
    dbs.ind_remark = getIndicator(CHAR, (void *)structPtr->remark);

    strcpy(dbs.maint, structPtr->maint);
    dbs.ind_maint = getIndicator(CHAR, (void *)structPtr->maint);

    strcpy(dbs.owner, structPtr->owner);
    dbs.ind_owner = getIndicator(CHAR, (void *)structPtr->owner);


    EXEC SQL INSERT INTO Gage (lid,gbegin,
        type,gend,remark,
        maint,owner        )
        VALUES (
         :dbs.lid, :dbs.gbegin, :dbs.type,
         :dbs.gend:dbs.ind_gend, :dbs.remark:dbs.ind_remark, :dbs.maint:dbs.ind_maint,
         :dbs.owner:dbs.ind_owner);

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "InsertGage() in Insert section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

int UpdateGage(const Gage *structPtr, const char *where)
{
    EXEC SQL BEGIN DECLARE SECTION;

    struct Gage_t   dbs;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, UPDATE);

    strcpy(dbs.lid, structPtr->lid);

    dbs.gbegin = date_t_to_pg_date(structPtr->gbegin);

    strcpy(dbs.type, structPtr->type);

    dbs.gend = date_t_to_pg_date(structPtr->gend);
    dbs.ind_gend = getIndicator(INT, (void *)&structPtr->gend);

    strcpy(dbs.remark, structPtr->remark);
    dbs.ind_remark = getIndicator(CHAR, (void *)structPtr->remark);

    strcpy(dbs.maint, structPtr->maint);
    dbs.ind_maint = getIndicator(CHAR, (void *)structPtr->maint);

    strcpy(dbs.owner, structPtr->owner);
    dbs.ind_owner = getIndicator(CHAR, (void *)structPtr->owner);


    sprintf(queryBuffer, " UPDATE Gage SET " );
    strcat(queryBuffer, "lid = ? , gbegin = ? , type = ? , gend = ? , remark = ? ,     ");
    strcat(queryBuffer, "maint = ? , owner = ? ");

    if ( (where != NULL) && (*where != '\0'))
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE uid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "UpdateGage() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return(SQLCODE);
    }

    EXEC SQL EXECUTE uid USING  :dbs.lid, :dbs.gbegin, :dbs.type, :dbs.gend:dbs.ind_gend, :dbs.remark:dbs.ind_remark,
     :dbs.maint:dbs.ind_maint, :dbs.owner:dbs.ind_owner;

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "UpdateGage() in Execute section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return(SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

int DeleteGage(const char *where)
{
    char deleteStatement[] = "DELETE FROM Gage ";
    EXEC SQL BEGIN DECLARE SECTION;

    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    strcpy(queryBuffer, deleteStatement);
    if ( (where != NULL) && (*where != '\0'))
    {
        strcat(queryBuffer, where);
    }
    EXEC SQL EXECUTE IMMEDIATE :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "DeleteGage() in Execute Immediate section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return(SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

int UpdateGageByRecord (const Gage * newStructPtr, const Gage * oldStructPtr)
{
    char whereClause[BUFSIZ];
    GetGagePrimaryKeyWhereString(oldStructPtr, whereClause);
    return (UpdateGage(newStructPtr, whereClause));
}

/* ------------------------------------------------------------------------- */

int InsertOrUpdateGage(const Gage * structPtr)
{
    UpdateGageByRecord(structPtr, structPtr);
    setDbStatusSqlCommand(&dbStatus, UPDATE);

    if ( (SQLCODE < 0) || (SQLCODE == 100) )
    {
        InsertGage(structPtr);
        setDbStatusSqlCommand(&dbStatus, INSERT);
    }

    initDbStatus(&dbStatus);
    return(SQLCODE);
}

/* ------------------------------------------------------------------------- */

int InsertIfUniqueGage(const Gage * structPtr, bool *isUnique)
{
    int resultCode = 0;
    if (GageExists(structPtr))
    {
        setDbStatusSqlCommand(&dbStatus, SELECT);
        *isUnique = false;
        resultCode = dbStatus.sql_code;
    }
    else
    {
        resultCode = dbStatus.sql_code;
        if (resultCode == 0)
        {
            InsertGage(structPtr);
            setDbStatusSqlCommand(&dbStatus, INSERT);
            *isUnique = true;
            resultCode = dbStatus.sql_code;
        }
        else
        {
            *isUnique = false;
        }
    }
    initDbStatus(&dbStatus);

    return(resultCode);
}

/* ------------------------------------------------------------------------- */

int DeleteGageByRecord(const Gage * structPtr)
{
    char whereClause[BUFSIZ];
    GetGagePrimaryKeyWhereString(structPtr, whereClause);
    return (DeleteGage(whereClause));
}

/* ------------------------------------------------------------------------- */

bool GageExists(const Gage * structPtr)
{
    int result = false;
    int rowCount = 0;
    char whereString[QUERY_LEN];

    GetGagePrimaryKeyWhereString(structPtr, whereString);
    rowCount = SelectGageCount(whereString);

    if (rowCount > 0)
    {
        result = true;
    }
    else
    {
        result = false;
    }

    return(result);
}

/* ------------------------------------------------------------------------- */

void GetGagePrimaryKeyWhereString (const Gage * structPtr, char returnWhereString[] )
{
    char date_buffer0[40];
    sprintf(returnWhereString, "WHERE lid = '%s'  AND gbegin = '%s'  AND type = '%s' ",
            structPtr->lid, date_t_to_ansi_date(structPtr->gbegin, date_buffer0), structPtr->type);
}

/* ------------------------------------------------------------------------- */

void FreeGage( Gage * structPtr)
{
    Gage* nextPtr = NULL;

    while (structPtr != NULL)
    {
        nextPtr = ( Gage * ) ListNext ( &structPtr->node );
        free (structPtr);
        structPtr = nextPtr;
    }
    return;
}

/* ------------------------------------------------------------------------- */

DbStatus * GetGageDbStatus()
{
    return &dbStatus;
}

/* ------------------------------------------------------------------------- */

void SetGageErrorLogging(int value)
{
    errorLoggingOn = value;
    return;
}


/* ------------------------------------------------------------------------- */

