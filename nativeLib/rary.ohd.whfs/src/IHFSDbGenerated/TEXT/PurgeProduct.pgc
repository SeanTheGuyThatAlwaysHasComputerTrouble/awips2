/*
    File: PurgeProduct.pgc
    Author  : CDBGEN
    Created : Wed Aug 06 12:34:27 EDT 2008 using database hd_ob83empty
    Description: This .pgc file has an associated header file. 
            and defines all functions and the table's INTERNAL record structure.
*/

#include "PurgeProduct.h"

EXEC SQL include sqlda;
EXEC SQL include sqltypes;
EXEC SQL include sql3types;
EXEC SQL include pgtypes_timestamp;
EXEC SQL include pgtypes_date;
EXEC SQL include pgtypes_interval;
EXEC SQL include pgtypes_numeric;

EXEC SQL BEGIN DECLARE SECTION;
struct PurgeProduct_t
{
    char		product_id[11];
    long		num_versions;
    dtime_t		producttime;
    dtime_t		postingtime;

    int		ind_num_versions;
    int		ind_producttime;
    int		ind_postingtime;
} PurgeProduct_rec;
EXEC SQL END DECLARE SECTION;

#define QUERY_LEN 9999
static int errorLoggingOn = 1;

static DbStatus dbStatus;


/* ------------------------------------------------------------------------- */

PurgeProduct * GetPurgeProduct(const char * where)
{

    PurgeProduct * listPtr = NULL;
    PurgeProduct * structPtr = NULL;
    char selectStatement[] = "SELECT * FROM PurgeProduct ";

    int rowCount = 0;
    int first = 1;

    EXEC SQL BEGIN DECLARE SECTION;

    struct PurgeProduct_t   dbs;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, SELECT);

    strcpy(queryBuffer, selectStatement);

    if ( ( where != NULL ) && ( * where != '\0' ) ) 
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE tid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetPurgeProduct() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL DECLARE tcur1 CURSOR WITH HOLD FOR tid;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetPurgeProduct() in Declare cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL OPEN tcur1;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetPurgeProduct() in Open cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    listPtr = NULL;
    memset(&dbs, '\0', sizeof(dbs));

    EXEC SQL FETCH tcur1 INTO 
    :dbs.product_id, :dbs.num_versions:dbs.ind_num_versions, 
    :dbs.producttime:dbs.ind_producttime, :dbs.postingtime:dbs.ind_postingtime    ;

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetPurgeProduct() in Initial FETCH section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    while (SQLCODE == 0) 
    {
        rowCount++;
        if ((structPtr = (PurgeProduct *) malloc(sizeof(PurgeProduct))) != NULL)
        {

            strcpy(structPtr->product_id, dbs.product_id);

            structPtr->num_versions = dbs.num_versions;
            setNullIfIndicated(dbs.ind_num_versions, INT, &structPtr->num_versions);

            structPtr->producttime = dbs.producttime;
            setNullIfIndicated(dbs.ind_producttime, DATETIME, &structPtr->producttime);

            structPtr->postingtime = dbs.postingtime;
            setNullIfIndicated(dbs.ind_postingtime, DATETIME, &structPtr->postingtime);


        }
        else
        {
            break;
        }

        if (first)
        {
            listPtr = structPtr;
            ListInit(&listPtr->list);
            first = 0;
        }

        ListAdd(&listPtr->list, &structPtr->node);
        memset(&dbs, '\0', sizeof(dbs));

        EXEC SQL FETCH tcur1 INTO 
        :dbs.product_id, :dbs.num_versions:dbs.ind_num_versions, 
        :dbs.producttime:dbs.ind_producttime, :dbs.postingtime:dbs.ind_postingtime        ;

        if (SQLCODE < 0)
        {
            if (errorLoggingOn)
            {
                fprintf(stderr, "GetPurgeProduct() in Nth fetch section --- ERROR\n");
                fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
                fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
                fflush(stderr);
            }
            initDbStatus(&dbStatus);
            return (NULL);
        }
    }

    initDbStatus(&dbStatus);
    setDbStatusRowsAffected(&dbStatus, rowCount);

    EXEC SQL CLOSE tcur1;
    return(listPtr);
}

/* ------------------------------------------------------------------------- */

PurgeProduct * SelectPurgeProduct(const char * where)
{

    PurgeProduct * listPtr = NULL;
    PurgeProduct * structPtr = NULL;
    char selectStatement[] = "SELECT * FROM PurgeProduct ";

    int rowCount = 0;
    int first = 1;

    EXEC SQL BEGIN DECLARE SECTION;

    struct PurgeProduct_t   dbs;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, SELECT);

    strcpy(queryBuffer, selectStatement);

    if ( ( where != NULL ) && ( * where != '\0' ) ) 
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE tid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectPurgeProduct() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL DECLARE tcur2 CURSOR WITH HOLD FOR tid;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectPurgeProduct() in Declare cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL OPEN tcur2;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectPurgeProduct() in Open cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    listPtr = NULL;
    memset(&dbs, '\0', sizeof(dbs));

    EXEC SQL FETCH tcur2 INTO 
    :dbs.product_id, :dbs.num_versions:dbs.ind_num_versions, 
    :dbs.producttime:dbs.ind_producttime, :dbs.postingtime:dbs.ind_postingtime    ;

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectPurgeProduct() in Initial FETCH section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    while (SQLCODE == 0) 
    {
        rowCount++;
        if ((structPtr = (PurgeProduct *) malloc(sizeof(PurgeProduct))) != NULL)
        {

            strcpy(structPtr->product_id, dbs.product_id);

            structPtr->num_versions = dbs.num_versions;
            setNullIfIndicated(dbs.ind_num_versions, INT, &structPtr->num_versions);

            structPtr->producttime = dbs.producttime;
            setNullIfIndicated(dbs.ind_producttime, DATETIME, &structPtr->producttime);

            structPtr->postingtime = dbs.postingtime;
            setNullIfIndicated(dbs.ind_postingtime, DATETIME, &structPtr->postingtime);


        }
        else
        {
            break;
        }

        if (first)
        {
            listPtr = structPtr;
            ListInit(&listPtr->list);
            first = 0;
        }

        ListAdd(&listPtr->list, &structPtr->node);
        memset(&dbs, '\0', sizeof(dbs));

        EXEC SQL FETCH tcur2 INTO 
        :dbs.product_id, :dbs.num_versions:dbs.ind_num_versions, 
        :dbs.producttime:dbs.ind_producttime, :dbs.postingtime:dbs.ind_postingtime        ;

        if (SQLCODE < 0)
        {
            if (errorLoggingOn)
            {
                fprintf(stderr, "SelectPurgeProduct() in Nth fetch section --- ERROR\n");
                fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
                fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
                fflush(stderr);
            }
            initDbStatus(&dbStatus);
            return (NULL);
        }
    }

    initDbStatus(&dbStatus);
    setDbStatusRowsAffected(&dbStatus, rowCount);

    EXEC SQL CLOSE tcur2;
    return(listPtr);
}

/* ------------------------------------------------------------------------- */

int SelectPurgeProductCount(const char * where)
{

    char selectStatement[] = "SELECT COUNT(*) FROM PurgeProduct ";

    EXEC SQL BEGIN DECLARE SECTION;

    int rowCount = 0;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, SELECT);

    strcpy(queryBuffer, selectStatement);

    if ( ( where != NULL ) && ( * where != '\0' ) ) 
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE tid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountPurgeProduct() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }

    EXEC SQL DECLARE tcur3 CURSOR WITH HOLD FOR tid;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountPurgeProduct() in Declare cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }

    EXEC SQL OPEN tcur3;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountPurgeProduct() in Open cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }


    EXEC SQL FETCH tcur3 INTO :rowCount;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountPurgeProduct() in Initial FETCH section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }

    initDbStatus(&dbStatus);
    setDbStatusRowsAffected(&dbStatus, rowCount);

    EXEC SQL CLOSE tcur3;
    return(rowCount);
}

/* ------------------------------------------------------------------------- */

int PutPurgeProduct(const PurgeProduct * structPtr)
{
    EXEC SQL BEGIN DECLARE SECTION;

    struct PurgeProduct_t  dbs;

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, INSERT);

    if (structPtr == NULL)
    {
        return(ERR_BAD_ARGS);
    }

    memset(&dbs, '\0', sizeof(dbs));

    strcpy(dbs.product_id, structPtr->product_id);

    dbs.num_versions = structPtr->num_versions;
    dbs.ind_num_versions = getIndicator(INT, (void *)&structPtr->num_versions);

    dbs.producttime = structPtr->producttime;
    dbs.ind_producttime = getIndicator(DATETIME, (void *)&structPtr->producttime);

    dbs.postingtime = structPtr->postingtime;
    dbs.ind_postingtime = getIndicator(DATETIME, (void *)&structPtr->postingtime);


    EXEC SQL INSERT INTO PurgeProduct (product_id,num_versions,
        producttime,postingtime        )
        VALUES (
         :dbs.product_id, :dbs.num_versions:dbs.ind_num_versions, :dbs.producttime:dbs.ind_producttime,
         :dbs.postingtime:dbs.ind_postingtime);

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "PutPurgeProduct() in Insert section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

int InsertPurgeProduct(const PurgeProduct * structPtr)
{
    EXEC SQL BEGIN DECLARE SECTION;

    struct PurgeProduct_t  dbs;

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, INSERT);

    if (structPtr == NULL)
    {
        return(ERR_BAD_ARGS);
    }

    memset(&dbs, '\0', sizeof(dbs));

    strcpy(dbs.product_id, structPtr->product_id);

    dbs.num_versions = structPtr->num_versions;
    dbs.ind_num_versions = getIndicator(INT, (void *)&structPtr->num_versions);

    dbs.producttime = structPtr->producttime;
    dbs.ind_producttime = getIndicator(DATETIME, (void *)&structPtr->producttime);

    dbs.postingtime = structPtr->postingtime;
    dbs.ind_postingtime = getIndicator(DATETIME, (void *)&structPtr->postingtime);


    EXEC SQL INSERT INTO PurgeProduct (product_id,num_versions,
        producttime,postingtime        )
        VALUES (
         :dbs.product_id, :dbs.num_versions:dbs.ind_num_versions, :dbs.producttime:dbs.ind_producttime,
         :dbs.postingtime:dbs.ind_postingtime);

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "InsertPurgeProduct() in Insert section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

int UpdatePurgeProduct(const PurgeProduct *structPtr, const char *where)
{
    EXEC SQL BEGIN DECLARE SECTION;

    struct PurgeProduct_t   dbs;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, UPDATE);

    strcpy(dbs.product_id, structPtr->product_id);

    dbs.num_versions = structPtr->num_versions;
    dbs.ind_num_versions = getIndicator(INT, (void *)&structPtr->num_versions);

    dbs.producttime = structPtr->producttime;
    dbs.ind_producttime = getIndicator(DATETIME, (void *)&structPtr->producttime);

    dbs.postingtime = structPtr->postingtime;
    dbs.ind_postingtime = getIndicator(DATETIME, (void *)&structPtr->postingtime);


    sprintf(queryBuffer, " UPDATE PurgeProduct SET " );
    strcat(queryBuffer, "product_id = ? , num_versions = ? , producttime = ? , postingtime = ? ");

    if ( (where != NULL) && (*where != '\0'))
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE uid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "UpdatePurgeProduct() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return(SQLCODE);
    }

    EXEC SQL EXECUTE uid USING  :dbs.product_id, :dbs.num_versions:dbs.ind_num_versions, :dbs.producttime:dbs.ind_producttime, :dbs.postingtime:dbs.ind_postingtime;

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "UpdatePurgeProduct() in Execute section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return(SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

int DeletePurgeProduct(const char *where)
{
    char deleteStatement[] = "DELETE FROM PurgeProduct ";
    EXEC SQL BEGIN DECLARE SECTION;

    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    strcpy(queryBuffer, deleteStatement);
    if ( (where != NULL) && (*where != '\0'))
    {
        strcat(queryBuffer, where);
    }
    EXEC SQL EXECUTE IMMEDIATE :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "DeletePurgeProduct() in Execute Immediate section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return(SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

int UpdatePurgeProductByRecord (const PurgeProduct * newStructPtr, const PurgeProduct * oldStructPtr)
{
    char whereClause[BUFSIZ];
    GetPurgeProductPrimaryKeyWhereString(oldStructPtr, whereClause);
    return (UpdatePurgeProduct(newStructPtr, whereClause));
}

/* ------------------------------------------------------------------------- */

int InsertOrUpdatePurgeProduct(const PurgeProduct * structPtr)
{
    UpdatePurgeProductByRecord(structPtr, structPtr);
    setDbStatusSqlCommand(&dbStatus, UPDATE);

    if ( (SQLCODE < 0) || (SQLCODE == 100) )
    {
        InsertPurgeProduct(structPtr);
        setDbStatusSqlCommand(&dbStatus, INSERT);
    }

    initDbStatus(&dbStatus);
    return(SQLCODE);
}

/* ------------------------------------------------------------------------- */

int InsertIfUniquePurgeProduct(const PurgeProduct * structPtr, bool *isUnique)
{
    int resultCode = 0;
    if (PurgeProductExists(structPtr))
    {
        setDbStatusSqlCommand(&dbStatus, SELECT);
        *isUnique = false;
        resultCode = dbStatus.sql_code;
    }
    else
    {
        resultCode = dbStatus.sql_code;
        if (resultCode == 0)
        {
            InsertPurgeProduct(structPtr);
            setDbStatusSqlCommand(&dbStatus, INSERT);
            *isUnique = true;
            resultCode = dbStatus.sql_code;
        }
        else
        {
            *isUnique = false;
        }
    }
    initDbStatus(&dbStatus);

    return(resultCode);
}

/* ------------------------------------------------------------------------- */

int DeletePurgeProductByRecord(const PurgeProduct * structPtr)
{
    char whereClause[BUFSIZ];
    GetPurgeProductPrimaryKeyWhereString(structPtr, whereClause);
    return (DeletePurgeProduct(whereClause));
}

/* ------------------------------------------------------------------------- */

bool PurgeProductExists(const PurgeProduct * structPtr)
{
    int result = false;
    int rowCount = 0;
    char whereString[QUERY_LEN];

    GetPurgeProductPrimaryKeyWhereString(structPtr, whereString);
    rowCount = SelectPurgeProductCount(whereString);

    if (rowCount > 0)
    {
        result = true;
    }
    else
    {
        result = false;
    }

    return(result);
}

/* ------------------------------------------------------------------------- */

void GetPurgeProductPrimaryKeyWhereString (const PurgeProduct * structPtr, char returnWhereString[] )
{
    sprintf(returnWhereString, "WHERE product_id = '%s' ",
            structPtr->product_id);
}

/* ------------------------------------------------------------------------- */

void FreePurgeProduct( PurgeProduct * structPtr)
{
    PurgeProduct* nextPtr = NULL;

    while (structPtr != NULL)
    {
        nextPtr = ( PurgeProduct * ) ListNext ( &structPtr->node );
        free (structPtr);
        structPtr = nextPtr;
    }
    return;
}

/* ------------------------------------------------------------------------- */

DbStatus * GetPurgeProductDbStatus()
{
    return &dbStatus;
}

/* ------------------------------------------------------------------------- */

void SetPurgeProductErrorLogging(int value)
{
    errorLoggingOn = value;
    return;
}


/* ------------------------------------------------------------------------- */

