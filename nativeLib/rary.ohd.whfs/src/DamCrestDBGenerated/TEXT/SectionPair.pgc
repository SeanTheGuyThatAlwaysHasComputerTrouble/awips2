/*
    File: SectionPair.pgc
    Author  : CDBGEN
    Created : Wed Aug 06 12:34:48 EDT 2008 using database dc_ob7empty
    Description: This .pgc file has an associated header file. 
            and defines all functions and the table's INTERNAL record structure.
*/

#include "SectionPair.h"

EXEC SQL include sqlda;
EXEC SQL include sqltypes;
EXEC SQL include sql3types;
EXEC SQL include pgtypes_timestamp;
EXEC SQL include pgtypes_date;
EXEC SQL include pgtypes_interval;
EXEC SQL include pgtypes_numeric;

EXEC SQL BEGIN DECLARE SECTION;
struct SectionPair_t
{
    char		nidid[11];
    char		down_name[26];
    long		pair_num;
    char		xsec_type[3];
    double		elev;
    double		tw;
    double		mann_n;
    double		inactive_width;
    dtime_t		updated;

    int		ind_elev;
    int		ind_tw;
    int		ind_mann_n;
    int		ind_inactive_width;
    int		ind_updated;
} SectionPair_rec;
EXEC SQL END DECLARE SECTION;

#define QUERY_LEN 9999
static int errorLoggingOn = 1;

static DbStatus dbStatus;


/* ------------------------------------------------------------------------- */

SectionPair * GetSectionPair(const char * where)
{

    SectionPair * listPtr = NULL;
    SectionPair * structPtr = NULL;
    char selectStatement[] = "SELECT * FROM SectionPair ";

    int rowCount = 0;
    int first = 1;

    EXEC SQL BEGIN DECLARE SECTION;

    struct SectionPair_t   dbs;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, SELECT);

    strcpy(queryBuffer, selectStatement);

    if ( ( where != NULL ) && ( * where != '\0' ) ) 
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE tid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetSectionPair() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL DECLARE tcur1 CURSOR WITH HOLD FOR tid;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetSectionPair() in Declare cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL OPEN tcur1;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetSectionPair() in Open cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    listPtr = NULL;
    memset(&dbs, '\0', sizeof(dbs));

    EXEC SQL FETCH tcur1 INTO 
    :dbs.nidid, :dbs.down_name, 
    :dbs.pair_num, :dbs.xsec_type, 
    :dbs.elev:dbs.ind_elev, :dbs.tw:dbs.ind_tw, 
    :dbs.mann_n:dbs.ind_mann_n, :dbs.inactive_width:dbs.ind_inactive_width, 
    :dbs.updated:dbs.ind_updated    ;

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetSectionPair() in Initial FETCH section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    while (SQLCODE == 0) 
    {
        rowCount++;
        if ((structPtr = (SectionPair *) malloc(sizeof(SectionPair))) != NULL)
        {

            strcpy(structPtr->nidid, dbs.nidid);

            strcpy(structPtr->down_name, dbs.down_name);

            structPtr->pair_num = dbs.pair_num;

            strcpy(structPtr->xsec_type, dbs.xsec_type);

            structPtr->elev = dbs.elev;
            setNullIfIndicated(dbs.ind_elev, DOUBLE, &structPtr->elev);

            structPtr->tw = dbs.tw;
            setNullIfIndicated(dbs.ind_tw, DOUBLE, &structPtr->tw);

            structPtr->mann_n = dbs.mann_n;
            setNullIfIndicated(dbs.ind_mann_n, DOUBLE, &structPtr->mann_n);

            structPtr->inactive_width = dbs.inactive_width;
            setNullIfIndicated(dbs.ind_inactive_width, DOUBLE, &structPtr->inactive_width);

            structPtr->updated = dbs.updated;
            setNullIfIndicated(dbs.ind_updated, DATETIME, &structPtr->updated);


        }
        else
        {
            break;
        }

        if (first)
        {
            listPtr = structPtr;
            ListInit(&listPtr->list);
            first = 0;
        }

        ListAdd(&listPtr->list, &structPtr->node);
        memset(&dbs, '\0', sizeof(dbs));

        EXEC SQL FETCH tcur1 INTO 
        :dbs.nidid, :dbs.down_name, 
        :dbs.pair_num, :dbs.xsec_type, 
        :dbs.elev:dbs.ind_elev, :dbs.tw:dbs.ind_tw, 
        :dbs.mann_n:dbs.ind_mann_n, :dbs.inactive_width:dbs.ind_inactive_width, 
        :dbs.updated:dbs.ind_updated        ;

        if (SQLCODE < 0)
        {
            if (errorLoggingOn)
            {
                fprintf(stderr, "GetSectionPair() in Nth fetch section --- ERROR\n");
                fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
                fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
                fflush(stderr);
            }
            initDbStatus(&dbStatus);
            return (NULL);
        }
    }

    initDbStatus(&dbStatus);
    setDbStatusRowsAffected(&dbStatus, rowCount);

    EXEC SQL CLOSE tcur1;
    return(listPtr);
}

/* ------------------------------------------------------------------------- */

SectionPair * SelectSectionPair(const char * where)
{

    SectionPair * listPtr = NULL;
    SectionPair * structPtr = NULL;
    char selectStatement[] = "SELECT * FROM SectionPair ";

    int rowCount = 0;
    int first = 1;

    EXEC SQL BEGIN DECLARE SECTION;

    struct SectionPair_t   dbs;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, SELECT);

    strcpy(queryBuffer, selectStatement);

    if ( ( where != NULL ) && ( * where != '\0' ) ) 
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE tid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectSectionPair() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL DECLARE tcur2 CURSOR WITH HOLD FOR tid;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectSectionPair() in Declare cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL OPEN tcur2;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectSectionPair() in Open cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    listPtr = NULL;
    memset(&dbs, '\0', sizeof(dbs));

    EXEC SQL FETCH tcur2 INTO 
    :dbs.nidid, :dbs.down_name, 
    :dbs.pair_num, :dbs.xsec_type, 
    :dbs.elev:dbs.ind_elev, :dbs.tw:dbs.ind_tw, 
    :dbs.mann_n:dbs.ind_mann_n, :dbs.inactive_width:dbs.ind_inactive_width, 
    :dbs.updated:dbs.ind_updated    ;

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectSectionPair() in Initial FETCH section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    while (SQLCODE == 0) 
    {
        rowCount++;
        if ((structPtr = (SectionPair *) malloc(sizeof(SectionPair))) != NULL)
        {

            strcpy(structPtr->nidid, dbs.nidid);

            strcpy(structPtr->down_name, dbs.down_name);

            structPtr->pair_num = dbs.pair_num;

            strcpy(structPtr->xsec_type, dbs.xsec_type);

            structPtr->elev = dbs.elev;
            setNullIfIndicated(dbs.ind_elev, DOUBLE, &structPtr->elev);

            structPtr->tw = dbs.tw;
            setNullIfIndicated(dbs.ind_tw, DOUBLE, &structPtr->tw);

            structPtr->mann_n = dbs.mann_n;
            setNullIfIndicated(dbs.ind_mann_n, DOUBLE, &structPtr->mann_n);

            structPtr->inactive_width = dbs.inactive_width;
            setNullIfIndicated(dbs.ind_inactive_width, DOUBLE, &structPtr->inactive_width);

            structPtr->updated = dbs.updated;
            setNullIfIndicated(dbs.ind_updated, DATETIME, &structPtr->updated);


        }
        else
        {
            break;
        }

        if (first)
        {
            listPtr = structPtr;
            ListInit(&listPtr->list);
            first = 0;
        }

        ListAdd(&listPtr->list, &structPtr->node);
        memset(&dbs, '\0', sizeof(dbs));

        EXEC SQL FETCH tcur2 INTO 
        :dbs.nidid, :dbs.down_name, 
        :dbs.pair_num, :dbs.xsec_type, 
        :dbs.elev:dbs.ind_elev, :dbs.tw:dbs.ind_tw, 
        :dbs.mann_n:dbs.ind_mann_n, :dbs.inactive_width:dbs.ind_inactive_width, 
        :dbs.updated:dbs.ind_updated        ;

        if (SQLCODE < 0)
        {
            if (errorLoggingOn)
            {
                fprintf(stderr, "SelectSectionPair() in Nth fetch section --- ERROR\n");
                fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
                fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
                fflush(stderr);
            }
            initDbStatus(&dbStatus);
            return (NULL);
        }
    }

    initDbStatus(&dbStatus);
    setDbStatusRowsAffected(&dbStatus, rowCount);

    EXEC SQL CLOSE tcur2;
    return(listPtr);
}

/* ------------------------------------------------------------------------- */

int SelectSectionPairCount(const char * where)
{

    char selectStatement[] = "SELECT COUNT(*) FROM SectionPair ";

    EXEC SQL BEGIN DECLARE SECTION;

    int rowCount = 0;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, SELECT);

    strcpy(queryBuffer, selectStatement);

    if ( ( where != NULL ) && ( * where != '\0' ) ) 
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE tid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountSectionPair() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }

    EXEC SQL DECLARE tcur3 CURSOR WITH HOLD FOR tid;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountSectionPair() in Declare cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }

    EXEC SQL OPEN tcur3;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountSectionPair() in Open cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }


    EXEC SQL FETCH tcur3 INTO :rowCount;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountSectionPair() in Initial FETCH section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }

    initDbStatus(&dbStatus);
    setDbStatusRowsAffected(&dbStatus, rowCount);

    EXEC SQL CLOSE tcur3;
    return(rowCount);
}

/* ------------------------------------------------------------------------- */

int PutSectionPair(const SectionPair * structPtr)
{
    EXEC SQL BEGIN DECLARE SECTION;

    struct SectionPair_t  dbs;

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, INSERT);

    if (structPtr == NULL)
    {
        return(ERR_BAD_ARGS);
    }

    memset(&dbs, '\0', sizeof(dbs));

    strcpy(dbs.nidid, structPtr->nidid);

    strcpy(dbs.down_name, structPtr->down_name);

    dbs.pair_num = structPtr->pair_num;

    strcpy(dbs.xsec_type, structPtr->xsec_type);

    dbs.elev = structPtr->elev;
    dbs.ind_elev = getIndicator(DOUBLE, (void *)&structPtr->elev);

    dbs.tw = structPtr->tw;
    dbs.ind_tw = getIndicator(DOUBLE, (void *)&structPtr->tw);

    dbs.mann_n = structPtr->mann_n;
    dbs.ind_mann_n = getIndicator(DOUBLE, (void *)&structPtr->mann_n);

    dbs.inactive_width = structPtr->inactive_width;
    dbs.ind_inactive_width = getIndicator(DOUBLE, (void *)&structPtr->inactive_width);

    dbs.updated = structPtr->updated;
    dbs.ind_updated = getIndicator(DATETIME, (void *)&structPtr->updated);


    EXEC SQL INSERT INTO SectionPair (nidid,down_name,
        pair_num,xsec_type,elev,
        tw,mann_n,inactive_width,
        updated        )
        VALUES (
         :dbs.nidid, :dbs.down_name, :dbs.pair_num,
         :dbs.xsec_type, :dbs.elev:dbs.ind_elev, :dbs.tw:dbs.ind_tw,
         :dbs.mann_n:dbs.ind_mann_n, :dbs.inactive_width:dbs.ind_inactive_width, :dbs.updated:dbs.ind_updated);

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "PutSectionPair() in Insert section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

int InsertSectionPair(const SectionPair * structPtr)
{
    EXEC SQL BEGIN DECLARE SECTION;

    struct SectionPair_t  dbs;

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, INSERT);

    if (structPtr == NULL)
    {
        return(ERR_BAD_ARGS);
    }

    memset(&dbs, '\0', sizeof(dbs));

    strcpy(dbs.nidid, structPtr->nidid);

    strcpy(dbs.down_name, structPtr->down_name);

    dbs.pair_num = structPtr->pair_num;

    strcpy(dbs.xsec_type, structPtr->xsec_type);

    dbs.elev = structPtr->elev;
    dbs.ind_elev = getIndicator(DOUBLE, (void *)&structPtr->elev);

    dbs.tw = structPtr->tw;
    dbs.ind_tw = getIndicator(DOUBLE, (void *)&structPtr->tw);

    dbs.mann_n = structPtr->mann_n;
    dbs.ind_mann_n = getIndicator(DOUBLE, (void *)&structPtr->mann_n);

    dbs.inactive_width = structPtr->inactive_width;
    dbs.ind_inactive_width = getIndicator(DOUBLE, (void *)&structPtr->inactive_width);

    dbs.updated = structPtr->updated;
    dbs.ind_updated = getIndicator(DATETIME, (void *)&structPtr->updated);


    EXEC SQL INSERT INTO SectionPair (nidid,down_name,
        pair_num,xsec_type,elev,
        tw,mann_n,inactive_width,
        updated        )
        VALUES (
         :dbs.nidid, :dbs.down_name, :dbs.pair_num,
         :dbs.xsec_type, :dbs.elev:dbs.ind_elev, :dbs.tw:dbs.ind_tw,
         :dbs.mann_n:dbs.ind_mann_n, :dbs.inactive_width:dbs.ind_inactive_width, :dbs.updated:dbs.ind_updated);

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "InsertSectionPair() in Insert section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

int UpdateSectionPair(const SectionPair *structPtr, const char *where)
{
    EXEC SQL BEGIN DECLARE SECTION;

    struct SectionPair_t   dbs;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, UPDATE);

    strcpy(dbs.nidid, structPtr->nidid);

    strcpy(dbs.down_name, structPtr->down_name);

    dbs.pair_num = structPtr->pair_num;

    strcpy(dbs.xsec_type, structPtr->xsec_type);

    dbs.elev = structPtr->elev;
    dbs.ind_elev = getIndicator(DOUBLE, (void *)&structPtr->elev);

    dbs.tw = structPtr->tw;
    dbs.ind_tw = getIndicator(DOUBLE, (void *)&structPtr->tw);

    dbs.mann_n = structPtr->mann_n;
    dbs.ind_mann_n = getIndicator(DOUBLE, (void *)&structPtr->mann_n);

    dbs.inactive_width = structPtr->inactive_width;
    dbs.ind_inactive_width = getIndicator(DOUBLE, (void *)&structPtr->inactive_width);

    dbs.updated = structPtr->updated;
    dbs.ind_updated = getIndicator(DATETIME, (void *)&structPtr->updated);


    sprintf(queryBuffer, " UPDATE SectionPair SET " );
    strcat(queryBuffer, "nidid = ? , down_name = ? , pair_num = ? , xsec_type = ? , elev = ? ,     ");
    strcat(queryBuffer, "tw = ? , mann_n = ? , inactive_width = ? , updated = ? ");

    if ( (where != NULL) && (*where != '\0'))
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE uid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "UpdateSectionPair() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return(SQLCODE);
    }

    EXEC SQL EXECUTE uid USING  :dbs.nidid, :dbs.down_name, :dbs.pair_num, :dbs.xsec_type, :dbs.elev:dbs.ind_elev,
     :dbs.tw:dbs.ind_tw, :dbs.mann_n:dbs.ind_mann_n, :dbs.inactive_width:dbs.ind_inactive_width, :dbs.updated:dbs.ind_updated;

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "UpdateSectionPair() in Execute section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return(SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

int DeleteSectionPair(const char *where)
{
    char deleteStatement[] = "DELETE FROM SectionPair ";
    EXEC SQL BEGIN DECLARE SECTION;

    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    strcpy(queryBuffer, deleteStatement);
    if ( (where != NULL) && (*where != '\0'))
    {
        strcat(queryBuffer, where);
    }
    EXEC SQL EXECUTE IMMEDIATE :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "DeleteSectionPair() in Execute Immediate section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return(SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

int UpdateSectionPairByRecord (const SectionPair * newStructPtr, const SectionPair * oldStructPtr)
{
    char whereClause[BUFSIZ];
    GetSectionPairPrimaryKeyWhereString(oldStructPtr, whereClause);
    return (UpdateSectionPair(newStructPtr, whereClause));
}

/* ------------------------------------------------------------------------- */

int InsertOrUpdateSectionPair(const SectionPair * structPtr)
{
    UpdateSectionPairByRecord(structPtr, structPtr);
    setDbStatusSqlCommand(&dbStatus, UPDATE);

    if ( (SQLCODE < 0) || (SQLCODE == 100) )
    {
        InsertSectionPair(structPtr);
        setDbStatusSqlCommand(&dbStatus, INSERT);
    }

    initDbStatus(&dbStatus);
    return(SQLCODE);
}

/* ------------------------------------------------------------------------- */

int InsertIfUniqueSectionPair(const SectionPair * structPtr, bool *isUnique)
{
    int resultCode = 0;
    if (SectionPairExists(structPtr))
    {
        setDbStatusSqlCommand(&dbStatus, SELECT);
        *isUnique = false;
        resultCode = dbStatus.sql_code;
    }
    else
    {
        resultCode = dbStatus.sql_code;
        if (resultCode == 0)
        {
            InsertSectionPair(structPtr);
            setDbStatusSqlCommand(&dbStatus, INSERT);
            *isUnique = true;
            resultCode = dbStatus.sql_code;
        }
        else
        {
            *isUnique = false;
        }
    }
    initDbStatus(&dbStatus);

    return(resultCode);
}

/* ------------------------------------------------------------------------- */

int DeleteSectionPairByRecord(const SectionPair * structPtr)
{
    char whereClause[BUFSIZ];
    GetSectionPairPrimaryKeyWhereString(structPtr, whereClause);
    return (DeleteSectionPair(whereClause));
}

/* ------------------------------------------------------------------------- */

bool SectionPairExists(const SectionPair * structPtr)
{
    int result = false;
    int rowCount = 0;
    char whereString[QUERY_LEN];

    GetSectionPairPrimaryKeyWhereString(structPtr, whereString);
    rowCount = SelectSectionPairCount(whereString);

    if (rowCount > 0)
    {
        result = true;
    }
    else
    {
        result = false;
    }

    return(result);
}

/* ------------------------------------------------------------------------- */

void GetSectionPairPrimaryKeyWhereString (const SectionPair * structPtr, char returnWhereString[] )
{
    sprintf(returnWhereString, "WHERE nidid = '%s'  AND down_name = '%s'  AND pair_num = %ld  AND xsec_type = '%s' ",
            structPtr->nidid, structPtr->down_name, structPtr->pair_num, structPtr->xsec_type);
}

/* ------------------------------------------------------------------------- */

void FreeSectionPair( SectionPair * structPtr)
{
    SectionPair* nextPtr = NULL;

    while (structPtr != NULL)
    {
        nextPtr = ( SectionPair * ) ListNext ( &structPtr->node );
        free (structPtr);
        structPtr = nextPtr;
    }
    return;
}

/* ------------------------------------------------------------------------- */

DbStatus * GetSectionPairDbStatus()
{
    return &dbStatus;
}

/* ------------------------------------------------------------------------- */

void SetSectionPairErrorLogging(int value)
{
    errorLoggingOn = value;
    return;
}


/* ------------------------------------------------------------------------- */

