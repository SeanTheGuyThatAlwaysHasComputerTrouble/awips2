/*
    File: DownStream.pgc
    Author  : CDBGEN
    Created : Wed Aug 06 12:34:48 EDT 2008 using database dc_ob7empty
    Description: This .pgc file has an associated header file. 
            and defines all functions and the table's INTERNAL record structure.
*/

#include "DownStream.h"

EXEC SQL include sqlda;
EXEC SQL include sqltypes;
EXEC SQL include sql3types;
EXEC SQL include pgtypes_timestamp;
EXEC SQL include pgtypes_date;
EXEC SQL include pgtypes_interval;
EXEC SQL include pgtypes_numeric;

EXEC SQL BEGIN DECLARE SECTION;
struct DownStream_t
{
    char		nidid[11];
    char		down_name[26];
    double		longitude;
    double		latitude;
    double		elevation;
    double		distance_from_dam;
    double		flood_flow;
    double		flood_depth;
    double		flood_width;
    double		mann_oc;
    char		comments[31];
    char		xsec_best_type[3];
    dtime_t		updated;

    int		ind_longitude;
    int		ind_latitude;
    int		ind_elevation;
    int		ind_distance_from_dam;
    int		ind_flood_flow;
    int		ind_flood_depth;
    int		ind_flood_width;
    int		ind_mann_oc;
    int		ind_comments;
    int		ind_xsec_best_type;
    int		ind_updated;
} DownStream_rec;
EXEC SQL END DECLARE SECTION;

#define QUERY_LEN 9999
static int errorLoggingOn = 1;

static DbStatus dbStatus;


/* ------------------------------------------------------------------------- */

DownStream * GetDownStream(const char * where)
{

    DownStream * listPtr = NULL;
    DownStream * structPtr = NULL;
    char selectStatement[] = "SELECT * FROM DownStream ";

    int rowCount = 0;
    int first = 1;

    EXEC SQL BEGIN DECLARE SECTION;

    struct DownStream_t   dbs;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, SELECT);

    strcpy(queryBuffer, selectStatement);

    if ( ( where != NULL ) && ( * where != '\0' ) ) 
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE tid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetDownStream() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL DECLARE tcur1 CURSOR WITH HOLD FOR tid;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetDownStream() in Declare cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL OPEN tcur1;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetDownStream() in Open cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    listPtr = NULL;
    memset(&dbs, '\0', sizeof(dbs));

    EXEC SQL FETCH tcur1 INTO 
    :dbs.nidid, :dbs.down_name, 
    :dbs.longitude:dbs.ind_longitude, :dbs.latitude:dbs.ind_latitude, 
    :dbs.elevation:dbs.ind_elevation, :dbs.distance_from_dam:dbs.ind_distance_from_dam, 
    :dbs.flood_flow:dbs.ind_flood_flow, :dbs.flood_depth:dbs.ind_flood_depth, 
    :dbs.flood_width:dbs.ind_flood_width, :dbs.mann_oc:dbs.ind_mann_oc, 
    :dbs.comments:dbs.ind_comments, :dbs.xsec_best_type:dbs.ind_xsec_best_type, 
    :dbs.updated:dbs.ind_updated    ;

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "GetDownStream() in Initial FETCH section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    while (SQLCODE == 0) 
    {
        rowCount++;
        if ((structPtr = (DownStream *) malloc(sizeof(DownStream))) != NULL)
        {

            strcpy(structPtr->nidid, dbs.nidid);

            strcpy(structPtr->down_name, dbs.down_name);

            structPtr->longitude = dbs.longitude;
            setNullIfIndicated(dbs.ind_longitude, DOUBLE, &structPtr->longitude);

            structPtr->latitude = dbs.latitude;
            setNullIfIndicated(dbs.ind_latitude, DOUBLE, &structPtr->latitude);

            structPtr->elevation = dbs.elevation;
            setNullIfIndicated(dbs.ind_elevation, DOUBLE, &structPtr->elevation);

            structPtr->distance_from_dam = dbs.distance_from_dam;
            setNullIfIndicated(dbs.ind_distance_from_dam, DOUBLE, &structPtr->distance_from_dam);

            structPtr->flood_flow = dbs.flood_flow;
            setNullIfIndicated(dbs.ind_flood_flow, DOUBLE, &structPtr->flood_flow);

            structPtr->flood_depth = dbs.flood_depth;
            setNullIfIndicated(dbs.ind_flood_depth, DOUBLE, &structPtr->flood_depth);

            structPtr->flood_width = dbs.flood_width;
            setNullIfIndicated(dbs.ind_flood_width, DOUBLE, &structPtr->flood_width);

            structPtr->mann_oc = dbs.mann_oc;
            setNullIfIndicated(dbs.ind_mann_oc, DOUBLE, &structPtr->mann_oc);

            strcpy(structPtr->comments, dbs.comments);
            setNullIfIndicated(dbs.ind_comments, CHAR, structPtr->comments);

            strcpy(structPtr->xsec_best_type, dbs.xsec_best_type);
            setNullIfIndicated(dbs.ind_xsec_best_type, CHAR, structPtr->xsec_best_type);

            structPtr->updated = dbs.updated;
            setNullIfIndicated(dbs.ind_updated, DATETIME, &structPtr->updated);


        }
        else
        {
            break;
        }

        if (first)
        {
            listPtr = structPtr;
            ListInit(&listPtr->list);
            first = 0;
        }

        ListAdd(&listPtr->list, &structPtr->node);
        memset(&dbs, '\0', sizeof(dbs));

        EXEC SQL FETCH tcur1 INTO 
        :dbs.nidid, :dbs.down_name, 
        :dbs.longitude:dbs.ind_longitude, :dbs.latitude:dbs.ind_latitude, 
        :dbs.elevation:dbs.ind_elevation, :dbs.distance_from_dam:dbs.ind_distance_from_dam, 
        :dbs.flood_flow:dbs.ind_flood_flow, :dbs.flood_depth:dbs.ind_flood_depth, 
        :dbs.flood_width:dbs.ind_flood_width, :dbs.mann_oc:dbs.ind_mann_oc, 
        :dbs.comments:dbs.ind_comments, :dbs.xsec_best_type:dbs.ind_xsec_best_type, 
        :dbs.updated:dbs.ind_updated        ;

        if (SQLCODE < 0)
        {
            if (errorLoggingOn)
            {
                fprintf(stderr, "GetDownStream() in Nth fetch section --- ERROR\n");
                fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
                fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
                fflush(stderr);
            }
            initDbStatus(&dbStatus);
            return (NULL);
        }
    }

    initDbStatus(&dbStatus);
    setDbStatusRowsAffected(&dbStatus, rowCount);

    EXEC SQL CLOSE tcur1;
    return(listPtr);
}

/* ------------------------------------------------------------------------- */

DownStream * SelectDownStream(const char * where)
{

    DownStream * listPtr = NULL;
    DownStream * structPtr = NULL;
    char selectStatement[] = "SELECT * FROM DownStream ";

    int rowCount = 0;
    int first = 1;

    EXEC SQL BEGIN DECLARE SECTION;

    struct DownStream_t   dbs;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, SELECT);

    strcpy(queryBuffer, selectStatement);

    if ( ( where != NULL ) && ( * where != '\0' ) ) 
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE tid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectDownStream() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL DECLARE tcur2 CURSOR WITH HOLD FOR tid;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectDownStream() in Declare cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    EXEC SQL OPEN tcur2;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectDownStream() in Open cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    listPtr = NULL;
    memset(&dbs, '\0', sizeof(dbs));

    EXEC SQL FETCH tcur2 INTO 
    :dbs.nidid, :dbs.down_name, 
    :dbs.longitude:dbs.ind_longitude, :dbs.latitude:dbs.ind_latitude, 
    :dbs.elevation:dbs.ind_elevation, :dbs.distance_from_dam:dbs.ind_distance_from_dam, 
    :dbs.flood_flow:dbs.ind_flood_flow, :dbs.flood_depth:dbs.ind_flood_depth, 
    :dbs.flood_width:dbs.ind_flood_width, :dbs.mann_oc:dbs.ind_mann_oc, 
    :dbs.comments:dbs.ind_comments, :dbs.xsec_best_type:dbs.ind_xsec_best_type, 
    :dbs.updated:dbs.ind_updated    ;

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectDownStream() in Initial FETCH section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (NULL);
    }

    while (SQLCODE == 0) 
    {
        rowCount++;
        if ((structPtr = (DownStream *) malloc(sizeof(DownStream))) != NULL)
        {

            strcpy(structPtr->nidid, dbs.nidid);

            strcpy(structPtr->down_name, dbs.down_name);

            structPtr->longitude = dbs.longitude;
            setNullIfIndicated(dbs.ind_longitude, DOUBLE, &structPtr->longitude);

            structPtr->latitude = dbs.latitude;
            setNullIfIndicated(dbs.ind_latitude, DOUBLE, &structPtr->latitude);

            structPtr->elevation = dbs.elevation;
            setNullIfIndicated(dbs.ind_elevation, DOUBLE, &structPtr->elevation);

            structPtr->distance_from_dam = dbs.distance_from_dam;
            setNullIfIndicated(dbs.ind_distance_from_dam, DOUBLE, &structPtr->distance_from_dam);

            structPtr->flood_flow = dbs.flood_flow;
            setNullIfIndicated(dbs.ind_flood_flow, DOUBLE, &structPtr->flood_flow);

            structPtr->flood_depth = dbs.flood_depth;
            setNullIfIndicated(dbs.ind_flood_depth, DOUBLE, &structPtr->flood_depth);

            structPtr->flood_width = dbs.flood_width;
            setNullIfIndicated(dbs.ind_flood_width, DOUBLE, &structPtr->flood_width);

            structPtr->mann_oc = dbs.mann_oc;
            setNullIfIndicated(dbs.ind_mann_oc, DOUBLE, &structPtr->mann_oc);

            strcpy(structPtr->comments, dbs.comments);
            setNullIfIndicated(dbs.ind_comments, CHAR, structPtr->comments);

            strcpy(structPtr->xsec_best_type, dbs.xsec_best_type);
            setNullIfIndicated(dbs.ind_xsec_best_type, CHAR, structPtr->xsec_best_type);

            structPtr->updated = dbs.updated;
            setNullIfIndicated(dbs.ind_updated, DATETIME, &structPtr->updated);


        }
        else
        {
            break;
        }

        if (first)
        {
            listPtr = structPtr;
            ListInit(&listPtr->list);
            first = 0;
        }

        ListAdd(&listPtr->list, &structPtr->node);
        memset(&dbs, '\0', sizeof(dbs));

        EXEC SQL FETCH tcur2 INTO 
        :dbs.nidid, :dbs.down_name, 
        :dbs.longitude:dbs.ind_longitude, :dbs.latitude:dbs.ind_latitude, 
        :dbs.elevation:dbs.ind_elevation, :dbs.distance_from_dam:dbs.ind_distance_from_dam, 
        :dbs.flood_flow:dbs.ind_flood_flow, :dbs.flood_depth:dbs.ind_flood_depth, 
        :dbs.flood_width:dbs.ind_flood_width, :dbs.mann_oc:dbs.ind_mann_oc, 
        :dbs.comments:dbs.ind_comments, :dbs.xsec_best_type:dbs.ind_xsec_best_type, 
        :dbs.updated:dbs.ind_updated        ;

        if (SQLCODE < 0)
        {
            if (errorLoggingOn)
            {
                fprintf(stderr, "SelectDownStream() in Nth fetch section --- ERROR\n");
                fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
                fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
                fflush(stderr);
            }
            initDbStatus(&dbStatus);
            return (NULL);
        }
    }

    initDbStatus(&dbStatus);
    setDbStatusRowsAffected(&dbStatus, rowCount);

    EXEC SQL CLOSE tcur2;
    return(listPtr);
}

/* ------------------------------------------------------------------------- */

int SelectDownStreamCount(const char * where)
{

    char selectStatement[] = "SELECT COUNT(*) FROM DownStream ";

    EXEC SQL BEGIN DECLARE SECTION;

    int rowCount = 0;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, SELECT);

    strcpy(queryBuffer, selectStatement);

    if ( ( where != NULL ) && ( * where != '\0' ) ) 
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE tid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountDownStream() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }

    EXEC SQL DECLARE tcur3 CURSOR WITH HOLD FOR tid;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountDownStream() in Declare cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }

    EXEC SQL OPEN tcur3;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountDownStream() in Open cursor section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }


    EXEC SQL FETCH tcur3 INTO :rowCount;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "SelectCountDownStream() in Initial FETCH section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (-1);
    }

    initDbStatus(&dbStatus);
    setDbStatusRowsAffected(&dbStatus, rowCount);

    EXEC SQL CLOSE tcur3;
    return(rowCount);
}

/* ------------------------------------------------------------------------- */

int PutDownStream(const DownStream * structPtr)
{
    EXEC SQL BEGIN DECLARE SECTION;

    struct DownStream_t  dbs;

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, INSERT);

    if (structPtr == NULL)
    {
        return(ERR_BAD_ARGS);
    }

    memset(&dbs, '\0', sizeof(dbs));

    strcpy(dbs.nidid, structPtr->nidid);

    strcpy(dbs.down_name, structPtr->down_name);

    dbs.longitude = structPtr->longitude;
    dbs.ind_longitude = getIndicator(DOUBLE, (void *)&structPtr->longitude);

    dbs.latitude = structPtr->latitude;
    dbs.ind_latitude = getIndicator(DOUBLE, (void *)&structPtr->latitude);

    dbs.elevation = structPtr->elevation;
    dbs.ind_elevation = getIndicator(DOUBLE, (void *)&structPtr->elevation);

    dbs.distance_from_dam = structPtr->distance_from_dam;
    dbs.ind_distance_from_dam = getIndicator(DOUBLE, (void *)&structPtr->distance_from_dam);

    dbs.flood_flow = structPtr->flood_flow;
    dbs.ind_flood_flow = getIndicator(DOUBLE, (void *)&structPtr->flood_flow);

    dbs.flood_depth = structPtr->flood_depth;
    dbs.ind_flood_depth = getIndicator(DOUBLE, (void *)&structPtr->flood_depth);

    dbs.flood_width = structPtr->flood_width;
    dbs.ind_flood_width = getIndicator(DOUBLE, (void *)&structPtr->flood_width);

    dbs.mann_oc = structPtr->mann_oc;
    dbs.ind_mann_oc = getIndicator(DOUBLE, (void *)&structPtr->mann_oc);

    strcpy(dbs.comments, structPtr->comments);
    dbs.ind_comments = getIndicator(CHAR, (void *)structPtr->comments);

    strcpy(dbs.xsec_best_type, structPtr->xsec_best_type);
    dbs.ind_xsec_best_type = getIndicator(CHAR, (void *)structPtr->xsec_best_type);

    dbs.updated = structPtr->updated;
    dbs.ind_updated = getIndicator(DATETIME, (void *)&structPtr->updated);


    EXEC SQL INSERT INTO DownStream (nidid,down_name,
        longitude,latitude,elevation,
        distance_from_dam,flood_flow,flood_depth,
        flood_width,mann_oc,comments,
        xsec_best_type,updated        )
        VALUES (
         :dbs.nidid, :dbs.down_name, :dbs.longitude:dbs.ind_longitude,
         :dbs.latitude:dbs.ind_latitude, :dbs.elevation:dbs.ind_elevation, :dbs.distance_from_dam:dbs.ind_distance_from_dam,
         :dbs.flood_flow:dbs.ind_flood_flow, :dbs.flood_depth:dbs.ind_flood_depth, :dbs.flood_width:dbs.ind_flood_width,
         :dbs.mann_oc:dbs.ind_mann_oc, :dbs.comments:dbs.ind_comments, :dbs.xsec_best_type:dbs.ind_xsec_best_type,
         :dbs.updated:dbs.ind_updated);

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "PutDownStream() in Insert section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

int InsertDownStream(const DownStream * structPtr)
{
    EXEC SQL BEGIN DECLARE SECTION;

    struct DownStream_t  dbs;

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, INSERT);

    if (structPtr == NULL)
    {
        return(ERR_BAD_ARGS);
    }

    memset(&dbs, '\0', sizeof(dbs));

    strcpy(dbs.nidid, structPtr->nidid);

    strcpy(dbs.down_name, structPtr->down_name);

    dbs.longitude = structPtr->longitude;
    dbs.ind_longitude = getIndicator(DOUBLE, (void *)&structPtr->longitude);

    dbs.latitude = structPtr->latitude;
    dbs.ind_latitude = getIndicator(DOUBLE, (void *)&structPtr->latitude);

    dbs.elevation = structPtr->elevation;
    dbs.ind_elevation = getIndicator(DOUBLE, (void *)&structPtr->elevation);

    dbs.distance_from_dam = structPtr->distance_from_dam;
    dbs.ind_distance_from_dam = getIndicator(DOUBLE, (void *)&structPtr->distance_from_dam);

    dbs.flood_flow = structPtr->flood_flow;
    dbs.ind_flood_flow = getIndicator(DOUBLE, (void *)&structPtr->flood_flow);

    dbs.flood_depth = structPtr->flood_depth;
    dbs.ind_flood_depth = getIndicator(DOUBLE, (void *)&structPtr->flood_depth);

    dbs.flood_width = structPtr->flood_width;
    dbs.ind_flood_width = getIndicator(DOUBLE, (void *)&structPtr->flood_width);

    dbs.mann_oc = structPtr->mann_oc;
    dbs.ind_mann_oc = getIndicator(DOUBLE, (void *)&structPtr->mann_oc);

    strcpy(dbs.comments, structPtr->comments);
    dbs.ind_comments = getIndicator(CHAR, (void *)structPtr->comments);

    strcpy(dbs.xsec_best_type, structPtr->xsec_best_type);
    dbs.ind_xsec_best_type = getIndicator(CHAR, (void *)structPtr->xsec_best_type);

    dbs.updated = structPtr->updated;
    dbs.ind_updated = getIndicator(DATETIME, (void *)&structPtr->updated);


    EXEC SQL INSERT INTO DownStream (nidid,down_name,
        longitude,latitude,elevation,
        distance_from_dam,flood_flow,flood_depth,
        flood_width,mann_oc,comments,
        xsec_best_type,updated        )
        VALUES (
         :dbs.nidid, :dbs.down_name, :dbs.longitude:dbs.ind_longitude,
         :dbs.latitude:dbs.ind_latitude, :dbs.elevation:dbs.ind_elevation, :dbs.distance_from_dam:dbs.ind_distance_from_dam,
         :dbs.flood_flow:dbs.ind_flood_flow, :dbs.flood_depth:dbs.ind_flood_depth, :dbs.flood_width:dbs.ind_flood_width,
         :dbs.mann_oc:dbs.ind_mann_oc, :dbs.comments:dbs.ind_comments, :dbs.xsec_best_type:dbs.ind_xsec_best_type,
         :dbs.updated:dbs.ind_updated);

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "InsertDownStream() in Insert section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return (SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

int UpdateDownStream(const DownStream *structPtr, const char *where)
{
    EXEC SQL BEGIN DECLARE SECTION;

    struct DownStream_t   dbs;
    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    setDbStatusSqlCommand(&dbStatus, UPDATE);

    strcpy(dbs.nidid, structPtr->nidid);

    strcpy(dbs.down_name, structPtr->down_name);

    dbs.longitude = structPtr->longitude;
    dbs.ind_longitude = getIndicator(DOUBLE, (void *)&structPtr->longitude);

    dbs.latitude = structPtr->latitude;
    dbs.ind_latitude = getIndicator(DOUBLE, (void *)&structPtr->latitude);

    dbs.elevation = structPtr->elevation;
    dbs.ind_elevation = getIndicator(DOUBLE, (void *)&structPtr->elevation);

    dbs.distance_from_dam = structPtr->distance_from_dam;
    dbs.ind_distance_from_dam = getIndicator(DOUBLE, (void *)&structPtr->distance_from_dam);

    dbs.flood_flow = structPtr->flood_flow;
    dbs.ind_flood_flow = getIndicator(DOUBLE, (void *)&structPtr->flood_flow);

    dbs.flood_depth = structPtr->flood_depth;
    dbs.ind_flood_depth = getIndicator(DOUBLE, (void *)&structPtr->flood_depth);

    dbs.flood_width = structPtr->flood_width;
    dbs.ind_flood_width = getIndicator(DOUBLE, (void *)&structPtr->flood_width);

    dbs.mann_oc = structPtr->mann_oc;
    dbs.ind_mann_oc = getIndicator(DOUBLE, (void *)&structPtr->mann_oc);

    strcpy(dbs.comments, structPtr->comments);
    dbs.ind_comments = getIndicator(CHAR, (void *)structPtr->comments);

    strcpy(dbs.xsec_best_type, structPtr->xsec_best_type);
    dbs.ind_xsec_best_type = getIndicator(CHAR, (void *)structPtr->xsec_best_type);

    dbs.updated = structPtr->updated;
    dbs.ind_updated = getIndicator(DATETIME, (void *)&structPtr->updated);


    sprintf(queryBuffer, " UPDATE DownStream SET " );
    strcat(queryBuffer, "nidid = ? , down_name = ? , longitude = ? , latitude = ? , elevation = ? ,     ");
    strcat(queryBuffer, "distance_from_dam = ? , flood_flow = ? , flood_depth = ? , flood_width = ? , mann_oc = ? ,     ");
    strcat(queryBuffer, "comments = ? , xsec_best_type = ? , updated = ? ");

    if ( (where != NULL) && (*where != '\0'))
    {
        strcat(queryBuffer, where);
    }

    EXEC SQL PREPARE uid FROM :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "UpdateDownStream() in Prepare section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return(SQLCODE);
    }

    EXEC SQL EXECUTE uid USING  :dbs.nidid, :dbs.down_name, :dbs.longitude:dbs.ind_longitude, :dbs.latitude:dbs.ind_latitude, :dbs.elevation:dbs.ind_elevation,
     :dbs.distance_from_dam:dbs.ind_distance_from_dam, :dbs.flood_flow:dbs.ind_flood_flow, :dbs.flood_depth:dbs.ind_flood_depth, :dbs.flood_width:dbs.ind_flood_width, :dbs.mann_oc:dbs.ind_mann_oc,
     :dbs.comments:dbs.ind_comments, :dbs.xsec_best_type:dbs.ind_xsec_best_type, :dbs.updated:dbs.ind_updated;

    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "UpdateDownStream() in Execute section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return(SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

int DeleteDownStream(const char *where)
{
    char deleteStatement[] = "DELETE FROM DownStream ";
    EXEC SQL BEGIN DECLARE SECTION;

    char queryBuffer[QUERY_LEN];

    EXEC SQL END DECLARE SECTION;

    strcpy(queryBuffer, deleteStatement);
    if ( (where != NULL) && (*where != '\0'))
    {
        strcat(queryBuffer, where);
    }
    EXEC SQL EXECUTE IMMEDIATE :queryBuffer;
    if (SQLCODE < 0)
    {
        if (errorLoggingOn)
        {
            fprintf(stderr, "DeleteDownStream() in Execute Immediate section --- ERROR\n");
            fprintf(stderr, "SQLCODE = (%ld) sql state = (%s)\n", SQLCODE, sqlca.sqlstate);
            fprintf(stderr, "Error Message (%s)\n", sqlca.sqlerrm.sqlerrmc);
            fflush(stderr);
        }
        initDbStatus(&dbStatus);
        return(SQLCODE);
    }

    initDbStatus(&dbStatus);
    return(ERR_OK);
}

/* ------------------------------------------------------------------------- */

int UpdateDownStreamByRecord (const DownStream * newStructPtr, const DownStream * oldStructPtr)
{
    char whereClause[BUFSIZ];
    GetDownStreamPrimaryKeyWhereString(oldStructPtr, whereClause);
    return (UpdateDownStream(newStructPtr, whereClause));
}

/* ------------------------------------------------------------------------- */

int InsertOrUpdateDownStream(const DownStream * structPtr)
{
    UpdateDownStreamByRecord(structPtr, structPtr);
    setDbStatusSqlCommand(&dbStatus, UPDATE);

    if ( (SQLCODE < 0) || (SQLCODE == 100) )
    {
        InsertDownStream(structPtr);
        setDbStatusSqlCommand(&dbStatus, INSERT);
    }

    initDbStatus(&dbStatus);
    return(SQLCODE);
}

/* ------------------------------------------------------------------------- */

int InsertIfUniqueDownStream(const DownStream * structPtr, bool *isUnique)
{
    int resultCode = 0;
    if (DownStreamExists(structPtr))
    {
        setDbStatusSqlCommand(&dbStatus, SELECT);
        *isUnique = false;
        resultCode = dbStatus.sql_code;
    }
    else
    {
        resultCode = dbStatus.sql_code;
        if (resultCode == 0)
        {
            InsertDownStream(structPtr);
            setDbStatusSqlCommand(&dbStatus, INSERT);
            *isUnique = true;
            resultCode = dbStatus.sql_code;
        }
        else
        {
            *isUnique = false;
        }
    }
    initDbStatus(&dbStatus);

    return(resultCode);
}

/* ------------------------------------------------------------------------- */

int DeleteDownStreamByRecord(const DownStream * structPtr)
{
    char whereClause[BUFSIZ];
    GetDownStreamPrimaryKeyWhereString(structPtr, whereClause);
    return (DeleteDownStream(whereClause));
}

/* ------------------------------------------------------------------------- */

bool DownStreamExists(const DownStream * structPtr)
{
    int result = false;
    int rowCount = 0;
    char whereString[QUERY_LEN];

    GetDownStreamPrimaryKeyWhereString(structPtr, whereString);
    rowCount = SelectDownStreamCount(whereString);

    if (rowCount > 0)
    {
        result = true;
    }
    else
    {
        result = false;
    }

    return(result);
}

/* ------------------------------------------------------------------------- */

void GetDownStreamPrimaryKeyWhereString (const DownStream * structPtr, char returnWhereString[] )
{
    sprintf(returnWhereString, "WHERE nidid = '%s'  AND down_name = '%s' ",
            structPtr->nidid, structPtr->down_name);
}

/* ------------------------------------------------------------------------- */

void FreeDownStream( DownStream * structPtr)
{
    DownStream* nextPtr = NULL;

    while (structPtr != NULL)
    {
        nextPtr = ( DownStream * ) ListNext ( &structPtr->node );
        free (structPtr);
        structPtr = nextPtr;
    }
    return;
}

/* ------------------------------------------------------------------------- */

DbStatus * GetDownStreamDbStatus()
{
    return &dbStatus;
}

/* ------------------------------------------------------------------------- */

void SetDownStreamErrorLogging(int value)
{
    errorLoggingOn = value;
    return;
}


/* ------------------------------------------------------------------------- */

