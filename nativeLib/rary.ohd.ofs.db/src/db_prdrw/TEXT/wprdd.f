C MODULE WPRDD
C-----------------------------------------------------------------------
C
      SUBROUTINE WPRDD (ITSID,ITYPE,JHOUR,ITSTEP,NUM,IUNITS,NVALS,
     *   LTSDAT,TSDAT,IFPTR,ICALL,LIWORK,IWORK,IREC,ISTAT)
C
C  ROUTINE TO WRITE TIMES SERIES DATA TO THE PROCESSED DATA BASE.
C
C  ARGUMENT LIST:
C
C      NAME       TYPE  I/O   DIM   DESCRIPTION
C      ----       ----  ---   ---   -----------
C      ITSID      A8     I     1    TIME SERIES NAME
C      ITYPE      A4     I     1    DATA TYPE
C      JHOUR      I      I     1    JULIAN HOUR OF FIRST TIME PERIOD
C      ITSTEP     I      I     1    TIME STEP
C      NUM        I      I     1    NUMBER OF TIME STEPS
C      IUNITS     A4     I     1    UNITS OF DATA
C      NVALS      I      I     1    NUMBER OF VALUES
C      LTSDAT     I      I     1    DIMENSION OF TSDAT
C      TSDAT      R      I   LTSDAT DATA ARRAY
C      IFPTR      I      I     1    HOUR OF FIRST TIME PERIOD WITH
C                                   FUTURE DATA
C      ICALL      I      I     1    CALLING ROUTINE INDICATOR
C                                     0=PREPROCESSOR FUNCTION
C                                     1=FORECAST COMPONENT
C                                     2=OTHER
C      LIWORK     I      I     1    DIMENSION OF IWORK
C      IWORK      I     I/O  LIWORK WORK ARRAY
C      IREC       I     I/O    1    INPUT=RECORD NUMBER OF TIME SERIES
C                                         OR ZERO
C                                   OUTPUT=RECORD NUMBER OF NEXT TIME
C                                          SERIES OF SAME DATA TYPE
C      ISTAT      I      O     1    STATUS INDICATOR:
C                                     0=NORMAL RETURN
C                                     1=TIME SERIES NOT FOUND
C                                     2=NUM TO BIG (TRUNCATED)
C                                     3=TIME STEP DIFFERENT
C                                     4=INVALID WRITE BY CALLING
C                                        ROUTINE
C                                     5=FILE READ/WRITE ERROR
C                                     6=DIFFERENT NUMBER OF VALUES PER
C                                       DATA TIME INTERVAL
C                                     7=MINDAY ERROR-DATA TRUNCATED
C                                         OR NOT WRITTEN TO PRESERVE
C                                         MINIMUM DAYS OF DATA
C                                     8=NUM OR NVAL=0
C                                     9=INVALID UNITS CONVERSION
C                                    10=ARRAY IWORK TOO SMALL
C                                    11=INVALID HOUR
C                                    12=ARRAY TSDAT TOO SMALL
C
      INCLUDE 'uio'
      INCLUDE 'udebug'
      INCLUDE 'ucommon/uordrx'
      INCLUDE 'hclcommon/hdflts'
      INCLUDE 'prdcommon/pdatas'
      INCLUDE 'prdcommon/ptsctl'
      INCLUDE 'prdcommon/pdftbl'
      INCLUDE 'prdcommon/ptsicb'
      INCLUDE 'prdcommon/punits'
      INCLUDE 'prdcommon/pmaxdm'
      INCLUDE 'prdcommon/prdqpf'
      INCLUDE 'urcommon/urftbl'
      INCLUDE 'urcommon/urprd'
      INCLUDE 'urcommon/urtscl'
      INCLUDE 'urcommon/urmaxm'
      INCLUDE 'urcommon/urunts'
C
C
      INTEGER     JTYPE
      CHARACTER*4 JCTYPE, ITYPE
      EQUIVALENCE ( JTYPE,JCTYPE )

      INTEGER     JUNITS
      CHARACTER*4 JCUNIT, IUNITS
      EQUIVALENCE ( JUNITS,JCUNIT )
C
      CHARACTER*8 ITSID
      DIMENSION TSDAT(LTSDAT),IWORK(LIWORK)
      DIMENSION IXBUF(4)
C
C    ================================= RCS keyword statements ==========
      CHARACTER*68     RCSKW1,RCSKW2
      DATA             RCSKW1,RCSKW2 /                                 '
     .$Source: /fs/hseb/ob72/rfc/ofs/src/db_prdrw/RCS/wprdd.f,v $
     . $',                                                             '
     .$Id: wprdd.f,v 1.5 2004/12/02 20:33:34 dsa Exp $
     . $' /
C    ===================================================================
C
      INCLUDE 'prdcommon/desctshd'
C
C
      IF (IPRTR.GT.0) WRITE (IOGDB,530)
C
      JCTYPE = ITYPE
      JCUNIT = IUNITS
C
      IF (IPRDB.GT.0) THEN
         WRITE (IOGDB,*)
     *      ' ITSID=',ITSID,
     *      ' ITYPE=',ITYPE,
     *      ' IUNITS=',JCUNIT,
     *      ' JHOUR=',JHOUR,
     *      ' ITSTEP=',ITSTEP
         WRITE (IOGDB,*)
     *      ' NUM=',NUM,
     *      ' NVALS=',NVALS,
     *      ' IFPTR=',IFPTR,
     *      ' ICALL=',ICALL,
     *      ' LIWORK=',LIWORK,
     *      ' IREC=',IREC
         ENDIF
C
      ISTAT=0
C      
      MORE=0
      NVAL=NVALS
      IFPTRR=IFPTR
      ICVFLG=0
C
C  CHECK FOR VALID DATA TYPE
      CALL PFDTYP (JTYPE,INDXD)
      IF (INDXD.EQ.0) GO TO 100
      IF (IAMORD.EQ.0) LUNIT=DATFIL(2,INDXD)
      IF (IAMORD.EQ.1) LUNIT=IDATFL(2,INDXD)-KUPRDO
C
C  CHECK FOR VALID HOUR
      IF (JHOUR.LE.0) GO TO 190
C
C  CHECK IF HOUR VALID FOR THIS TYPE
      IF (IAMORD.EQ.0) THEN
         IF (DATFIL(7,INDXD).EQ.0) GO TO 20
         IF (DATFIL(7,INDXD).GT.0.AND.IFPTRR.NE.0) GO TO 190
         IF (DATFIL(7,INDXD).LT.0.AND.IFPTRR.NE.JHOUR) GO TO 190
         ELSE
            IF (IDATFL(7,INDXD).EQ.0) GO TO 20
            IF (IDATFL(7,INDXD).GT.0.AND.IFPTRR.NE.0) GO TO 190
            IF (IDATFL(7,INDXD).LT.0.AND.IFPTRR.NE.JHOUR) GO TO 190
         ENDIF
C
C  CHECK IF CALLING ROUTINE CAN NOT WRITE THIS DATA TYPE
20    IF (IAMORD.EQ.0.AND.ICALL.EQ.DATFIL(11,INDXD)) GO TO 40
      IF (IAMORD.EQ.1.AND.ICALL.EQ.IDATFL(11,INDXD)) GO TO 40
         ISTAT=4
         IF (IPRDB.GT.0) WRITE (LP,570) ITSID,ITYPE
         GO TO 520
C
C          - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C
C  CHECK IF RECORD NUMBER SPECIFIED
40    IF (IREC.LE.0) GO TO 60
C
C  CHECK FOR VALID RECORD NUMBER
      CALL PRGTIX (LUNIT,IPOS,IERR)
      IF (IPRDB.GT.0) WRITE (IOGDB,*)
     *   ' IAMORD=',IAMORD,
     *   ' IREC=',IREC,
     *   ' LUNIT=',LUNIT,
     *   ' IPOS=',IPOS,
     *   ' TSCNTR(3,IPOS)=',TSCNTR(3,IPOS),
     *   ' ITSCNT(3,IPOS)=',ITSCNT(3,IPOS)
      IF (IAMORD.EQ.0.AND.IREC.LT.TSCNTR(3,IPOS)) GO TO 50
      IF (IAMORD.EQ.1.AND.IREC.LT.ITSCNT(3,IPOS)) GO TO 50
         WRITE (LP,560) IREC,ITYPE,ITSID
         GO TO 60
50    ISTRT=IREC
      GO TO 70
C
60    IF (IAMORD.EQ.1) GO TO 80
C
C  GET RECORD NUMBER OF NEXT TIME SERIES OF SAME TYPE FROM INCORE BUFFER
      CALL PGTSIL (JTYPE,IDXPT)
      IF (IDXPT.EQ.0) GO TO 80
      ISTRT=TSICBU(IDXPT+16)
      IF (ISTRT.EQ.0) GO TO 80
C
C  GET TIME SERIES
70    CALL RTSRCD (ISTRT,ITSID,JTYPE,LUNIT,LIWORK,IWORK,ISTAT)
      IF (ISTAT.EQ.2) GO TO 80
      IF (ISTAT.NE.0.AND.IREC.NE.0) GO TO 80
      IF (ISTAT.EQ.1) ISTAT=10
      IF (ISTAT.NE.0) GO TO 520
C
C  CHECK IF THIS IS REQUESTED TIME SERIES
      CALL UNAMCP (ITSID,IWORK(8),IMATCH)
      IF (IMATCH.EQ.0) GO TO 110
C
C  CHECK IF TIME SERIES DEFINED
80    CALL PSERCH (ITSID,JTYPE,IFREE,IXREC,IXBUF)
      IF (IXREC.EQ.0) GO TO 100
C
C  TIME SERIES FOUND
      ISTRT=IXBUF(4)
C
C  READ TIME SERIES
      CALL RTSRCD (ISTRT,ITSID,JTYPE,LUNIT,LIWORK,IWORK,ISTAT)
      IF (ISTAT.NE.2) GO TO 90
         WRITE (LP,590) ITSID,ITYPE,ISTRT
         ISTAT=1
         GO TO 520
90    IF (ISTAT.EQ.1) ISTAT=10
      IF (ISTAT.NE.0) GO TO 520
C
C  CHECK IF THIS IS REQUESTED TIME SERIES
      CALL UNAMCP (ITSID,IWORK(8),IMATCH)
      IF (IMATCH.EQ.0) GO TO 110
C
C  TIME SERIES NOT FOUND
100   IF (IPRDB.GT.0) WRITE (LP,600) ITYPE,ITSID
      ISTAT=1
      GO TO 520
C
C          - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C
C  CHECK DATA TIME INTERVAL
110   IF (ITSTEP.EQ.IWORK(2)) GO TO 120
         ISTAT=3
         IF (IPRDB.GT.0) WRITE (LP,610) ITSID,ITYPE,IWORK(2)
         GO TO 520
C
C  CHECK FOR VALID STARTING HOUR
120   IREM=JHOUR-NHOPDB
      IMOD=MOD(IREM,ITSTEP)
      IF (IMOD.EQ.0) GO TO 130
         ISTAT=11
         IF (IPRDB.GT.0) WRITE (LP,620) ITSID,ITYPE
         GO TO 520
C
C  CHECK IF NEED TO CONVERT DATA
130   IF (JUNITS.EQ.IWORK(11)) GO TO 140
         ICVFLG=1
         CALL UDUCNN (1,ZAPR,IERR)
         CALL UDUCNV (IUNITS,IWORK(11),2,1,CFACT1,CFACT2,IERR)
         IF (IERR.EQ.0) GO TO 140
         ISTAT=9
         GO TO 520
C
C  CHECK FOR SAME NUMBER OF VALUES PER DATA TIME INTERVAL
140   IF (NUM.EQ.0.OR.NVAL.EQ.0) GO TO 150
         IF (NVAL/NUM.EQ.IWORK(3)) GO TO 160
            ISTAT=6
            IF (IPRDB.GT.0) WRITE (LP,630) ITSID,ITYPE
            GO TO 520
150      ISTAT=8
         IF (IPRDB.GT.0) WRITE (LP,640) ITSID,ITYPE
         GO TO 520
C
C  CHECK IF NUMBER OF VALUES TO BE WRITTEN EXCEEDS MAXIMUM
160   IF (IWORK(4).GE.NVAL) GO TO 170
         NVAL=IWORK(4)
         ISTAT=2
         WRITE (LP,650) NVAL,ITSID,ITYPE
C
C  DESCRIPTION OF VARIABLES USED FOR PROCESSING:
C    VARIABLE   DESCRIPTION
C    --------   -----------
C    ISJHRF     JULIAN HOUR OF FIRST DATA VALUE ON FILE
C    IEJHRF     JULIAN HOUR OF LAST DATA VALUE ON FILE
C    ISJHRW     JULIAN HOUR OF FIRST DATA VALUE TO BE WRITTEN
C    IEJHRW     JULIAN HOUR OF LAST DATA VALUE TO BE WRITTEN
C    NWDS       TOTAL LENGTH OF HEADER AND TIME SERIES DATA (WORDS)
C    IROOM      NUMBER OF UNUSED WORDS AT END OF TIME SERIES DATA
C    NCFWDS     NUMBER OF NON-FUTURE DATA VALUES ON FILE
C    IFWDS      NUMBER OF NON-FUTURE DATA VALUES TO BE WRITTEN
C    ILJHRF     JULIAN HOUR OF LAST NON-FUTURE DATA VALUE ON FILE
C    IFRSTW     WORD LOCATION WHERE FIRST DATA VALUE WILL BE WRITTEN
C    IEND       WORD LOCATION OF LAST DATA ITEM ON FILE
C
170   IF (ICALL.EQ.1) IWORK(15)=IRDQPF
      ISJHRF=IWORK(14)
      IEJHRF=ISJHRF+(IWORK(5)-1)*IWORK(2)
      ISJHRW=JHOUR
      IEJHRW=ISJHRW+(NUM-1)*ITSTEP
      NWDS=IWORK(4)+IWORK(1)
      IROOM=IWORK(4)-IWORK(5)*IWORK(3)
      IFWDS=(IFPTRR-ISJHRW)*IWORK(3)/ITSTEP
      IF (IFPTRR.EQ.0) IFWDS=0
      NCFWDS=IWORK(7)-IWORK(6)
      ILJHRF=ISJHRF+NCFWDS/IWORK(3)*ITSTEP
      IF (NCFWDS.LT.0) ILJHRF=0
      IFRSTW=(ISJHRW-ISJHRF)*IWORK(3)/ITSTEP+IWORK(6)
      IEND=IWORK(5)*IWORK(3)+IWORK(1)
C
C  CHECK POINTERS
      IF (IFPTRR.EQ.0) GO TO 200
      IF (IFPTRR.LE.IEJHRW.AND.IFPTRR.GE.JHOUR) GO TO 200
C 
C  INVALID HOUR     
190   IF (IPRDB.GT.0) WRITE (LP,660)
      ISTAT=11
      GO TO 520
C
C  CHECK IF ANY DATA VALUES
200   IF (IWORK(5).EQ.0) GO TO 300
C
C  CHECK IF ONLY HAVE FUTURE DATA IN FILE
      IF (IWORK(6).EQ.IWORK(7)) GO TO 230
C
C  CHECK IF WRITING ANY FUTURE DATA
      IF (IFPTRR.EQ.0) GO TO 230
C
C  SET MINIMUM NUMBER OF DAYS OF DATA TO BE RETAINED      
      IF (IAMORD.EQ.0) MINHR=MINDAY*24
      IF (IAMORD.EQ.1) MINHR=MNDAYS*24
C
C  CHECK IF NUMBER OF DATA VALUES IS LESS THAN NUMBER TO BE RETAINED
      ICHK=MINDAY*24/IWORK(2)
      IF (IWORK(5).LT.ICHK) GO TO 230
C      
C  CHECK MINIMUM NUMBER OF DAYS OF DATA TO BE RETAINED
      ICHK=IFPTRR-ISJHRW
      IF (ICHK.GE.MINHR) GO TO 230
C
C  CHECK IF HAVE EARLIER FUTURE POINTER
      IF (IFPTRR.GE.ILJHRF.AND.ILJHRF.NE.0) GO TO 210
      IF (IFPTRR.GT.IEJHRF.AND.ILJHRF.EQ.0) GO TO 210
      ISTT=ISJHRF
      IF (ISJHRF.GT.ISJHRW) ISTT=ISJHRW
CCC      CALL DDGHC2 (IFPTRR,IYR1,IMO1,IDA1,IHR1)
CCC      CALL DDGHC2 (ISTT,IYR2,IMO2,IDA2,IHR2)
      ICHK=IFPTRR-ISTT
      IF (ICHK.GE.MINHR) GO TO 210
         IF (IPRDB.GT.0) WRITE (LP,670) ITYPE,ITSID
         ISTAT=7
         GO TO 520
C
C  CHECK IF HAVE TO TRUNCATE TO PRESERVE MINIMUM DAYS OF DATA
210   IF ((IEJHRW-ISJHRF+ITSTEP)/ITSTEP*IWORK(3).LE.IWORK(4))
     *   GO TO 230
      IPOINT=IFPTRR-MINHR
      IF (IFPTRR.NE.JHOUR) GO TO 220
      IF (IFPTRR.LE.IEJHRF+ITSTEP.AND.ILJHRF.EQ.0) GO TO 220
      IF (IFPTRR.LE.ILJHRF.AND.ILJHRF.NE.0) GO TO 220
      IF (ILJHRF.EQ.0) ILJHRF=IEJHRF+ITSTEP
      IPOINT=ILJHRF-MINHR
      IF (IWORK(7).EQ.0) IWORK(7)=IEND+1
C
220   IF (IPOINT.LT.ISJHRF) IPOINT=ISJHRF
      ITERA=IPOINT+IWORK(4)/IWORK(3)*ITSTEP-ITSTEP
      IF (ITERA.GE.IEJHRW) GO TO 230
         NVAL=NVAL-(IEJHRW-ITERA)/ITSTEP*IWORK(3)
         IEJHRW=ITERA
         WRITE (LP,680) NVAL,ITSID,ITYPE
         ISTAT=2
         IF (NVAL.LE.0) GO TO 150
         IF (IEJHRW.GE.IFPTRR) GO TO 230
         IFPTRR=0
         IFWDS=0
C
C  MAKE CHECKS FOR FUTURE POINTERS
230   IF (IFPTRR.EQ.0) GO TO 270
      IF (IFPTRR.GT.IEJHRF.AND.ILJHRF.EQ.0) ILJHRF=IEJHRF+ITSTEP
      IF (IFPTRR.GT.IEJHRF.AND.IWORK(7).EQ.0) IWORK(7)=IEND+1
      IF (ISJHRF.GE.ISJHRW) GO TO 260
      IF (IEJHRF.LE.IEJHRW) GO TO 240
C
C  WIPE OUT ANYTHING AFTER NEW DATA
      IEJHRF=IEJHRW
      IF (ILJHRF.LT.IEJHRF) GO TO 240
         ILJHRF=0
         IWORK(7)=0
240   IF (ILJHRF.EQ.0.OR.ILJHRF.GE.ISJHRW) GO TO 300
      IF (IFPTRR.EQ.ISJHRW.AND.IFPTRR.GE.ILJHRF) GO TO 250
C
C  INITIALIZE FUTURE DATA
      NZAPS=(IEJHRF-ILJHRF+ITSTEP)/ITSTEP*IWORK(3)
      K=IWORK(7)
      CALL UMEMST (ZAPR,IWORK(K),NZAPS)
      IEJHRF=ILJHRF-ITSTEP
      ILJHRF=0
      IWORK(7)=0
      GO TO 300
C
C  ONLY REPLACING FUTURE
250   IFPTRR=0
      GO TO 300
C
C  REPLACE ENTIRE RECORD
260   IWORK(5)=0
      GO TO 300
C
C  NOT ADDING FUTURE DATA
270   IF (ILJHRF.EQ.0.OR.ILJHRF.GT.IEJHRW) GO TO 300
      IF (ILJHRF.GE.ISJHRW) GO TO 280
C
C  ZAP OUT OLD FUTURE DATA
      MEND=IEJHRF
      IF (IEJHRF.GT.IEJHRW) MEND=IEJHRW
      NZAPS=(MEND-ILJHRF+ITSTEP)/ITSTEP*IWORK(3)
      K=IWORK(7)
      CALL UMEMST (ZAPR,IWORK(K),NZAPS)
C
280   IF (IEJHRF.GT.IEJHRW) GO TO 290
         ILJHRF=0
         IWORK(7)=0
         GO TO 300
290   IWORK(7)=IFRSTW+NVAL
      ILJHRF=IEJHRW+ITSTEP
C
C          - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C
300   IF (IPRDB.GT.0) WRITE (IOGDB,*) 
     *   ' ISJHRF=',ISJHRF,
     *   ' IEJHRF=',IEJHRF,
     *   ' ISJHRW=',ISJHRW,
     *   ' IEJHRW=',IEJHRW,
     *   ' NWDS=',NWDS,
     *   ' IROOM=',IROOM,
     *   ' IFWDS=',IFWDS,
     *   ' IFRSTW=',IFRSTW,
     *   ' IEND=',IEND
C
C  CHECK WHAT NEED TO DO BEFORE WRITING DATA
      IF (IWORK(5).EQ.0) GO TO 310
      IF (ISJHRW.GE.ISJHRF.AND.IEJHRW.LE.IEJHRF) GO TO 320
      IF (ISJHRW.GT.IEJHRF.AND.IROOM.GE.NVAL) GO TO 350
      IF (IEJHRW.LT.ISJHRF.AND.IROOM.GE.NVAL) GO TO 360
      IF (ISJHRW.GE.ISJHRF.AND.IEJHRW.GT.IEJHRF) GO TO 330
      IF (ISJHRW.LE.ISJHRF.AND.IEJHRW.GE.IEJHRF) GO TO 310
      IF (ISJHRW.LT.ISJHRF.AND.IEJHRW.LE.IEJHRF) GO TO 340
      IF (ISJHRW.LT.ISJHRF) GO TO 380
      IF (ISJHRW.GT.ISJHRF) GO TO 420
      IF (IPRDB.GT.0) WRITE (LP,700) ITSID,ITYPE
      GO TO 510
C
C  NO DATA CURRENTLY ON FILE
C    OR
C  START OF DATA TO BE WRITTEN IS AT OR BEFORE START OF DATA ON
C  FILE AND END OF DATA TO BE WRITTEN IS AT OR AFTER END OF DATA
C  ON FILE
310   IFRSTW=IWORK(1)+1
      CALL UMEMOV (TSDAT,IWORK(IFRSTW),NVAL)
      IF (ICVFLG.EQ.1) THEN
         CALL UDUCNV (IUNITS,IWORK(11),1,NVAL,
     *      IWORK(IFRSTW),IWORK(IFRSTW),IERR)
         ENDIF
      IWORK(5)=NVAL/IWORK(3)
      IWORK(6)=IFRSTW
      IWORK(14)=JHOUR
      IWORK(7)=IFRSTW+IFWDS
      IF (IFPTRR.EQ.0) IWORK(7)=0
      GO TO 500
C
C  DATA TO BE WRITTEN IS WITHIN PERIOD CURRENTLY ON FILE
320   CALL UMEMOV (TSDAT,IWORK(IFRSTW),NVAL)
      IF (ICVFLG.EQ.1) THEN
         CALL UDUCNV (IUNITS,IWORK(11),1,NVAL,
     *      IWORK(IFRSTW),IWORK(IFRSTW),IERR)
         ENDIF
      IWORK(5)=(IEJHRF-ISJHRF+ITSTEP)/ITSTEP
      IF (MORE.EQ.1) IWORK(5)=ISPACE/IWORK(3)
      IF (IFPTRR.EQ.0) GO TO 500
      IWORK(7)=IFRSTW+IFWDS
      GO TO 500
C
C  START OF DATA TO BE WRITTEN IS AT OR AFTER START OF DATA ON FILE
C  AND END OF DATA TO BE WRITTEN IS AFTER END OF DATA ON FILE
330   ISPACE=(IEJHRW-ISJHRF+ITSTEP)*IWORK(3)/ITSTEP
      IF (ISPACE.GT.IWORK(4)) GO TO 420
      MORE=1
      GO TO 320
C
C  START OF DATA TO BE WRITTEN IS BEFORE START OF DATA ON FILE AND
C  AND END OF DATA TO BE WRITTEN IS AT OR BEFORE END OF DATA ON FILE
340   ISPACE=(IEJHRF-ISJHRW+ITSTEP)*IWORK(3)/ITSTEP
      IF (ISPACE.GT.IWORK(4)) GO TO 380
      K=(ISJHRF-ISJHRW)/ITSTEP*IWORK(3)
      IFRSTW=NWDS-K+1
      CALL UMEMOV (TSDAT,IWORK(IFRSTW),K)
      IF (ICVFLG.EQ.1) THEN
         CALL UDUCNV (IUNITS,IWORK(11),1,K,
     *      IWORK(IFRSTW),IWORK(IFRSTW),IERR)
         ENDIF
      L=IWORK(1)+1
      J=NVAL-K
      K=K+1
      IF (LTSDAT.GT.0.AND.K.GT.LTSDAT) GO TO 515
      CALL UMEMOV (TSDAT(K),IWORK(L),J)
      IF (ICVFLG.EQ.1) THEN
         CALL UDUCNV (IUNITS,IWORK(11),1,J,
     *      IWORK(L),IWORK(L),IERR)
         ENDIF
      IWORK(6)=IFRSTW
      IWORK(14)=JHOUR
      IWORK(5)=ISPACE/IWORK(3)
      IF (ILJHRF.EQ.0) GO TO 500
      IF (ILJHRF.LE.IEJHRW+ITSTEP) IWORK(7)=IWORK(1)+1+NVAL
      IF (ILJHRF.GT.IEJHRW+ITSTEP) THEN
         IWORK(7)=(ILJHRF-ISJHRW)/ITSTEP*IWORK(3)+IWORK(1)+1
         ENDIF
      GO TO 500
C
C  DATA TO BE WRITTEN STARTS AFTER END OF DATA ON FILE AND THERE IS
C  ROOM FOR ALL NEW DATA
350   IF ((IEJHRW-ISJHRF+ITSTEP)/ITSTEP*IWORK(3).GT.IWORK(4))
     *   GO TO 420
      IEND=IEND+1
      NZAPS=IFRSTW-IEND
      CALL UMEMST (ZAPR,IWORK(IEND),NZAPS)
      CALL UMEMOV (TSDAT,IWORK(IFRSTW),NVAL)
      IF (ICVFLG.EQ.1) THEN
         CALL UDUCNV (IUNITS,IWORK(11),1,NVAL,
     *      IWORK(IFRSTW),IWORK(IFRSTW),IERR)
         ENDIF
      IWORK(5)=(IEJHRW-ISJHRF+ITSTEP)/ITSTEP
      IF (IFPTRR.EQ.0) GO TO 500
      IWORK(7)=IFRSTW+IFWDS
      GO TO 500
C
C  START OF DATA TO BE WRITTEN ENDS BEFORE DATA ON FILE AND THERE IS
C  ROOM FOR ALL NEW DATA
360   IF ((IEJHRF-ISJHRW+ITSTEP)/ITSTEP*IWORK(3).GT.IWORK(4))
     *   GO TO 380
      NZAPS=(ISJHRF-IEJHRW-ITSTEP)*IWORK(3)/ITSTEP
      IF (NZAPS.EQ.0) GO TO 370
         IFRSTW=NWDS-NZAPS+1
         CALL UMEMST (ZAPR,IWORK(IFRSTW),NZAPS)
370   IFRSTW=NWDS-NVAL+1-NZAPS
      CALL UMEMOV (TSDAT,IWORK(IFRSTW),NVAL)
      IF (ICVFLG.EQ.1) THEN
         CALL UDUCNV (IUNITS,IWORK(11),1,NVAL,
     *      IWORK(IFRSTW),IWORK(IFRSTW),IERR)
         ENDIF
C
      IWORK(6)=IFRSTW
      IWORK(5)=(IEJHRF-ISJHRW+ITSTEP)/ITSTEP
      IWORK(14)=ISJHRW
      IF (ILJHRF.EQ.0) GO TO 500
      IWORK(7)=(ILJHRF-ISJHRW)/ITSTEP*IWORK(3)+IWORK(1)+1
      GO TO 500
C
C  START OF DATA TO BE WRITTEN IS BEFORE START OF DATA ON FILE
380   NZAPS=(ISJHRF-IEJHRW-ITSTEP)*IWORK(3)/ITSTEP
      IF (NZAPS.EQ.0) GO TO 390
         IF (NZAPS.LT.0) GO TO 400
         IF (NVAL+NZAPS.GE.IWORK(4)) GO TO 310
         IFRSTW=NWDS-NZAPS+1
         CALL UMEMST (ZAPR,IWORK(IFRSTW),NZAPS)
390   IFRSTW=NWDS-NVAL-NZAPS+1
      CALL UMEMOV (TSDAT,IWORK(IFRSTW),NVAL)
      IF (ICVFLG.EQ.1) THEN
         CALL UDUCNV (IUNITS,IWORK(11),1,NVAL,
     *      IWORK(IFRSTW),IWORK(IFRSTW),IERR)
         ENDIF
      GO TO 410
C
400   IFRSTW=IWORK(1)+1
      K=NVAL+NZAPS+1
      IF (LTSDAT.GT.0.AND.K.GT.LTSDAT) GO TO 515
      CALL UMEMOV (TSDAT(K),IWORK(IFRSTW),-NZAPS)
      IF (ICVFLG.EQ.1) THEN
         CALL UDUCNV (IUNITS,IWORK(11),1,-NZAPS,
     *      IWORK(IFRSTW),IWORK(IFRSTW),IERR)
         ENDIF
      K=NVAL+NZAPS
      IFRSTW=NWDS-K+1
      CALL UMEMOV (TSDAT,IWORK(IFRSTW),K)
      IF (ICVFLG.EQ.1) THEN
         CALL UDUCNV (IUNITS,IWORK(11),1,K,
     *      IWORK(IFRSTW),IWORK(IFRSTW),IERR)
         ENDIF
C
410   IWORK(6)=IFRSTW
      IWORK(5)=IWORK(4)/IWORK(3)
      IWORK(14)=ISJHRW
      IF (ILJHRF.EQ.0) GO TO 500
      IWORK(7)=(ILJHRF-ISJHRW)/ITSTEP*IWORK(3)+IWORK(1)+1
      IF (IWORK(7).GT.NWDS) IWORK(7)=0
      GO TO 500
C
C  START OF DATA TO BE WRITTEN IS AFTER START OF DATA ON FILE
420   IEND=IEND+1
      IF (IFRSTW.LE.IEND) GO TO 450
      NZAPS=IFRSTW-IEND
      IF (NZAPS+NVAL.GE.IWORK(4)) GO TO 310
      IF (NZAPS.GT.IROOM) GO TO 430
         CALL UMEMST (ZAPR,IWORK(IEND),NZAPS)
         GO TO 450
430   K=0
      IF (IROOM.EQ.0) GO TO 440
         CALL UMEMST (ZAPR,IWORK(IEND),IROOM)
440   L=IWORK(1)+1
      J=NZAPS-IROOM
      CALL UMEMST (ZAPR,IWORK(L),J)
      IFRSTW=L+J
      CALL UMEMOV (TSDAT,IWORK(IFRSTW),NVAL)
      IF (ICVFLG.EQ.1) THEN
         CALL UDUCNV (IUNITS,IWORK(11),1,NVAL,
     *      IWORK(IFRSTW),IWORK(IFRSTW),IERR)
         ENDIF
      IFRSTW=IFRSTW+NVAL
      GO TO 470
C
450   IF (IFRSTW.GT.NWDS) GO TO 460
      K=NWDS-IFRSTW+1
      CALL UMEMOV (TSDAT,IWORK(IFRSTW),K)
      IF (ICVFLG.EQ.1) THEN
         CALL UDUCNV (IUNITS,IWORK(11),1,K,
     *      IWORK(IFRSTW),IWORK(IFRSTW),IERR)
         ENDIF
      J=NVAL-K
      K=K+1
      L=IWORK(1)+1
      IF (LTSDAT.GT.0.AND.K.GT.LTSDAT) GO TO 515
      CALL UMEMOV (TSDAT(K),IWORK(L),J)
      IF (ICVFLG.EQ.1) THEN
         CALL UDUCNV (IUNITS,IWORK(11),1,J,
     *      IWORK(L),IWORK(L),IERR)
         ENDIF
      IFRSTW=L+J
      GO TO 470
C
460   IFRSTW=IWORK(1)+1
      CALL UMEMOV (TSDAT,IWORK(IFRSTW),NVAL)
      IF (ICVFLG.EQ.1) THEN
         CALL UDUCNV (IUNITS,IWORK(11),1,NVAL,
     *      IWORK(IFRSTW),IWORK(IFRSTW),IERR)
         ENDIF
      IFRSTW=IFRSTW+NVAL
C
470   IWORK(6)=IFRSTW
      IWORK(14)=IWORK(14)+(IFRSTW-IWORK(1)-1)/IWORK(3)*ITSTEP
      IWORK(5)=IWORK(4)/IWORK(3)
      IF (ILJHRF.EQ.0.AND.IFPTRR.EQ.0) GO TO 490
      IF (IFPTRR.EQ.0) GO TO 480
         IWORK(7)=NWDS-((IEJHRW-IFPTRR+ITSTEP)/ITSTEP*IWORK(3))+1
         IF (IWORK(7).LE.IWORK(1)) IWORK(7)=IWORK(1)+1
         GO TO 500
480   IWORK(7)=NWDS-((IEJHRW-ILJHRF+ITSTEP)/ITSTEP*IWORK(3))+1
      IF (IWORK(7).LE.IWORK(1)) IWORK(7)=IWORK(1)+1
      GO TO 500
C
490   IWORK(7)=0
C
C          - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C
C  WRITE TIME SERIES
500   IF (IPRDB.GT.0) WRITE (IOGDB,710)
      IF (IAMORD.EQ.0.AND.DATFIL(7,INDXD).LT.0) IWORK(7)=IWORK(1)+1
      IF (IAMORD.EQ.1.AND.IDATFL(7,INDXD).LT.0) IWORK(7)=IWORK(1)+1
C
C  SET POINTER TO NEXT TIME SERIES OF SAME TYPE
      IREC=IWORK(17)
      CALL WTSRCD (ISTRT,LUNIT,IWORK,IERR)
      IF (IERR.NE.0) GO TO 510
      CALL RTSRCD (ISTRT,ITSID,JTYPE,LUNIT,LIWORK,IWORK,IERR)
      IF (IERR.NE.0) GO TO 510
C
      IF (IAMORD.EQ.1) GO TO 520
C
C  PUT TIME SERIES IN INCORE BUFFER
      IFREC=0
      IF (IAMORD.EQ.0.AND.DATFIL(7,INDXD).LT.0) IFREC=ISTRT
      IF (IAMORD.EQ.1.AND.IDATFL(7,INDXD).LT.0) IFREC=ISTRT
      CALL PPTSIC (IWORK,NWDS,IFREC,IERR)
      GO TO 520
C
C  SYSTEM ERROR
510   IF (IPRDB.GT.0) WRITE (LP,720) ITSID,ITYPE
      ISTAT=5
      GO TO 520
C
C  TSDAT ARRAY TOO SMALL
515   IF (IPRDB.GT.0) WRITE (IOGDB,725) ITSID,IXTYPE
      ISTAT=12
      GO TO 520
C
520   IF (IPRDB.GT.0) WRITE (IOGDB,730) ISTAT
C
C- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C
530   FORMAT (' ENTER WPRDD')
560   FORMAT ('0**WARNING** IN WPRDD - ',I6,' IS AN INVALID RECORD ',
     *   'NUMBER FOR ',A,' TIME SERIES FOR IDENTIFIER ',A,'.')
570   FORMAT ('0**ERROR** IN WPRDD - INVALID CALL FOR TIME SERIES ',
     *   A,1X,A,'.')
590   FORMAT ('0**ERROR** IN WPRDD - TIME SERIES ',A,1X,A,
     *   ' NOT FOUND AT RECORD ',I6,' EVEN THOUGH INDEX POINTS HERE.')
600   FORMAT ('0**ERROR** IN WPRDD - ',A,' TIME SERIES NOT FOUND ',
     *   ' FOR IDENTIFIER ',A,'.')
610   FORMAT ('0**ERROR** IN WPRDD - WRONG TIME STEP FOR TIME SERIES ',
     *   A,1X,A,' TIME STEP IS ',I2,'.')
620   FORMAT ('0**ERROR** IN WPRDD - STARTING HOUR NOT A VALID TIME ',
     *   'PERIOD FOR TIME SERIES ',A,1X,A,'.')
630   FORMAT ('0**ERROR** IN WPRDD - VALUES PER DATA TIME INTERVAL ',
     *   'FOR TIME SERIES ',A,1X,A,'.')
640   FORMAT ('0**ERROR** IN WPRDD - NUMBER OF VALUES IS ZERO ',
     *   'FOR TIME SERIES ',A,1X,A,'.')
650   FORMAT ('0**WARNING** IN WPRDD - NUMBER OF VALUES TRUNCATED TO ',
     *   I4,' FOR TIME SERIES ',A,1X,A,'.')
660   FORMAT ('0**ERROR** IN WPRDD - INVALID JULIAN HOUR OR ',
     *   'FUTURE HOUR.')
670   FORMAT ('0**ERROR** IN WPRDD - ',A,' DATA FOR IDENTIFIER ',A,
     *   ' NOT WRITTEN BECAUSE MINIMUM DAYS OF DATA CAN NOT BE KEPT.')
680   FORMAT ('0**WARNING** IN WPRDD - NUMBER OF VALUES TRUNCATED TO ',
     *   I4,' FOR TIME SERIES ',A,1X,A,' TO PRESERVE MINIMUM DAYS ',
     *   'OF DATA.')
700   FORMAT ('0**ERROR** IN WPRDD - MAKING CHECK BEFORE WRITING DATA ',
     *   'FOR TIME SERIES ',A,1X,A,'. RECORD NOT WRITEDN.')
710   FORMAT (' WPRDD READY TO WRITE')
720   FORMAT ('0**ERROR** IN WPRDD - UNABLE TO WRITE TIME SERIES ',
     *   A,1X,A,'.')
725   FORMAT ('0**ERROR** IN RPRDDT - TSDAT ARRAY TOO SMALL FOR ',
     *   'TIME SERIES ',A,1X,A,'.')
730   FORMAT (' EXIT WPRDD : ISTAT=',I2)
C
      RETURN
C
      END
