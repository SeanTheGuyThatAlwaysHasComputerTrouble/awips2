C MODULE WPRDH
C-----------------------------------------------------------------------
C
      SUBROUTINE WPRDH (TSID,DTYPE,ITSTEP,DUNITS,NVALX,RLOCT,FTSID,
     *   DESCRP,LXBUF,XBUF,LWKBUF,IWKBUF,IRECNO,ISTAT)
C
C   THIS ROUTINE CREATES TIME SERIES IN THE PROCESSED DATA BASE.
C
C   ARGUMENT LIST:
C
C       NAME     TYPE  I/O   DIM     DESCRIPTION
C       ------   ----  ---   ---     -----------
C       TSID      A8    I     2      TIMES SERIES IDENTIFIER
C       DTYPE     A4    I     1      DATA TYPE
C       ITSTEP     I    I     1      DATA TIME INTERVAL
C       DUNITS    A4    I     1      UNITS OF DATA
C       NVALX      I    I     1      NUMBER OF VALUES PER TIME INTERVAL
C       RLOCT      R    I     2      LATITUDE AND LONGITUDE
C       FTSID     A8    I     2      FUTURE TIME SERIES IDENTIFIER
C       DESCRP    A20   I     5      DESCRIPTION
C       LXBUF      I    I     1      NUMBER OF WORDS IN XBUF
C       XBUF       R    I   LXBUF    EXTRA BUFFER
C       LWKBUF     I    I     1      DIMENSION OF WORK BUFFER
C       IWKBUF     I    IO  LWKBUF   WORK ARRAY TO HOLD TIME SERIES
C       IRECNO     I    O     1      RECORD NUMBER OF TIMES SERIES
C                                      HEADER RECORD
C       ISTAT      I    O     1      STATUS CODE:
C                                      0=NORMAL RETURN
C                                      1=FILE IS FULL
C                                      2=TIME SERIES EXISTS
C                                      3=INVALID TIME INTERVAL
C                                      4=INVALID TYPE
C                                      5=INVALID UNITS
C                                      6=READ OR WRITE ERROR
C                                      7=DATA LONGER THAN MAXIMUM
C                                      8=MISSING FUTURE OR SHOULDNT HAVE
C                                      9=FUTURE DOES NOT EXIST
C                                      10=INVALID NVAL
C                                      11=BLANK ID OR ID IS 'END'
C                                      12=INVALID LATITUDE/LONGITUDE
C
      CHARACTER*4 DTYPE,DUNITS
      CHARACTER*8 TSID,FTSID
      CHARACTER*20 DESCRP
C
      DIMENSION XBUF(LXBUF),IWKBUF(LWKBUF)
      DIMENSION IHEAD(22)
      DIMENSION RLOCT(2)
      DIMENSION IOLDRC(16)
      DIMENSION IXBUF(4)
C
      INCLUDE 'uiox'
      INCLUDE 'udebug'
      INCLUDE 'prdcommon/ptsctl'
      INCLUDE 'prdcommon/pdftbl'
      INCLUDE 'prdcommon/pmaxdm'
      INCLUDE 'prdcommon/pdatas'
      INCLUDE 'prdcommon/punits'
      INCLUDE 'ucommon/uppint'
      INCLUDE 'ucommon/uordrx'
      INCLUDE 'urcommon/urtscl'
      INCLUDE 'urcommon/urftbl'
      INCLUDE 'urcommon/urmaxm'
      INCLUDE 'urcommon/urprd'
      INCLUDE 'urcommon/urunts'
C
C    ================================= RCS keyword statements ==========
      CHARACTER*68     RCSKW1,RCSKW2
      DATA             RCSKW1,RCSKW2 /                                 '
     .$Source: /fs/hseb/ob72/rfc/ofs/src/db_prdrw/RCS/wprdh.f,v $
     . $',                                                             '
     .$Id: wprdh.f,v 1.2 2003/08/04 20:53:17 dws Exp $
     . $' /
C    ===================================================================
C
C
      IF (IPRTR.GT.0) WRITE (IOGDB,*) 'ENTER WPRDH - TSID=',TSID,
     *   ' DTYPE=',DTYPE
C
      IRECNO=0
C
C  CHECK IDENTIFIER
      IF (TSID.EQ.' ') GO TO 130
      IF (TSID.EQ.'END') GO TO 130
C
C  CHECK IF ID AND TYPE FOUND
      CALL PSERCH (TSID,DTYPE,IFREE,IFOUND,IXBUF)
      IF (IFOUND.NE.0) GO TO 140
C
C  NOT FOUND IN INDEX - CHECK IF FOUND FREE SLOT
      IF (IFREE.EQ.0) GO TO 210
C
C  CHECK DATA TYPE
      CALL PFDTYP (DTYPE,INDEXD)
      IF (INDEXD.EQ.0) GO TO 150
C
C  COMPARE TIME INTERVAL TO SMALLEST ALLOWABLE
      IF (IAMORD.EQ.0) CALL PCKDLT (ITSTEP,DATFIL(5,INDEXD),ISTAT)
      IF (IAMORD.EQ.1) CALL PCKDLT (ITSTEP,IDATFL(5,INDEXD),ISTAT)
      IF (ISTAT.NE.0) GO TO 160
C
C  CHECK UNITS
      IF (IAMORD.EQ.0) IDIM=DATFIL(12,INDEXD)
      IF (IAMORD.EQ.1) IDIM=IDATFL(12,INDEXD)
C
C  CHECK FOR VALID UNITS
      ICONV=2
      NCONV=1
      CALL UDUCNV (DUNITS,DUNITS,ICONV,NCONV,CONV1,CONV2,IERR)
      IF (IERR.GT.0) GO TO 180
C
C  CHECK NUMBER OF VALUES PER TIME INTERVAL
      IF (IAMORD.EQ.0) GO TO 10
         IF (IDATFL(13,INDEXD).EQ.0) GO TO 30
         IF (IDATFL(13,INDEXD).EQ.-1.AND.NVALX.GT.0) GO TO 40
         IF (IDATFL(13,INDEXD).GT.0.AND.NVALX.EQ.0) GO TO 60
         IF (IDATFL(13,INDEXD).GT.0.AND.NVALX.GT.0) GO TO 50
         GO TO 20
10    IF (DATFIL(13,INDEXD).EQ.0) GO TO 30
      IF (DATFIL(13,INDEXD).EQ.-1.AND.NVALX.GT.0) GO TO 40
      IF (DATFIL(13,INDEXD).GT.0.AND.NVALX.EQ.0) GO TO 60
      IF (DATFIL(13,INDEXD).GT.0.AND.NVALX.GT.0) GO TO 50
C
20    IF (IPRDB.GT.0.OR.IPPFLG.EQ.0) WRITE (LP,270) DTYPE
      ISTAT=10
30    NVAL=1
      GO TO 70
40    NVAL=NVALX
      GO TO 70
50    IF (IPRDB.GT.0.OR.IPPFLG.EQ.0) WRITE (LP,280) DTYPE,
     *    DATFIL(13,INDEXD)
C
60    IF (IAMORD.EQ.0) NVAL=DATFIL(13,INDEXD)
      IF (IAMORD.EQ.1) NVAL=IDATFL(13,INDEXD)
C
C  GET UNIT NUMBER
70    IF (IAMORD.EQ.0) LUNIT=DATFIL(2,INDEXD)
      IF (IAMORD.EQ.1) LUNIT=IDATFL(2,INDEXD)-KUPRDO
C
C  CHECK FOR ENOUGH SPACE TO WRITE TIME SERIES
      IF (IAMORD.EQ.0) MAXVAL=DATFIL(4,INDEXD)*(24/ITSTEP)*NVAL
      IF (IAMORD.EQ.1) MAXVAL=IDATFL(4,INDEXD)*(24/ITSTEP)*NVAL
      IF (IAMORD.EQ.0) LHEADC=LENHDC
      IF (IAMORD.EQ.1) LHEADC=LHDRC
      NWORD=MAXVAL+LHEADC+LXBUF
      NREC=(NWORD+LRECLT-1)/LRECLT
      CALL PRGTIX (LUNIT,INDXTS,IERR)
      IF (IAMORD.EQ.0) NEXTRC=TSCNTR(3,INDXTS)
      IF (IAMORD.EQ.1) NEXTRC=ITSCNT(3,INDXTS)
      IF (IAMORD.EQ.0.AND.NEXTRC+NREC-1.GT.TSCNTR(2,INDXTS)) GO TO 200
      IF (IAMORD.EQ.1.AND.NEXTRC+NREC-1.GT.ITSCNT(2,INDXTS)) GO TO 200
C
C  SET VALUES IN TIME SERIES HEADER
      IF (IAMORD.EQ.0) LHEAD=LENHED
      IF (IAMORD.EQ.1) LHEAD=LENHDR
      NH=LHEAD+LXBUF
      CALL UMEMST (0,IHEAD,LHEAD)
      IHEAD(1)=NH
      IHEAD(2)=ITSTEP
      IHEAD(3)=NVAL
      IHEAD(4)=MAXVAL
      IHEAD(6)=NH+1
C
C  CHECK IF TIME SERIES CAN BE LONGER THAN WORK ARRAY
      IF (NH+MAXVAL.GT.LWKBUF) GO TO 190
C
      CALL UMEMOV (TSID,IHEAD(8),2)
      CALL UMEMOV (DTYPE,IHEAD(10),1)
      CALL UMEMOV (DUNITS,IHEAD(11),1)
      IERROR=0
      IF (RLOCT(1).LE.0.0.OR.RLOCT(1).GT.90.0) IERROR=1
      IF (RLOCT(2).LE.0.0.OR.RLOCT(2).GT.180.0) IERROR=1
      IF (IERROR.EQ.1) THEN
         IF (IPRDB.GT.0.OR.IPPFLG.EQ.0) WRITE (LP,430) TSID,DTYPE
         ISTAT=12
         GO TO 250
         ENDIF
      CALL UMEMOV (RLOCT,IHEAD(12),2)
      CALL UMEMOV (DESCRP,IHEAD(18),5)
C
C  CHECK IF FUTURE TIME SERIES ID SPECIFIED
      IF (IAMORD.EQ.0.AND.DATFIL(7,INDEXD).LE.0.AND.FTSID(1:1).EQ.' ')
     *   GO TO 100
      IF (IAMORD.EQ.1.AND.IDATFL(7,INDEXD).LE.0.AND.FTSID(1:1).EQ.' ')
     *   GO TO 100
C
C  CHECK IF ENTERED A FUTURE BUT SHOULD NOT HAVE
      IF (IAMORD.EQ.0.AND.DATFIL(7,INDEXD).LE.0) GO TO 230
      IF (IAMORD.EQ.1.AND.IDATFL(7,INDEXD).LE.0) GO TO 230
C
C  TYPE HAS FUTURE TYPE - CHECK IF FUTURE ID SPECIFIED
      IF (FTSID(1:1).EQ.' ') GO TO 240
      IF (IAMORD.EQ.0) INDEXF=DATFIL(7,INDEXD)
      IF (IAMORD.EQ.1) INDEXF=IDATFL(7,INDEXD)
C
C  CHECK IF FUTURE TIME SERIES EXISTS
      IFTYPE=DATFIL(1,INDEXF)
      IF (IAMORD.EQ.1) IFTYPE=IDATFL(1,INDEXF)
      CALL PGETTS (FTSID,IFTYPE,LWKBUF,IWKBUF,IREC,ISTAT)
      IF (ISTAT.EQ.0) GO TO 80
      IF (IPRDB.GT.0.OR.IPPFLG.EQ.0) WRITE (LP,290) FTSID
      ISTAT=9
      GO TO 250
C
80    IF (IAMORD.EQ.1) GO TO 90
C
C  CHECK TIME INTERVAL FOR EVEN MULTIPLE
      IF (MOD(ITSTEP,IWKBUF(2)).EQ.0) GO TO 90
      IF (IPRDB.GT.0.OR.IPPFLG.EQ.0) WRITE (LP,300) ITSTEP,IWKBUF(2)
      GO TO 170
C
C  IF THIS IS VARIABLE NVAL MUST CHECK TS RECORD
90    IHEAD(15)=IREC
      IF (IAMORD.EQ.1) GO TO 100
      IF (IAMORD.EQ.0.AND.DATFIL(13,INDEXD).NE.-1) GO TO 100
      IF (IAMORD.EQ.1.AND.IDATFL(13,INDEXD).NE.-1) GO TO 100
C
C  CHECK THE FUTURE RECORD FOR NVALS
      IF (IWKBUF(3).EQ.NVAL) GO TO 100
      IF (IPRDB.GT.0.OR.IPPFLG.EQ.0) WRITE (LP,310) IWKBUF(3),NVAL
      ISTAT=8
      GO TO 250
C
C  WRITE TIME SERIES
100   CALL UMEMOV (IHEAD,IWKBUF,LHEAD)
      IF (LXBUF.NE.0) CALL UMEMOV (XBUF,IWKBUF(LHEAD+1),LXBUF)
      CALL UMEMST (ZAPR,IWKBUF(NH+1),MAXVAL)
      CALL WTSRCD (NEXTRC,LUNIT,IWKBUF,ISTAT)
C
C  UPDATE INDEX
      CALL PPUTTS (TSID,DTYPE,NEXTRC,IFREE,INDEXD,ISTAT)
      IF (ISTAT.NE.0) GO TO 210
      IRECNO=NEXTRC
C
C  UPDATE DATA DICTIONARY AND ANY TIME SERIES ALREADY ON FILE
      IF (IAMORD.EQ.0.AND.DATFIL(8,INDEXD).NE.0) GO TO 110
      IF (IAMORD.EQ.1.AND.IDATFL(8,INDEXD).NE.0) GO TO 110
C
C  NO TIME SERIES DEFINED
      IF (IAMORD.EQ.0) DATFIL(8,INDEXD)=NEXTRC
      IF (IAMORD.EQ.1) IDATFL(8,INDEXD)=NEXTRC
      GO TO 120
C
C  TIME SERIES DEFINED - UPDATE LAST TIME SERIES OF THIS TYPE
110   IF (IAMORD.EQ.0) LASTTS=DATFIL(9,INDEXD)
      IF (IAMORD.EQ.1) LASTTS=IDATFL(9,INDEXD)
      CALL RVLRCD (LUNIT,LASTTS,1,IOLDRC,LRECLT,ISTAT)
      IF (ISTAT.NE.0) GO TO 220
      IOLDRC(LHEADC-5)=NEXTRC
      CALL WVLRCD (LUNIT,LASTTS,1,IOLDRC,LRECLT,ISTAT)
      IF (ISTAT.NE.0) GO TO 220
C
120   IF (IAMORD.EQ.0) DATFIL(9,INDEXD)=NEXTRC
      IF (IAMORD.EQ.1) IDATFL(9,INDEXD)=NEXTRC
C
C  UPDATE THE CONTROL RECORD
      IF (IAMORD.EQ.0) TSCNTR(3,INDXTS)=TSCNTR(3,INDXTS)+NREC
      IF (IAMORD.EQ.1) ITSCNT(3,INDXTS)=ITSCNT(3,INDXTS)+NREC
C
      IF (IPRDB.GT.0) WRITE (IOGDB,320) TSID,DTYPE,NEXTRC,IHEAD(15)
      GO TO 250
C
C- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C
130   IF (IPRDB.EQ.0.OR.IPPFLG.GT.0) WRITE (LP,330)
      ISTAT=11
      GO TO 250
C
140   IF (IPRDB.GT.0.OR.IPPFLG.EQ.0) WRITE (LP,340) TSID,DTYPE
      ISTAT=2
      GO TO 250
C
150   IF (IPRDB.GT.0.OR.IPPFLG.EQ.0) WRITE (LP,350) DTYPE
      ISTAT=4
      GO TO 250
C
160   IF (IPRDB.GT.0.OR.IPPFLG.EQ.0) WRITE (LP,360) ITSTEP,
     *    DATFIL(1,INDEXD)
170   ISTAT=3
      GO TO 250
C
180   IF (IPRDB.GT.0.OR.IPPFLG.EQ.0) WRITE (LP,370) DUNITS,DTYPE
      ISTAT=5
      GO TO 250
C
190   IF (IPRDB.GT.0.OR.IPPFLG.EQ.0) WRITE (LP,380) IHEAD(4),LWKBUF
      ISTAT=7
      GO TO 250
C
200   IF (IPRDB.GT.0.OR.IPPFLG.EQ.0) WRITE (LP,390) TSCNTR(1,INDXTS),
     *    TSCNTR(2,INDXTS)
      ISTAT=1
      GO TO 250
C
210   IF (IPRDB.GT.0.OR.IPPFLG.EQ.0) WRITE (LP,400)
      ISTAT=1
      GO TO 250
C
220   IF (IPRDB.GT.0.OR.IPPFLG.EQ.0) WRITE (LP,410)
      ISTAT=6
      GO TO 250
C
230   IF (IPRDB.GT.0.OR.IPPFLG.EQ.0) WRITE (LP,420) TSID
      ISTAT=8
      GO TO 250
C
240   IF (IPRDB.GT.0.OR.IPPFLG.EQ.0) WRITE (LP,440)
      ISTAT=8
C
250   IF (IPRTR.GT.0) WRITE (IOGDB,*) 'EXIT WPRDH : ISTAT=',ISTAT
C
      RETURN
C
C-----------------------------------------------------------------------
C
270   FORMAT ('0**ERROR** IN WPRDH - DATA TYPE ',A,' MUST HAVE NVAL ',
     *   'SET.')
280   FORMAT ('0**WARNING** DATA TYPE ',A,' HAS PRESET NVAL OF ',I4,'.')
290   FORMAT ('0**ERROR** IN WPRDH - FUTURE TIME SERIES ',A,
     *   ' DOES NOT EXIST.')
300   FORMAT ('0**ERROR** IN WPRDH - TIMES STEPS ARE NOT COMPATIBLE. ',
     *   'REGULAR=',I3,' FUTURE=',I3)
310   FORMAT ('0**ERROR** IN WPRDH - FUTURE TS HAS NVAL OF ',I4,
     *   ', NOT ',I4,'.')
320   FORMAT (' TIME SERIES DEFINED: ID= ',A,' TYPE= ',A,
     * ' REG RECORD=',I5,' FUT RECORD=',I5)
330   FORMAT ('0**ERROR** IDENTIFIER IS BLANK OR ''END''.')
340   FORMAT ('0**ERROR** IN WPRDH - TIME SERIES ID ',A,
     *   ' FOR DATA TYPE ',A,' ALREADY EXISTS.')
350   FORMAT ('0**ERROR** IN WPRDH - INVALID DATA TYPE ',A,'.')
360   FORMAT ('0**ERROR** IN WPRDH - INVALID TIME INTERVAL ',I3,' FOR ',
     *   A,'.')
370   FORMAT ('0**ERROR** IN WPRDH - INVALID UNITS ',A,
     *   ' FOR DATA TYPE ',A,'.')
380   FORMAT ('0**ERROR** IN WPRDH - TIME SERIES CAN HAVE ',I6,' DATA ',
     *  'VALUES MAKING IT LONGER THAN MAX OF ',I5,'.')
390   FORMAT ('0**ERROR** IN WPRDH - TIME SERIES FILE ',I4,
     *   ' IS FULL AT RECORD ',I6,'.')
400   FORMAT ('0**ERROR** IN WPRDH - IN WRITING TIME SERIES INDEX ')
410   FORMAT ('0**ERROR** IN WPRDH - TIME SERIES NOT DEFINED.')
420   FORMAT ('0**ERROR** IN WPRDH - TIME SERIES ',A,' SHOULD NOT ',
     *   'HAVE A FUTURE IDENTIFIER.')
430   FORMAT ('0**ERROR** IN WPRDH - INVALID LATITUDE AND/OR ',
     *   'LONGTITUDE FOR TIME SERIES ',A,' AND TYPE ',A,' .')
440   FORMAT ('0**ERROR** IN WPRDH - MISSING FUTURE TIME SERIES ',
     *   'IDENTIFIER.')
C
      END
