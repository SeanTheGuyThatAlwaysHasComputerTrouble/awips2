/*****************************************************************************************
 * COPYRIGHT (c), 2009, RAYTHEON COMPANY
 * ALL RIGHTS RESERVED, An Unpublished Work
 *
 * RAYTHEON PROPRIETARY
 * If the end user is not the U.S. Government or any agency thereof, use
 * or disclosure of data contained in this source code file is subject to
 * the proprietary restrictions set forth in the Master Rights File.
 *
 * U.S. GOVERNMENT PURPOSE RIGHTS NOTICE
 * If the end user is the U.S. Government or any agency thereof, this source
 * code is provided to the U.S. Government with Government Purpose Rights.
 * Use or disclosure of data contained in this source code file is subject to
 * the "Government Purpose Rights" restriction in the Master Rights File.
 *
 * U.S. EXPORT CONTROLLED TECHNICAL DATA
 * Use or disclosure of data contained in this source code file is subject to
 * the export restrictions set forth in the Master Rights File.
 ******************************************************************************************/

/*
 * Support for point data request capability to retrieve point data
 * from EDEX Thrift service.
 *
 * <pre>
 *
 * SOFTWARE HISTORY
 *
 * Date         Ticket#     Engineer    Description
 * ------------ ----------  ----------- --------------------------
 * 01/18/10     3747        brockwoo    Initial Creation
 * 07/29/13     2215        bkowal      Regenerated for thrift 0.9.0
 * 07/22/14     15649       lshi        Rollback to Initial Creation
 *
 * </pre>
 *
 * @author brockwoo
 * @version 1
 */

/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#include "PointData_types.h"

const char
		* com_raytheon_uf_common_pointdata_ParameterDescription::ascii_fingerprint =
				"F8914BAC237E22C5EFA279EDDBA3C5C6";
const uint8_t
		com_raytheon_uf_common_pointdata_ParameterDescription::binary_fingerprint[16] = {
				0xF8, 0x91, 0x4B, 0xAC, 0x23, 0x7E, 0x22, 0xC5, 0xEF, 0xA2,
				0x79, 0xED, 0xDB, 0xA3, 0xC5, 0xC6 };

uint32_t com_raytheon_uf_common_pointdata_ParameterDescription::read(
		apache::thrift::protocol::TProtocol* iprot) {

	uint32_t xfer = 0;
	std::string fname;
	apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using apache::thrift::protocol::TProtocolException;

	while (true) {
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if (ftype == apache::thrift::protocol::T_STOP) {
			break;
		}
		switch (fid) {
		case 1:
			if (ftype == apache::thrift::protocol::T_STRING) {
				xfer += iprot->readString(this->dimension);
				this->__isset.dimension = true;
			} else {
				xfer += iprot->skip(ftype);
			}
			break;
		case 2:
			if (ftype == apache::thrift::protocol::T_I32) {
				xfer += iprot->readI32(this->dimensionAsInt);
				this->__isset.dimensionAsInt = true;
			} else {
				xfer += iprot->skip(ftype);
			}
			break;
		case 3:
			if (ftype == apache::thrift::protocol::T_DOUBLE) {
				xfer += iprot->readDouble(this->fillValue);
				this->__isset.fillValue = true;
			} else {
				xfer += iprot->skip(ftype);
			}
			break;
		case 4:
			if (ftype == apache::thrift::protocol::T_I32) {
				xfer += iprot->readI32(this->maxLength);
				this->__isset.maxLength = true;
			} else {
				xfer += iprot->skip(ftype);
			}
			break;
		case 5:
			if (ftype == apache::thrift::protocol::T_I32) {
				xfer += iprot->readI32(this->numDims);
				this->__isset.numDims = true;
			} else {
				xfer += iprot->skip(ftype);
			}
			break;
		case 6:
			if (ftype == apache::thrift::protocol::T_STRING) {
				xfer += iprot->readString(this->parameterName);
				this->__isset.parameterName = true;
			} else {
				xfer += iprot->skip(ftype);
			}
			break;
		case 7:
			if (ftype == apache::thrift::protocol::T_STRING) {
				xfer += iprot->readString(this->unit);
				this->__isset.unit = true;
			} else {
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t com_raytheon_uf_common_pointdata_ParameterDescription::write(
		apache::thrift::protocol::TProtocol* oprot) const {
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin(
			"com_raytheon_uf_common_pointdata_ParameterDescription");
	xfer += oprot->writeFieldBegin("dimension",
			apache::thrift::protocol::T_STRING, 1);
	xfer += oprot->writeString(this->dimension);
	xfer += oprot->writeFieldEnd();
	xfer += oprot->writeFieldBegin("dimensionAsInt",
			apache::thrift::protocol::T_I32, 2);
	xfer += oprot->writeI32(this->dimensionAsInt);
	xfer += oprot->writeFieldEnd();
	xfer += oprot->writeFieldBegin("fillValue",
			apache::thrift::protocol::T_DOUBLE, 3);
	xfer += oprot->writeDouble(this->fillValue);
	xfer += oprot->writeFieldEnd();
	xfer += oprot->writeFieldBegin("maxLength",
			apache::thrift::protocol::T_I32, 4);
	xfer += oprot->writeI32(this->maxLength);
	xfer += oprot->writeFieldEnd();
	xfer += oprot->writeFieldBegin("numDims", apache::thrift::protocol::T_I32,
			5);
	xfer += oprot->writeI32(this->numDims);
	xfer += oprot->writeFieldEnd();
	xfer += oprot->writeFieldBegin("parameterName",
			apache::thrift::protocol::T_STRING, 6);
	xfer += oprot->writeString(this->parameterName);
	xfer += oprot->writeFieldEnd();
	xfer += oprot->writeFieldBegin("unit", apache::thrift::protocol::T_STRING,
			7);
	xfer += oprot->writeString(this->unit);
	xfer += oprot->writeFieldEnd();
	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

const char
		* com_raytheon_uf_common_pointdata_elements_StringPointDataObject::ascii_fingerprint =
				"8432CD88CCBAE483EB61F9210360E5F9";
const uint8_t
		com_raytheon_uf_common_pointdata_elements_StringPointDataObject::binary_fingerprint[16] = {
				0x84, 0x32, 0xCD, 0x88, 0xCC, 0xBA, 0xE4, 0x83, 0xEB, 0x61,
				0xF9, 0x21, 0x03, 0x60, 0xE5, 0xF9 };

uint32_t com_raytheon_uf_common_pointdata_elements_StringPointDataObject::read(
		apache::thrift::protocol::TProtocol* iprot) {

	uint32_t xfer = 0;
	std::string fname;
	apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using apache::thrift::protocol::TProtocolException;

	while (true) {
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if (ftype == apache::thrift::protocol::T_STOP) {
			break;
		}
		switch (fid) {
		case 1:
			if (ftype == apache::thrift::protocol::T_STRUCT) {
				xfer += this->description.read(iprot);
				this->__isset.description = true;
			} else {
				xfer += iprot->skip(ftype);
			}
			break;
		case 2:
			if (ftype == apache::thrift::protocol::T_I32) {
				xfer += iprot->readI32(this->dimensions);
				this->__isset.dimensions = true;
			} else {
				xfer += iprot->skip(ftype);
			}
			break;
		case 3:
			if (ftype == apache::thrift::protocol::T_LIST) {
				{
					this->stringData.clear();
					uint32_t _size0;
					apache::thrift::protocol::TType _etype3;
					iprot->readListBegin(_etype3, _size0);
					this->stringData.resize(_size0);
					uint32_t _i4;
					for (_i4 = 0; _i4 < _size0; ++_i4) {
						xfer += iprot->readString(this->stringData[_i4]);
					}
					iprot->readListEnd();
				}
				this->__isset.stringData = true;
			} else {
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t com_raytheon_uf_common_pointdata_elements_StringPointDataObject::write(
		apache::thrift::protocol::TProtocol* oprot) const {
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin(
			"com_raytheon_uf_common_pointdata_elements_StringPointDataObject");
	xfer += oprot->writeFieldBegin("description",
			apache::thrift::protocol::T_STRUCT, 1);
	xfer += this->description.write(oprot);
	xfer += oprot->writeFieldEnd();
	xfer += oprot->writeFieldBegin("dimensions",
			apache::thrift::protocol::T_I32, 2);
	xfer += oprot->writeI32(this->dimensions);
	xfer += oprot->writeFieldEnd();
	xfer += oprot->writeFieldBegin("stringData",
			apache::thrift::protocol::T_LIST, 3);
	{
		xfer += oprot->writeListBegin(apache::thrift::protocol::T_STRING,
				this->stringData.size());
		std::vector<std::string>::const_iterator _iter5;
		for (_iter5 = this->stringData.begin(); _iter5
				!= this->stringData.end(); ++_iter5) {
			xfer += oprot->writeString((*_iter5));
		}
		xfer += oprot->writeListEnd();
	}
	xfer += oprot->writeFieldEnd();
	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

const char
		* com_raytheon_uf_common_pointdata_elements_FloatPointDataObject::ascii_fingerprint =
				"3E090BC5D21490BE0856576B426175A4";
const uint8_t
		com_raytheon_uf_common_pointdata_elements_FloatPointDataObject::binary_fingerprint[16] = {
				0x3E, 0x09, 0x0B, 0xC5, 0xD2, 0x14, 0x90, 0xBE, 0x08, 0x56,
				0x57, 0x6B, 0x42, 0x61, 0x75, 0xA4 };

uint32_t com_raytheon_uf_common_pointdata_elements_FloatPointDataObject::read(
		apache::thrift::protocol::TProtocol* iprot) {

	uint32_t xfer = 0;
	std::string fname;
	apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using apache::thrift::protocol::TProtocolException;

	while (true) {
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if (ftype == apache::thrift::protocol::T_STOP) {
			break;
		}
		switch (fid) {
		case 1:
			if (ftype == apache::thrift::protocol::T_STRUCT) {
				xfer += this->description.read(iprot);
				this->__isset.description = true;
			} else {
				xfer += iprot->skip(ftype);
			}
			break;
		case 2:
			if (ftype == apache::thrift::protocol::T_I32) {
				xfer += iprot->readI32(this->dimensions);
				this->__isset.dimensions = true;
			} else {
				xfer += iprot->skip(ftype);
			}
			break;
		case 3:
			if (ftype == apache::thrift::protocol::T_LIST) {
				{
					this->floatData.clear();
					uint32_t _size6;
					apache::thrift::protocol::TType _etype9;
					iprot->readListBegin(_etype9, _size6);
					this->floatData.resize(_size6);
					uint32_t _i10;
					for (_i10 = 0; _i10 < _size6; ++_i10) {
						xfer += iprot->readI32(this->floatData[_i10]);
					}
					iprot->readListEnd();
				}
				this->__isset.floatData = true;
			} else {
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	union {
		int32_t i;
		float f;
	} u;
	//u.i = (long)v;
	//return (jfloat)u.f;

	int intCounter = 0;
	for (intCounter = 0; intCounter < (int)this->floatData.size(); intCounter++) {
		u.i = this->floatData.at(intCounter);
		float holder = (float)u.f;
		this->trueFloatData.push_back(holder);
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t com_raytheon_uf_common_pointdata_elements_FloatPointDataObject::write(
		apache::thrift::protocol::TProtocol* oprot) const {
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin(
			"com_raytheon_uf_common_pointdata_elements_FloatPointDataObject");
	xfer += oprot->writeFieldBegin("description",
			apache::thrift::protocol::T_STRUCT, 1);
	xfer += this->description.write(oprot);
	xfer += oprot->writeFieldEnd();
	xfer += oprot->writeFieldBegin("dimensions",
			apache::thrift::protocol::T_I32, 2);
	xfer += oprot->writeI32(this->dimensions);
	xfer += oprot->writeFieldEnd();
	xfer += oprot->writeFieldBegin("floatData",
			apache::thrift::protocol::T_LIST, 3);
	{
		xfer += oprot->writeListBegin(apache::thrift::protocol::T_I32,
				this->floatData.size());
		std::vector<int32_t>::const_iterator _iter11;
		for (_iter11 = this->floatData.begin(); _iter11
				!= this->floatData.end(); ++_iter11) {
			xfer += oprot->writeI32((*_iter11));
		}
		xfer += oprot->writeListEnd();
	}
	xfer += oprot->writeFieldEnd();
	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

const char
		* com_raytheon_uf_common_pointdata_elements_IntPointDataObject::ascii_fingerprint =
				"3E090BC5D21490BE0856576B426175A4";
const uint8_t
		com_raytheon_uf_common_pointdata_elements_IntPointDataObject::binary_fingerprint[16] = {
				0x3E, 0x09, 0x0B, 0xC5, 0xD2, 0x14, 0x90, 0xBE, 0x08, 0x56,
				0x57, 0x6B, 0x42, 0x61, 0x75, 0xA4 };

uint32_t com_raytheon_uf_common_pointdata_elements_IntPointDataObject::read(
		apache::thrift::protocol::TProtocol* iprot) {

	uint32_t xfer = 0;
	std::string fname;
	apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using apache::thrift::protocol::TProtocolException;

	while (true) {
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if (ftype == apache::thrift::protocol::T_STOP) {
			break;
		}
		switch (fid) {
		case 1:
			if (ftype == apache::thrift::protocol::T_STRUCT) {
				xfer += this->description.read(iprot);
				this->__isset.description = true;
			} else {
				xfer += iprot->skip(ftype);
			}
			break;
		case 2:
			if (ftype == apache::thrift::protocol::T_I32) {
				xfer += iprot->readI32(this->dimensions);
				this->__isset.dimensions = true;
			} else {
				xfer += iprot->skip(ftype);
			}
			break;
		case 3:
			if (ftype == apache::thrift::protocol::T_LIST) {
				{
					this->intData.clear();
					uint32_t _size12;
					apache::thrift::protocol::TType _etype15;
					iprot->readListBegin(_etype15, _size12);
					this->intData.resize(_size12);
					uint32_t _i16;
					for (_i16 = 0; _i16 < _size12; ++_i16) {
						xfer += iprot->readI32(this->intData[_i16]);
					}
					iprot->readListEnd();
				}
				this->__isset.intData = true;
			} else {
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t com_raytheon_uf_common_pointdata_elements_IntPointDataObject::write(
		apache::thrift::protocol::TProtocol* oprot) const {
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin(
			"com_raytheon_uf_common_pointdata_elements_IntPointDataObject");
	xfer += oprot->writeFieldBegin("description",
			apache::thrift::protocol::T_STRUCT, 1);
	xfer += this->description.write(oprot);
	xfer += oprot->writeFieldEnd();
	xfer += oprot->writeFieldBegin("dimensions",
			apache::thrift::protocol::T_I32, 2);
	xfer += oprot->writeI32(this->dimensions);
	xfer += oprot->writeFieldEnd();
	xfer += oprot->writeFieldBegin("intData", apache::thrift::protocol::T_LIST,
			3);
	{
		xfer += oprot->writeListBegin(apache::thrift::protocol::T_I32,
				this->intData.size());
		std::vector<int32_t>::const_iterator _iter17;
		for (_iter17 = this->intData.begin(); _iter17 != this->intData.end(); ++_iter17) {
			xfer += oprot->writeI32((*_iter17));
		}
		xfer += oprot->writeListEnd();
	}
	xfer += oprot->writeFieldEnd();
	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

const char
		* com_raytheon_uf_common_pointdata_elements_LongPointDataObject::ascii_fingerprint =
				"135921A65C05459AFDDA382E27DDA225";
const uint8_t
		com_raytheon_uf_common_pointdata_elements_LongPointDataObject::binary_fingerprint[16] = {
				0x13, 0x59, 0x21, 0xA6, 0x5C, 0x05, 0x45, 0x9A, 0xFD, 0xDA,
				0x38, 0x2E, 0x27, 0xDD, 0xA2, 0x25 };

uint32_t com_raytheon_uf_common_pointdata_elements_LongPointDataObject::read(
		apache::thrift::protocol::TProtocol* iprot) {

	uint32_t xfer = 0;
	std::string fname;
	apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using apache::thrift::protocol::TProtocolException;

	while (true) {
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if (ftype == apache::thrift::protocol::T_STOP) {
			break;
		}
		switch (fid) {
		case 1:
			if (ftype == apache::thrift::protocol::T_STRUCT) {
				xfer += this->description.read(iprot);
				this->__isset.description = true;
			} else {
				xfer += iprot->skip(ftype);
			}
			break;
		case 2:
			if (ftype == apache::thrift::protocol::T_I32) {
				xfer += iprot->readI32(this->dimensions);
				this->__isset.dimensions = true;
			} else {
				xfer += iprot->skip(ftype);
			}
			break;
		case 3:
			if (ftype == apache::thrift::protocol::T_LIST) {
				{
					this->longData.clear();
					uint32_t _size18;
					apache::thrift::protocol::TType _etype21;
					iprot->readListBegin(_etype21, _size18);
					this->longData.resize(_size18);
					uint32_t _i22;
					for (_i22 = 0; _i22 < _size18; ++_i22) {
						xfer += iprot->readI64(this->longData[_i22]);
					}
					iprot->readListEnd();
				}
				this->__isset.longData = true;
			} else {
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t com_raytheon_uf_common_pointdata_elements_LongPointDataObject::write(
		apache::thrift::protocol::TProtocol* oprot) const {
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin(
			"com_raytheon_uf_common_pointdata_elements_LongPointDataObject");
	xfer += oprot->writeFieldBegin("description",
			apache::thrift::protocol::T_STRUCT, 1);
	xfer += this->description.write(oprot);
	xfer += oprot->writeFieldEnd();
	xfer += oprot->writeFieldBegin("dimensions",
			apache::thrift::protocol::T_I32, 2);
	xfer += oprot->writeI32(this->dimensions);
	xfer += oprot->writeFieldEnd();
	xfer += oprot->writeFieldBegin("longData",
			apache::thrift::protocol::T_LIST, 3);
	{
		xfer += oprot->writeListBegin(apache::thrift::protocol::T_I64,
				this->longData.size());
		std::vector<int64_t>::const_iterator _iter23;
		for (_iter23 = this->longData.begin(); _iter23 != this->longData.end(); ++_iter23) {
			xfer += oprot->writeI64((*_iter23));
		}
		xfer += oprot->writeListEnd();
	}
	xfer += oprot->writeFieldEnd();
	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

const char
		* com_raytheon_uf_common_pointdata_PointDataThriftContainer::ascii_fingerprint =
				"1FBB5099264525B0793D6869D0E4CD21";
const uint8_t
		com_raytheon_uf_common_pointdata_PointDataThriftContainer::binary_fingerprint[16] = {
				0x1F, 0xBB, 0x50, 0x99, 0x26, 0x45, 0x25, 0xB0, 0x79, 0x3D,
				0x68, 0x69, 0xD0, 0xE4, 0xCD, 0x21 };

uint32_t com_raytheon_uf_common_pointdata_PointDataThriftContainer::read(
		apache::thrift::protocol::TProtocol* iprot) {

	uint32_t xfer = 0;
	std::string fname;
	apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using apache::thrift::protocol::TProtocolException;

	while (true) {
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if (ftype == apache::thrift::protocol::T_STOP) {
			break;
		}
		switch (fid) {
		case 1:
			if (ftype == apache::thrift::protocol::T_LIST) {
				{
					this->floatData.clear();
					uint32_t _size24;
					apache::thrift::protocol::TType _etype27;
					iprot->readListBegin(_etype27, _size24);
					this->floatData.resize(_size24);
					uint32_t _i28;
					for (_i28 = 0; _i28 < _size24; ++_i28) {
						xfer += this->floatData[_i28].read(iprot);
					}
					iprot->readListEnd();
				}
				this->__isset.floatData = true;
			} else {
				xfer += iprot->skip(ftype);
			}
			break;
		case 2:
			if (ftype == apache::thrift::protocol::T_LIST) {
				{
					this->intData.clear();
					uint32_t _size29;
					apache::thrift::protocol::TType _etype32;
					iprot->readListBegin(_etype32, _size29);
					this->intData.resize(_size29);
					uint32_t _i33;
					for (_i33 = 0; _i33 < _size29; ++_i33) {
						xfer += this->intData[_i33].read(iprot);
					}
					iprot->readListEnd();
				}
				this->__isset.intData = true;
			} else {
				xfer += iprot->skip(ftype);
			}
			break;
		case 3:
			if (ftype == apache::thrift::protocol::T_LIST) {
				{
					this->longData.clear();
					uint32_t _size34;
					apache::thrift::protocol::TType _etype37;
					iprot->readListBegin(_etype37, _size34);
					this->longData.resize(_size34);
					uint32_t _i38;
					for (_i38 = 0; _i38 < _size34; ++_i38) {
						xfer += this->longData[_i38].read(iprot);
					}
					iprot->readListEnd();
				}
				this->__isset.longData = true;
			} else {
				xfer += iprot->skip(ftype);
			}
			break;
		case 4:
			if (ftype == apache::thrift::protocol::T_I32) {
				xfer += iprot->readI32(this->size);
				this->__isset.size = true;
			} else {
				xfer += iprot->skip(ftype);
			}
			break;
		case 5:
			if (ftype == apache::thrift::protocol::T_LIST) {
				{
					this->stringData.clear();
					uint32_t _size39;
					apache::thrift::protocol::TType _etype42;
					iprot->readListBegin(_etype42, _size39);
					this->stringData.resize(_size39);
					uint32_t _i43;
					for (_i43 = 0; _i43 < _size39; ++_i43) {
						xfer += this->stringData[_i43].read(iprot);
					}
					iprot->readListEnd();
				}
				this->__isset.stringData = true;
			} else {
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t com_raytheon_uf_common_pointdata_PointDataThriftContainer::write(
		apache::thrift::protocol::TProtocol* oprot) const {
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin(
			"com_raytheon_uf_common_pointdata_PointDataThriftContainer");
	xfer += oprot->writeFieldBegin("floatData",
			apache::thrift::protocol::T_LIST, 1);
	{
		xfer += oprot->writeListBegin(apache::thrift::protocol::T_STRUCT,
				this->floatData.size());
		std::vector<
				com_raytheon_uf_common_pointdata_elements_FloatPointDataObject>::const_iterator
				_iter44;
		for (_iter44 = this->floatData.begin(); _iter44
				!= this->floatData.end(); ++_iter44) {
			xfer += (*_iter44).write(oprot);
		}
		xfer += oprot->writeListEnd();
	}
	xfer += oprot->writeFieldEnd();
	xfer += oprot->writeFieldBegin("intData", apache::thrift::protocol::T_LIST,
			2);
	{
		xfer += oprot->writeListBegin(apache::thrift::protocol::T_STRUCT,
				this->intData.size());
		std::vector<
				com_raytheon_uf_common_pointdata_elements_IntPointDataObject>::const_iterator
				_iter45;
		for (_iter45 = this->intData.begin(); _iter45 != this->intData.end(); ++_iter45) {
			xfer += (*_iter45).write(oprot);
		}
		xfer += oprot->writeListEnd();
	}
	xfer += oprot->writeFieldEnd();
	xfer += oprot->writeFieldBegin("longData",
			apache::thrift::protocol::T_LIST, 3);
	{
		xfer += oprot->writeListBegin(apache::thrift::protocol::T_STRUCT,
				this->longData.size());
		std::vector<
				com_raytheon_uf_common_pointdata_elements_LongPointDataObject>::const_iterator
				_iter46;
		for (_iter46 = this->longData.begin(); _iter46 != this->longData.end(); ++_iter46) {
			xfer += (*_iter46).write(oprot);
		}
		xfer += oprot->writeListEnd();
	}
	xfer += oprot->writeFieldEnd();
	xfer += oprot->writeFieldBegin("size", apache::thrift::protocol::T_I32, 4);
	xfer += oprot->writeI32(this->size);
	xfer += oprot->writeFieldEnd();
	xfer += oprot->writeFieldBegin("stringData",
			apache::thrift::protocol::T_LIST, 5);
	{
		xfer += oprot->writeListBegin(apache::thrift::protocol::T_STRUCT,
				this->stringData.size());
		std::vector<
				com_raytheon_uf_common_pointdata_elements_StringPointDataObject>::const_iterator
				_iter47;
		for (_iter47 = this->stringData.begin(); _iter47
				!= this->stringData.end(); ++_iter47) {
			xfer += (*_iter47).write(oprot);
		}
		xfer += oprot->writeListEnd();
	}
	xfer += oprot->writeFieldEnd();
	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

const char
		* com_raytheon_uf_common_pointdata_PointDataRequestMessageConstraint::ascii_fingerprint =
				"3368C2F81F2FEF71F11EDACDB2A3ECEF";
const uint8_t
		com_raytheon_uf_common_pointdata_PointDataRequestMessageConstraint::binary_fingerprint[16] = {
				0x33, 0x68, 0xC2, 0xF8, 0x1F, 0x2F, 0xEF, 0x71, 0xF1, 0x1E,
				0xDA, 0xCD, 0xB2, 0xA3, 0xEC, 0xEF };

uint32_t com_raytheon_uf_common_pointdata_PointDataRequestMessageConstraint::read(
		apache::thrift::protocol::TProtocol* iprot) {

	uint32_t xfer = 0;
	std::string fname;
	apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using apache::thrift::protocol::TProtocolException;

	while (true) {
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if (ftype == apache::thrift::protocol::T_STOP) {
			break;
		}
		switch (fid) {
		case 1:
			if (ftype == apache::thrift::protocol::T_I32) {
				xfer += iprot->readI32(this->constraintType);
				this->__isset.constraintType = true;
			} else {
				xfer += iprot->skip(ftype);
			}
			break;
		case 2:
			if (ftype == apache::thrift::protocol::T_STRING) {
				xfer += iprot->readString(this->parameter);
				this->__isset.parameter = true;
			} else {
				xfer += iprot->skip(ftype);
			}
			break;
		case 3:
			if (ftype == apache::thrift::protocol::T_STRING) {
				xfer += iprot->readString(this->value);
				this->__isset.value = true;
			} else {
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t com_raytheon_uf_common_pointdata_PointDataRequestMessageConstraint::write(
		apache::thrift::protocol::TProtocol* oprot) const {
	uint32_t xfer = 0;
	xfer
			+= oprot->writeStructBegin(
					"com_raytheon_uf_common_pointdata_PointDataRequestMessageConstraint");
	xfer += oprot->writeFieldBegin("constraintType",
			apache::thrift::protocol::T_I32, 1);
	xfer += oprot->writeI32(this->constraintType);
	xfer += oprot->writeFieldEnd();
	xfer += oprot->writeFieldBegin("parameter",
			apache::thrift::protocol::T_STRING, 2);
	xfer += oprot->writeString(this->parameter);
	xfer += oprot->writeFieldEnd();
	xfer += oprot->writeFieldBegin("value", apache::thrift::protocol::T_STRING,
			3);
	xfer += oprot->writeString(this->value);
	xfer += oprot->writeFieldEnd();
	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

const char
		* com_raytheon_uf_common_pointdata_PointDataRequestMessage::ascii_fingerprint =
				"781EA3AAB5B079D92C9DA7774B669520";
const uint8_t
		com_raytheon_uf_common_pointdata_PointDataRequestMessage::binary_fingerprint[16] = {
				0x78, 0x1E, 0xA3, 0xAA, 0xB5, 0xB0, 0x79, 0xD9, 0x2C, 0x9D,
				0xA7, 0x77, 0x4B, 0x66, 0x95, 0x20 };

uint32_t com_raytheon_uf_common_pointdata_PointDataRequestMessage::read(
		apache::thrift::protocol::TProtocol* iprot) {

	uint32_t xfer = 0;
	std::string fname;
	apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using apache::thrift::protocol::TProtocolException;

	while (true) {
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if (ftype == apache::thrift::protocol::T_STOP) {
			break;
		}
		switch (fid) {
		case 1:
			if (ftype == apache::thrift::protocol::T_BOOL) {
				xfer += iprot->readBool(this->allLevels);
				this->__isset.allLevels = true;
			} else {
				xfer += iprot->skip(ftype);
			}
			break;
		case 2:
			if (ftype == apache::thrift::protocol::T_LIST) {
				{
					this->constraints.clear();
					uint32_t _size48;
					apache::thrift::protocol::TType _etype51;
					iprot->readListBegin(_etype51, _size48);
					this->constraints.resize(_size48);
					uint32_t _i52;
					for (_i52 = 0; _i52 < _size48; ++_i52) {
						xfer += this->constraints[_i52].read(iprot);
					}
					iprot->readListEnd();
				}
				this->__isset.constraints = true;
			} else {
				xfer += iprot->skip(ftype);
			}
			break;
		case 3:
			if (ftype == apache::thrift::protocol::T_STRING) {
				xfer += iprot->readString(this->levelParameter);
				this->__isset.levelParameter = true;
			} else {
				xfer += iprot->skip(ftype);
			}
			break;
		case 4:
			if (ftype == apache::thrift::protocol::T_LIST) {
				{
					this->levelValue.clear();
					uint32_t _size53;
					apache::thrift::protocol::TType _etype56;
					iprot->readListBegin(_etype56, _size53);
					this->levelValue.resize(_size53);
					uint32_t _i57;
					for (_i57 = 0; _i57 < _size53; ++_i57) {
						xfer += iprot->readDouble(this->levelValue[_i57]);
					}
					iprot->readListEnd();
				}
				this->__isset.levelValue = true;
			} else {
				xfer += iprot->skip(ftype);
			}
			break;
		case 5:
			if (ftype == apache::thrift::protocol::T_LIST) {
				{
					this->parameters.clear();
					uint32_t _size58;
					apache::thrift::protocol::TType _etype61;
					iprot->readListBegin(_etype61, _size58);
					this->parameters.resize(_size58);
					uint32_t _i62;
					for (_i62 = 0; _i62 < _size58; ++_i62) {
						xfer += iprot->readString(this->parameters[_i62]);
					}
					iprot->readListEnd();
				}
				this->__isset.parameters = true;
			} else {
				xfer += iprot->skip(ftype);
			}
			break;
		case 6:
			if (ftype == apache::thrift::protocol::T_STRING) {
				xfer += iprot->readString(this->pluginName);
				this->__isset.pluginName = true;
			} else {
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t com_raytheon_uf_common_pointdata_PointDataRequestMessage::write(
		apache::thrift::protocol::TProtocol* oprot) const {
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin(
			"com_raytheon_uf_common_pointdata_PointDataRequestMessage");
	xfer += oprot->writeFieldBegin("allLevels",
			apache::thrift::protocol::T_BOOL, 1);
	xfer += oprot->writeBool(this->allLevels);
	xfer += oprot->writeFieldEnd();
	xfer += oprot->writeFieldBegin("constraints",
			apache::thrift::protocol::T_LIST, 2);
	{
		xfer += oprot->writeListBegin(apache::thrift::protocol::T_STRUCT,
				this->constraints.size());
		std::vector<
				com_raytheon_uf_common_pointdata_PointDataRequestMessageConstraint>::const_iterator
				_iter63;
		for (_iter63 = this->constraints.begin(); _iter63
				!= this->constraints.end(); ++_iter63) {
			xfer += (*_iter63).write(oprot);
		}
		xfer += oprot->writeListEnd();
	}
	xfer += oprot->writeFieldEnd();
	xfer += oprot->writeFieldBegin("levelParameter",
			apache::thrift::protocol::T_STRING, 3);
	xfer += oprot->writeString(this->levelParameter);
	xfer += oprot->writeFieldEnd();
	xfer += oprot->writeFieldBegin("levelValue",
			apache::thrift::protocol::T_LIST, 4);
	{
		xfer += oprot->writeListBegin(apache::thrift::protocol::T_DOUBLE,
				this->levelValue.size());
		std::vector<double>::const_iterator _iter64;
		for (_iter64 = this->levelValue.begin(); _iter64
				!= this->levelValue.end(); ++_iter64) {
			xfer += oprot->writeDouble((*_iter64));
		}
		xfer += oprot->writeListEnd();
	}
	xfer += oprot->writeFieldEnd();
	xfer += oprot->writeFieldBegin("parameters",
			apache::thrift::protocol::T_LIST, 5);
	{
		xfer += oprot->writeListBegin(apache::thrift::protocol::T_STRING,
				this->parameters.size());
		std::vector<std::string>::const_iterator _iter65;
		for (_iter65 = this->parameters.begin(); _iter65
				!= this->parameters.end(); ++_iter65) {
			xfer += oprot->writeString((*_iter65));
		}
		xfer += oprot->writeListEnd();
	}
	xfer += oprot->writeFieldEnd();
	xfer += oprot->writeFieldBegin("pluginName",
			apache::thrift::protocol::T_STRING, 6);
	xfer += oprot->writeString(this->pluginName);
	xfer += oprot->writeFieldEnd();
	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

