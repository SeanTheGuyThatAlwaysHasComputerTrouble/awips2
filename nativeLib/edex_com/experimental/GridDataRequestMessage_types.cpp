/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

/*****************************************************************************************
 * COPYRIGHT (c), 2009, RAYTHEON COMPANY
 * ALL RIGHTS RESERVED, An Unpublished Work
 *
 * RAYTHEON PROPRIETARY
 * If the end user is not the U.S. Government or any agency thereof, use
 * or disclosure of data contained in this source code file is subject to
 * the proprietary restrictions set forth in the Master Rights File.
 *
 * U.S. GOVERNMENT PURPOSE RIGHTS NOTICE
 * If the end user is the U.S. Government or any agency thereof, this source
 * code is provided to the U.S. Government with Government Purpose Rights.
 * Use or disclosure of data contained in this source code file is subject to
 * the "Government Purpose Rights" restriction in the Master Rights File.
 *
 * U.S. EXPORT CONTROLLED TECHNICAL DATA
 * Use or disclosure of data contained in this source code file is subject to
 * the export restrictions set forth in the Master Rights File.
 ******************************************************************************************/

/*
 * Extended thrift protocol to handle messages from edex.
 *
 * <pre>
 *
 * SOFTWARE HISTORY
 *
 * Date         Ticket#     Engineer    Description
 * ------------ ----------  ----------- --------------------------
 * 07/29/13       2215       bkowal     Regenerated for thrift 0.9.0
 *
 * </pre>
 *
 * @author bkowal
 * @version 1
 */
#include "GridDataRequestMessage_types.h"

#include <algorithm>



const char* com_raytheon_uf_common_dataplugin_grib_request_GridDataRequestMessage::ascii_fingerprint = "9929A2BAB7C3E6060F44C2DCEAE9AAB2";
const uint8_t com_raytheon_uf_common_dataplugin_grib_request_GridDataRequestMessage::binary_fingerprint[16] = {0x99,0x29,0xA2,0xBA,0xB7,0xC3,0xE6,0x06,0x0F,0x44,0xC2,0xDC,0xEA,0xE9,0xAA,0xB2};

uint32_t com_raytheon_uf_common_dataplugin_grib_request_GridDataRequestMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->forecastTime);
          this->__isset.forecastTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->levelOne);
          this->__isset.levelOne = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->levelTwo);
          this->__isset.levelTwo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->levelType);
          this->__isset.levelType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->modelName);
          this->__isset.modelName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->parameterAbbreviation);
          this->__isset.parameterAbbreviation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pert);
          this->__isset.pert = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->startTime);
          this->__isset.startTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->version);
          this->__isset.version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t com_raytheon_uf_common_dataplugin_grib_request_GridDataRequestMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("com_raytheon_uf_common_dataplugin_grib_request_GridDataRequestMessage");

  xfer += oprot->writeFieldBegin("forecastTime", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->forecastTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("levelOne", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->levelOne);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("levelTwo", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->levelTwo);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("levelType", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->levelType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("modelName", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->modelName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("parameterAbbreviation", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->parameterAbbreviation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pert", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->pert);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("startTime", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->startTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(com_raytheon_uf_common_dataplugin_grib_request_GridDataRequestMessage &a, com_raytheon_uf_common_dataplugin_grib_request_GridDataRequestMessage &b) {
  using ::std::swap;
  swap(a.forecastTime, b.forecastTime);
  swap(a.levelOne, b.levelOne);
  swap(a.levelTwo, b.levelTwo);
  swap(a.levelType, b.levelType);
  swap(a.modelName, b.modelName);
  swap(a.parameterAbbreviation, b.parameterAbbreviation);
  swap(a.pert, b.pert);
  swap(a.startTime, b.startTime);
  swap(a.version, b.version);
  swap(a.__isset, b.__isset);
}


