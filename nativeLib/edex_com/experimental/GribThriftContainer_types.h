/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

/*****************************************************************************************
 * COPYRIGHT (c), 2009, RAYTHEON COMPANY
 * ALL RIGHTS RESERVED, An Unpublished Work
 *
 * RAYTHEON PROPRIETARY
 * If the end user is not the U.S. Government or any agency thereof, use
 * or disclosure of data contained in this source code file is subject to
 * the proprietary restrictions set forth in the Master Rights File.
 *
 * U.S. GOVERNMENT PURPOSE RIGHTS NOTICE
 * If the end user is the U.S. Government or any agency thereof, this source
 * code is provided to the U.S. Government with Government Purpose Rights.
 * Use or disclosure of data contained in this source code file is subject to
 * the "Government Purpose Rights" restriction in the Master Rights File.
 *
 * U.S. EXPORT CONTROLLED TECHNICAL DATA
 * Use or disclosure of data contained in this source code file is subject to
 * the export restrictions set forth in the Master Rights File.
 ******************************************************************************************/

/*
 * Extended thrift protocol to handle messages from edex.
 *
 * <pre>
 *
 * SOFTWARE HISTORY
 *
 * Date         Ticket#     Engineer    Description
 * ------------ ----------  ----------- --------------------------
 * 07/29/13       2215       bkowal     Regenerated for thrift 0.9.0
 *
 * </pre>
 *
 * @author bkowal
 * @version 1
 */
#ifndef GribThriftContainer_TYPES_H
#define GribThriftContainer_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "GribThriftRecord_types.h"


typedef struct _com_raytheon_uf_common_dataplugin_grib_GribThriftContainer__isset {
  _com_raytheon_uf_common_dataplugin_grib_GribThriftContainer__isset() : numOfRecords(false), records(false) {}
  bool numOfRecords;
  bool records;
} _com_raytheon_uf_common_dataplugin_grib_GribThriftContainer__isset;

class com_raytheon_uf_common_dataplugin_grib_GribThriftContainer {
 public:

  static const char* ascii_fingerprint; // = "3427B853D0066190C799037982D95E40";
  static const uint8_t binary_fingerprint[16]; // = {0x34,0x27,0xB8,0x53,0xD0,0x06,0x61,0x90,0xC7,0x99,0x03,0x79,0x82,0xD9,0x5E,0x40};

  com_raytheon_uf_common_dataplugin_grib_GribThriftContainer() : numOfRecords(0) {
  }

  virtual ~com_raytheon_uf_common_dataplugin_grib_GribThriftContainer() throw() {}

  int32_t numOfRecords;
  std::vector<com_raytheon_uf_common_dataplugin_grib_GribThriftRecord>  records;

  _com_raytheon_uf_common_dataplugin_grib_GribThriftContainer__isset __isset;

  void __set_numOfRecords(const int32_t val) {
    numOfRecords = val;
  }

  void __set_records(const std::vector<com_raytheon_uf_common_dataplugin_grib_GribThriftRecord> & val) {
    records = val;
  }

  bool operator == (const com_raytheon_uf_common_dataplugin_grib_GribThriftContainer & rhs) const
  {
    if (!(numOfRecords == rhs.numOfRecords))
      return false;
    if (!(records == rhs.records))
      return false;
    return true;
  }
  bool operator != (const com_raytheon_uf_common_dataplugin_grib_GribThriftContainer &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const com_raytheon_uf_common_dataplugin_grib_GribThriftContainer & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(com_raytheon_uf_common_dataplugin_grib_GribThriftContainer &a, com_raytheon_uf_common_dataplugin_grib_GribThriftContainer &b);



#endif
