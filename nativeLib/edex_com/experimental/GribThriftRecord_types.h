/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

/*****************************************************************************************
 * COPYRIGHT (c), 2009, RAYTHEON COMPANY
 * ALL RIGHTS RESERVED, An Unpublished Work
 *
 * RAYTHEON PROPRIETARY
 * If the end user is not the U.S. Government or any agency thereof, use
 * or disclosure of data contained in this source code file is subject to
 * the proprietary restrictions set forth in the Master Rights File.
 *
 * U.S. GOVERNMENT PURPOSE RIGHTS NOTICE
 * If the end user is the U.S. Government or any agency thereof, this source
 * code is provided to the U.S. Government with Government Purpose Rights.
 * Use or disclosure of data contained in this source code file is subject to
 * the "Government Purpose Rights" restriction in the Master Rights File.
 *
 * U.S. EXPORT CONTROLLED TECHNICAL DATA
 * Use or disclosure of data contained in this source code file is subject to
 * the export restrictions set forth in the Master Rights File.
 ******************************************************************************************/

/*
 * Extended thrift protocol to handle messages from edex.
 *
 * <pre>
 *
 * SOFTWARE HISTORY
 *
 * Date         Ticket#     Engineer    Description
 * ------------ ----------  ----------- --------------------------
 * 07/29/13       2215       bkowal     Regenerated for thrift 0.9.0
 *
 * </pre>
 *
 * @author bkowal
 * @version 1
 */
#ifndef GribThriftRecord_TYPES_H
#define GribThriftRecord_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "GridDataRequestMessage_types.h"



typedef struct _com_raytheon_uf_common_dataplugin_grib_GribThriftRecord__isset {
  _com_raytheon_uf_common_dataplugin_grib_GribThriftRecord__isset() : data(false), trueData(false), hybridGrid(false), hybridGridData(false), trueHybridGridData(false), localSection(false), localSectionData(false), message(false), thinnedGrid(false), thinnedGridData(false) {}
  bool data;
  bool trueData;
  bool hybridGrid;
  bool hybridGridData;
  bool trueHybridGridData;
  bool localSection;
  bool localSectionData;
  bool message;
  bool thinnedGrid;
  bool thinnedGridData;
} _com_raytheon_uf_common_dataplugin_grib_GribThriftRecord__isset;

class com_raytheon_uf_common_dataplugin_grib_GribThriftRecord {
 public:

  static const char* ascii_fingerprint; // = "5690BC677047F418DC04C0DF9712EC9C";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0x90,0xBC,0x67,0x70,0x47,0xF4,0x18,0xDC,0x04,0xC0,0xDF,0x97,0x12,0xEC,0x9C};

  com_raytheon_uf_common_dataplugin_grib_GribThriftRecord() : hybridGrid(0), localSection(0), thinnedGrid(0) {
  }

  virtual ~com_raytheon_uf_common_dataplugin_grib_GribThriftRecord() throw() {}

  std::vector<int32_t>  data;
  std::vector<double>  trueData;
  bool hybridGrid;
  std::vector<int32_t>  hybridGridData;
  std::vector<double>  trueHybridGridData;
  bool localSection;
  std::vector<int32_t>  localSectionData;
  com_raytheon_uf_common_dataplugin_grib_request_GridDataRequestMessage message;
  bool thinnedGrid;
  std::vector<int32_t>  thinnedGridData;

  _com_raytheon_uf_common_dataplugin_grib_GribThriftRecord__isset __isset;

  void __set_data(const std::vector<int32_t> & val) {
    data = val;
  }

  void __set_trueData(const std::vector<double> & val) {
    trueData = val;
  }

  void __set_hybridGrid(const bool val) {
    hybridGrid = val;
  }

  void __set_hybridGridData(const std::vector<int32_t> & val) {
    hybridGridData = val;
  }

  void __set_trueHybridGridData(const std::vector<double> & val) {
    trueHybridGridData = val;
  }

  void __set_localSection(const bool val) {
    localSection = val;
  }

  void __set_localSectionData(const std::vector<int32_t> & val) {
    localSectionData = val;
  }

  void __set_message(const com_raytheon_uf_common_dataplugin_grib_request_GridDataRequestMessage& val) {
    message = val;
  }

  void __set_thinnedGrid(const bool val) {
    thinnedGrid = val;
  }

  void __set_thinnedGridData(const std::vector<int32_t> & val) {
    thinnedGridData = val;
  }

  bool operator == (const com_raytheon_uf_common_dataplugin_grib_GribThriftRecord & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    if (!(trueData == rhs.trueData))
      return false;
    if (!(hybridGrid == rhs.hybridGrid))
      return false;
    if (!(hybridGridData == rhs.hybridGridData))
      return false;
    if (!(trueHybridGridData == rhs.trueHybridGridData))
      return false;
    if (!(localSection == rhs.localSection))
      return false;
    if (!(localSectionData == rhs.localSectionData))
      return false;
    if (!(message == rhs.message))
      return false;
    if (!(thinnedGrid == rhs.thinnedGrid))
      return false;
    if (!(thinnedGridData == rhs.thinnedGridData))
      return false;
    return true;
  }
  bool operator != (const com_raytheon_uf_common_dataplugin_grib_GribThriftRecord &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const com_raytheon_uf_common_dataplugin_grib_GribThriftRecord & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(com_raytheon_uf_common_dataplugin_grib_GribThriftRecord &a, com_raytheon_uf_common_dataplugin_grib_GribThriftRecord &b);



#endif
