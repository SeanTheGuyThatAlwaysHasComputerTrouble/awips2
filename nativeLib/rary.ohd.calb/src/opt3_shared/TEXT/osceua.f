C MEMBER OSCEUA
C  (updated on 3/21/97 from old member OSCEUA on NAS-9000)
C
C @PROCESS LVL(77)
      SUBROUTINE OSCEUA(A,MA,IEND,IPASS1,OA,MOA,ILOCOA,MILOC,NOPT)
C
C
C  SHUFFLED COMPLEX EVOLUTION METHOD
C  BY QINGYUN DUAN,
C  DEPT. HYDROLOGY & WATER RESOURCES
C  UNIVERSITY OF ARIZONA,
C  TUCSON, AZ 85721
C
C  WRITTEN IN OCTOBER, 1990, BY Q. DUAN
C  REVISED IN JULY 1991, BY Q. DUAN
C  REVISED IN OCTOBER 1991, BY Q. DUAN
C  REVISED IN MARCH 1997, BY Q. DUAN
C
C  ====================================
C
C  LIST OF INPUT ARGUMENT VARIABLES
C     A(.) = CURRENT PARAMETER SET
C     MA = DIMENSIONING NUMBER FOR A(.)
C     IEND = SEARCH PROGRESS FLAG (=1, FINISHED)
C     IPASS1 = FIRST PASS FLAG (=1, FIRST PASS; =0, 2ND PASS OR AFTER)
C     OA(.) = VECTOR CONTAINING PARAMETER INFORMATION
C     MOA = DIMENSIONING NUMBER FOR OA(.)
C     ILOCOA(.) =  INDEX IDENTIFYING OPTIMIZING PARAMETERS
C     MILOC = DIMENSIONING NUMBER FOR ILOCOA(.)
C     NOPT = NUMBER OF PARAMETERS TO BE OPTIMIZED
C
C  LIST OF SCE ALGORITHMIC PARAMETERS
C     NPT = INITIAL RANDOM SAMPLE POPULATION SIZE
C     NGS = NUMBER OF COMPLEXES IN THE INITIAL POPULATION
C     NPG = NUMBER OF POINTS IN EACH COMPLEX
C     NPS = NUMBER OF POINTS IN A SUB-COMPLEX
C     NSPL =  NUMBER OF SUB-COMPLEX PER LOOP
C     NPT1 = ACTUAL POPULATION SIZE
C     NGS1 = NUMBER OF COMPLEXES IN THE CURRENT POPULATION
C     NGS2 = NUMBER OF COMPLEXES IN THE PREVIOUS POPULATION
C     ISEED = SEED FOR GENERATING RANDOM NUMBER (FROM USER INPUT)
C     ISEED1 = ACTUAL RANDOM SEED
C     IDEFLT = ALGORITHM PARAMETER CONTROL FLAG
C            = 1, USER SPECIFIED
C            = ELSE, DEFAULT VALUES
C     MINGS = MINIMUM NUMBER OF COMPLEXES MAINTAINED IN A POPULATION
C             AFTER COMPLEX REDUCTION
C     INIFLG = FLAG ON WHETHER TO INCLUDE THE INITIAL POINT IN POPULATION
C            = 0, NOT INCLUDED
C            = 1, INCLUDED
C     IPRINT = FLAG FOR THE PRINT-OUT AFTER EACH SHUFFLING LOOP
C            = 0, PRINT INFORMATION ON THE BEST POINT OF THE POPULATION
C            = 1, PRINT INFORMATION ON EVERY POINT OF THE POPULATION
C
C  CONVERGENCE CHECK PARAMETERS
C     MAXN = MAX NO. OF FUNCTION EVALUATIONS ALLOWED IN OPTIMIZATION
C     KSTOP = MAX NO. OF SUCCESSIVE SHUFFLING LOOPS W/O IMPROVING
C             OBJECTIVE FUNCTION ALLOWED BEFORE STOPPING OPTIMIZATION
C     PCENTO = TOLERANCE ON FUNCTION IMPROVEMENT
C
C  LIST OF LOCAL VARIABLES
C     X(.,.) = COORDINATES OF POINTS IN THE POPULATION
C     XF(.) = FUNCTION VALUES OF X(.,.)
C     CX(.,.) = COORDINATES OF POINTS IN COMPLEXES
C     CF(.) = FUNCTION VALUES OF CX(.,.)
C     S(.,.) = COORDINATES OF POINTS IN THE CURRENT SUB-COMPLEX
C     SF(.) = FUNCTION VALUES OF S(.,.)
C     BESTX(.) = BEST POINT AFTER PRE-SPECIFIED NUMBER OF LOOPS
C     BESTF = FUNCTION VALUE OF BESTX(.)
C     WORSTX(.) = WORST POINT AFTER PRE-SPECIFIED NUMBER OF LOOPS
C     WORSTF = FUNCTION VALUE OF WORSTX(.)
C     XMAX(I) = LARGEST PARAMETER VALUE IN THE POPULATION IN ITH-AXIS
C     XMIN(I) = SMALLEST PARAMETER VALUE IN THE POPULATION IN ITH-AXIS
C     XMEAN(I) = MEAN OF PARAMETERS IN THE COMPLEX IN ITH-AXIS
C     XNSTD(I) = NORMALIZED STANDARD DEVIATION OF PARAMETERS
C                OF THE POPULATION IN ITH-AXIS
C     BOUND(I) = RANGE ON ITH PARAMETERS BEING OPTIMIZED
C     LCS(.) = INDICES FOR POSITIONS OF CURRENT SUB-COMPLEX IN X(.,.)
C
C  COMMON BLOCKS
C
C
C      INCLUDED FROM OCOMMON
C
      INCLUDE 'common/ionum'
      INCLUDE 'common/fdbug'
      INCLUDE 'ocommon/opschm'
      INCLUDE 'ocommon/opsce'
C
C  COMMON BLOCK FOR SCE-UA SEARCH SCHEME
C
C
      COMMON/OSCEV/X,XF,S,SF,CX,CF,BESTX,BESTF,WORSTX,WORSTF,
     &             XPBIAS,XRCOF,CPBIAS,CRCOF,SPBIAS,SRCOF,BU,BL,BOUND,
     &             XMAX,XMIN,XMEAN,XNSTD,LCS,ISEED1,NPT1,NGS1,NGS2,
     &             ICALL,IPT,NLOOP,IGS,LOOP,ISTEP,NOPT1,NOPT2,
     &             YDRMS,YVRMS,YSABDF,YSABLG,YRMOD1,YHMLE,YPBIAS,
     &             YRCOF,YLAMDA,YOPTIM
C
C  ARRAYS FROM THE INPUT ARGUMENT
      DIMENSION A(MA),OA(MOA),ILOCOA(MILOC)
C
      integer, parameter::MaxNopt=100
	  integer, parameter::MaxNpg=2*MaxNopt+1,MaxNpt=MaxNopt*MaxNpg
C  LOCAL ARRAYS
C      DIMENSION X(MaxNpt,16),BESTX(16),WORSTX(16),XF(MaxNpt),
      DIMENSION X(MaxNpt,MaxNopt),BESTX(MaxNopt),WORSTX(MaxNopt),
     &          XF(MaxNpt),XPBIAS(MaxNpt),XRCOF(MaxNpt),CPBIAS(MaxNpt),
     &          CRCOF(MaxNpt),SPBIAS(MaxNpg),SRCOF(MaxNpg),TEMP(MaxNpt),
     &          CRITER(10)
C      DIMENSION S(33,16),SF(33),LCS(33),CX(MaxNpt,16),CF(MaxNpt)
C      DIMENSION BU(16),BL(16),BOUND(16),XMAX(16),XMIN(16),XMEAN(16),
C     &          XNSTD(16)
      DIMENSION S(MaxNpg,MaxNopt),SF(MaxNpg),LCS(MaxNpg),
     &          CX(MaxNpt,MaxNopt),CF(MaxNpt)
      DIMENSION BU(MaxNopt),BL(MaxNopt),BOUND(MaxNopt),XMAX(MaxNopt),
     &          XMIN(MaxNopt),XMEAN(MaxNopt),XNSTD(MaxNopt)
C
      CHARACTER*4 REDUC,INITL,YSFLG,NOFLG
C
C    ================================= RCS keyword statements ==========
      CHARACTER*68     RCSKW1,RCSKW2
      DATA             RCSKW1,RCSKW2 /                                 '
     .$Source: /fs/hseb/ob72/rfc/calb/src/opt3_shared/RCS/osceua.f,v $
     . $',                                                             '
     .$Id: osceua.f,v 1.5 2003/08/26 17:45:45 wkwock Exp $
     . $' /
C    ===================================================================
C
      DATA YSFLG/'YES '/
      DATA NOFLG/'NO  '/
C
      IF(ITRACE.GE.1) WRITE(IODBUG,1)
    1 FORMAT(1H0,'** OSCEUA ENTERED')
C
      CALL FSTWHR('OSCEUA  ',0,OLDOPN,IOLDOP)
C
      IF(IPASS1.EQ.0) GO TO 1111
C
      NOPT1 = 8
      NOPT2 = 13
      IF (NOPT.LE.8) NOPT1 = NOPT
      IF (NOPT.LE.13) NOPT2 = NOPT
C
C  INITIALIZE RANDOM SEED
      ISEED1 = -ABS(ISEED)
      IF(IDEFLT.NE.1) THEN
        NPG=2*NOPT+1
        NPS=NOPT+1
        NSPL=NPG
        INIFLG = 1
        IPRINT = 0
      END IF
C
C  CHECK THE SCE ALGORITHM CONTROL PARAMETERS
      IF (MINGS .LT. 1 .OR. MINGS .GT. NGS) THEN
        WRITE(IPR,902) MINGS
  902   FORMAT(1H0,11X,'**WARNING** THE MINIMUM NUMBER OF COMPLEXES ',
     *         I2,' IS NOT A VALID CHOICE. SET IT TO NGS')
        CALL WARN
        MINGS = NGS
      END IF
C
      IF (NPG .LT. 2 .OR. NPG .GT. MaxNpt) THEN
        WRITE(IPR,903) NPG
  903   FORMAT(1H0,11X,'**WARNING** THE NUMBER OF POINTS IN A COMPLEX ',
     *         I4,' IS NOT A VALID CHOICE, SET IT TO DEFAULT')
        CALL WARN
        NPG = 2*NOPT+1
      END IF
C
      IF (NPS.LT.2 .OR. NPS.GT.NPG .OR. NPS.GT.MaxNpg) THEN
        WRITE(IPR,904) NPS
  904   FORMAT(1H0,11X,'**WARNING** THE NUMBER OF POINTS IN A SUB-',
     *  'COMPLEX ',I4,' IS NOT A VALID CHOICE, SET IT TO DEFAULT')
        CALL WARN
        NPS = NOPT + 1
      END IF
C
      IF (NSPL .LT. 1) THEN
        WRITE(IPR,905) NSPL
  905   FORMAT(1H0,11X,'**WARNING** THE NUMBER OF EVOLUTION STEPS ',
     *         'TAKEN IN EACH COMPLEX BEFORE SHUFFLING ',I4,/,23X,
     *         'IS NOT A VALID CHOICE, SET IT TO DEFAULT')
        CALL WARN
        NSPL = NPG
      END IF
C
C  COMPUTE THE TOTAL NUMBER OF POINTS IN INITIAL POPULATION
      NPT = NGS * NPG
C
      IF (NPT .GT. MaxNpt) THEN
        WRITE(IPR,906) NPT
  906   FORMAT(1H0,11X,'**WARNING** THE NUMBER OF POINTS IN INITIAL ',
     *         'POPULATION ',I5,' EXCEED THE POPULATION LIMIT,',/,23X,
     *         'SET NGS TO 2, AND NPG, NPS AND NSPL TO DEFAULTS')
        CALL WARN
        NGS = 2
        NPG = 2*NOPT + 1
        NPS = NOPT + 1
        NSPL = NPG
        NPT = NGS * NPG
      END IF
C
      NPT1 = NPT
      NGS1 = NGS
      IF (MINGS .LT. NGS) THEN
        REDUC = YSFLG
      ELSE
        REDUC = NOFLG
      END IF
C
      IF (INIFLG .NE. 0) THEN
        INITL = YSFLG
      ELSE
        INITL = NOFLG
      END IF
C
      WRITE(IPR,570) NGS,NPG,NPT,NPS,NSPL,REDUC,MINGS,INITL
C
      DO 10 J = 1, NOPT
        BL(J) = OA(ILOCOA(J)+6)
        BU(J) = OA(ILOCOA(J)+7)
        BOUND(J) = BU(J) - BL(J)
   10 CONTINUE
      ICALL = 0
      IPT = 0
      NLOOP = 0
C
C  PRINT THE INITIAL POINT AND ITS STATISTICS
  200 WRITE(IPR,580)
      WRITE(IPR,582) (OA(ILOCOA(J)+2),OA(ILOCOA(J)+3),J=1,NOPT2)
      WRITE(IPR,584) (A(J),J=1,NOPT2)
      IF (NOPT.LT.14) GO TO 201
      WRITE(IPR,582) (OA(ILOCOA(J)+2),OA(ILOCOA(J)+3),J=14,NOPT)
      WRITE(IPR,584) (A(J),J=14,NOPT)
  201 CONTINUE
      WRITE(IPR,586) DRMS,VRMS,SABSDF,SABSLG,PBIAS,RMOD1,RCOF,
     *               HMLE,TLAMDA
C
      YOPTIM = 1.0E+20
      IF (INIFLG.EQ.0) GO TO 25
C
C  BEGIN SCE OPTIMIZATION
 1111 CONTINUE
C
C  RECORD THE STATISTICS FOR THE BEST PARAMETER ESTIMATE
      IF(OPTIM.LE.YOPTIM) THEN
        YDRMS = DRMS
        YVRMS = VRMS
        YSABDF = SABSDF
        YSABLG = SABSLG
        YRMOD1 = RMOD1
        YHMLE = HMLE
        YPBIAS = PBIAS
        YRCOF = RCOF
        YLAMDA = TLAMDA
        YOPTIM = OPTIM
        NNBEST = ICALL
      END IF
C
      IF(NLOOP.NE.0) GO TO 1000
      IPT = IPT + 1
      DO 20 J = 1, NOPT
        X(IPT,J) = A(J)
   20 CONTINUE
      XF(IPT) = OPTIM
      XPBIAS(IPT) = PBIAS
      XRCOF(IPT) = RCOF
      ICALL = ICALL + 1
      IF (ICALL .GE. MAXN) NPT1 = IPT
   25 CONTINUE
C
C  GENERATE A RANDOM POINT DISTRIBUTED UNIFORMERLY IN PARAMETER SPACE
C  TO FILL IN THE INITIAL MATRIX X(.,.)
      IF (IPT.LT.NPT1) THEN
        DO 30 J = 1, NOPT
          RAND = RAN1(ISEED1)
          A(J) = BL(J) + BOUND(J) * RAND
   30   CONTINUE
        GO TO 8888
      END IF
C
C  ARRANGE THE POINTS IN ORDER OF INCREASING FUNCTION VALUE
      IF(NPT1.LE.1) GO TO 51
      DO 32 I = 1, NPT1
        TEMP(I) = XF(I)
   32 CONTINUE
      CALL SORT(1,NPT1,XPBIAS,TEMP)
      DO 34 I = 1, NPT1
        TEMP(I) = XF(I)
   34 CONTINUE
      CALL SORT(1,NPT1,XRCOF,TEMP)
      CALL SORT(NOPT,NPT1,X,XF)
C
C  RECORD THE BEST AND WORST POINTS
      DO 50 J = 1, NOPT
        BESTX(J) = X(1,J)
        WORSTX(J) = X(NPT1,J)
   50 CONTINUE
   51 CONTINUE
      BESTF = XF(1)
      BESTPB = XPBIAS(1)
      BESTRC = XRCOF(1)
      WORSTF = XF(NPT1)
C
C  COMPUTE THE INITIAL POPULATION STATISTICS
      CALL OPARST(NOPT,NPT1,BOUND,X,XMAX,XMIN,XMEAN,XNSTD,GNRNG,
     &            IPCNVG)
C
C  PRINT RESULTS FOR THE INITIAL POPULATION
      WRITE(IPR,605)
      WRITE(IPR,610) (OA(ILOCOA(J)+2),OA(ILOCOA(J)+3),J=1,NOPT1)
      IF (NOPT.LT.9) GO TO 301
      WRITE(IPR,620) (OA(ILOCOA(J)+2),OA(ILOCOA(J)+3),J=9,NOPT)
  301 CONTINUE
      WRITE(IPR,630) NLOOP,ICALL,NGS1,BESTF,BESTPB,BESTRC,
     *               (BESTX(J),J=1,NOPT1)
      IF (NOPT.LT.9) GO TO 302
      WRITE(IPR,640) (BESTX(J),J=9,NOPT)
  302 CONTINUE
C
      IF (IPRINT.EQ.1) THEN
        WRITE(IPR,730) NLOOP
        DO 755 I = 1, NPT1
        WRITE(IPR,740) XF(I),XPBIAS(I),XRCOF(I),(X(I,J),J=1,NOPT1)
        IF (NOPT.LT.9) GO TO 307
        WRITE(IPR,750) (X(I,J),J=9,NOPT)
  307   CONTINUE
  755   CONTINUE
      END IF
C
      IF (ICALL .GE. MAXN) GO TO 9000
      IF (IPCNVG .EQ. 1) GO TO 9200
C
      NLOOP = 1
      IGS = 1
      LOOP = 1
      ISTEP = 0
C
C  BEGIN THE MAIN LOOP ----------------
 1000 CONTINUE
      IF (ISTEP.NE.0) GO TO 2222
C
C  BEGIN LOOP ON COMPLEXES
      IF (LOOP.EQ.1) THEN
C
C  ASSIGN POINTS INTO COMPLEXES
        DO 54 K1 = 1, NPG
          K2 = (K1-1) * NGS1 + IGS
          DO 53 J = 1, NOPT
            CX(K1,J) = X(K2,J)
   53     CONTINUE
          CF(K1) = XF(K2)
          CPBIAS(K1) = XPBIAS(K2)
          CRCOF(K1) = XRCOF(K2)
   54   CONTINUE
      END IF
C
C  BEGIN INNER LOOP - RANDOM SELECTION OF SUB-COMPLEXES ---------------
 2000 CONTINUE
C
C  CHOOSE A SUB-COMPLEX (NPS POINTS) ACCORDING TO A LINEAR
C  PROBABILITY DISTRIBUTION
      IF (NPS .EQ. NPG) THEN
        DO 55 K = 1, NPS
          LCS(K) = K
   55   CONTINUE
        GO TO 85
      END IF
C
      RAND = RAN1(ISEED1)
      LCS(1) = 1 + INT(NPG + 0.5 - SQRT( (NPG+.5)**2 -
     &         NPG * (NPG+1) * RAND ))
      DO 80 K = 2, NPS
   60   RAND = RAN1(ISEED1)
        LPOS = 1 + INT(NPG + 0.5 - SQRT((NPG+.5)**2 -
     &         NPG * (NPG+1) * RAND ))
        DO 70 K1 = 1, K-1
          IF (LPOS .EQ. LCS(K1)) GO TO 60
   70   CONTINUE
        LCS(K) = LPOS
   80 CONTINUE
C
C  ARRANGE THE SUB-COMPLEX IN ORDER OF INCEASING FUNCTION VALUE
      CALL SORT1(NPS,LCS)
C
C  CREATE THE SUB-COMPLEX ARRAYS
   85 DO 100 K = 1, NPS
        DO 90 J = 1, NOPT
          S(K,J) = CX(LCS(K),J)
   90   CONTINUE
        SF(K) = CF(LCS(K))
        SPBIAS(K) = CPBIAS(LCS(K))
        SRCOF(K) = CRCOF(LCS(K))
  100 CONTINUE
C
C  USE THE SUB-COMPLEX TO GENERATE A NEW POINT
 2222 CONTINUE
      CALL OCCEUA(NOPT,NPS,S,SF,SPBIAS,SRCOF,BL,BU,XNSTD,ICALL,ISEED1,
     &            A,MA,OPTIM,PBIAS,RCOF,ISTEP)
      IF (ICALL .GE. MAXN) THEN
        WRITE(IPR,790) LOOP,IGS,NLOOP
        LOOP = NSPL
        IGS = NGS1
        GO TO 109
      END IF
      IF (ISTEP.LT.4) THEN
        GO TO 8888
      ELSE
        ISTEP = 0
      END IF
C
  109 CONTINUE
C
C  IF THE SUB-COMPLEX IS ACCEPTED, REPLACE THE NEW SUB-COMPLEX
C  INTO THE COMPLEX
      DO 120 K = 1, NPS
        DO 110 J = 1, NOPT
          CX(LCS(K),J) = S(K,J)
  110   CONTINUE
        CF(LCS(K)) = SF(K)
        CPBIAS(LCS(K)) = SPBIAS(K)
        CRCOF(LCS(K)) = SRCOF(K)
  120 CONTINUE
C
C  SORT THE POINTS OF THE CURRENT COMPLEX
      DO 210 K = 1, NPG
        TEMP(K) = CF(K)
  210 CONTINUE
      CALL SORT(1,NPG,CPBIAS,TEMP)
      DO 220 K = 1, NPG
        TEMP(K) = CF(K)
  220 CONTINUE
      CALL SORT(1,NPG,CRCOF,TEMP)
      CALL SORT(NOPT,NPG,CX,CF)
C
C  END OF INNER LOOP ------------
      IF (LOOP.EQ.NSPL) THEN
        LOOP = 1
      ELSE
        LOOP = LOOP + 1
        GO TO 2000
      END IF
C
C  REPLACE THE NEW COMPLEX INTO ORIGINAL POPULATION X(.,.)
      DO 125 K1 = 1, NPG
        K2 = (K1-1) * NGS1 + IGS
        DO 124 J = 1, NOPT
          X(K2,J) = CX(K1,J)
  124   CONTINUE
        XF(K2) = CF(K1)
        XPBIAS(K2) = CPBIAS(K1)
        XRCOF(K2) = CRCOF(K1)
  125 CONTINUE
C
C  END LOOP ON COMPLEXES
      IF (IGS.EQ.NGS1) THEN
        IGS = 1
      ELSE
        IGS = IGS + 1
        GO TO 1000
      END IF
C
C  RE-SORT THE POINTS
      DO 224 I = 1, NPT1
        TEMP(I) = XF(I)
  224 CONTINUE
      CALL SORT(1,NPT1,XPBIAS,TEMP)
      DO 225 I = 1, NPT1
        TEMP(I) = XF(I)
  225 CONTINUE
      CALL SORT(1,NPT1,XRCOF,TEMP)
      CALL SORT(NOPT,NPT1,X,XF)
C
C  RECORD THE BEST AND WORST POINTS
      DO 130 J = 1, NOPT
        BESTX(J) = X(1,J)
        WORSTX(J) = X(NPT1,J)
  130 CONTINUE
      BESTF = XF(1)
      BESTPB = XPBIAS(1)
      BESTRC = XRCOF(1)
      WORSTF = XF(NPT1)
C
C  COMPUTE THE POPULATION STATISTICS
      CALL OPARST(NOPT,NPT1,BOUND,X,XMAX,XMIN,XMEAN,XNSTD,GNRNG,
     &            IPCNVG)
C
C  PRINT RESULTS FOR THE LOOP
      IF (MOD(NLOOP,5).NE.0) GO TO 401
      WRITE(IPR,610) (OA(ILOCOA(J)+2),OA(ILOCOA(J)+3),J=1,NOPT1)
      IF (NOPT.LT.9) GO TO 401
      WRITE(IPR,620) (OA(ILOCOA(J)+2),OA(ILOCOA(J)+3),J=9,NOPT)
  401 CONTINUE
      WRITE(IPR,630) NLOOP,ICALL,NGS1,BESTF,BESTPB,BESTRC,
     *               (BESTX(J),J=1,NOPT1)
      IF (NOPT.LT.9) GO TO 402
      WRITE(IPR,640) (BESTX(J),J=9,NOPT)
  402 CONTINUE
C
      IF (IPRINT.EQ.1) THEN
        WRITE(IPR,730) NLOOP
        DO 756 I = 1, NPT1
        WRITE(IPR,740) XF(I),XPBIAS(I),XRCOF(I),(X(I,J),J=1,NOPT1)
        IF (NOPT.LT.9) GO TO 407
        WRITE(IPR,750) (X(I,J),J=9,NOPT)
  407   CONTINUE
  756   CONTINUE
      END IF
C
C  TEST IF MAXIMUM NUMBER OF FUNCTION EVALUATIONS EXCEEDED
      IF (ICALL .GE. MAXN) GO TO 9000
C
C  COMPUTE THE COUNT ON SUCCESSIVE LOOPS W/O FUNCTION IMPROVEMENT
      CRITER(10) = BESTF
      IF (NLOOP.LT.(KSTOP+1)) GO TO 132
      TIMEOU = (CRITER(10-KSTOP)-CRITER(10))/CRITER(10-KSTOP)
      IF (TIMEOU.LT.PCENTO) GO TO 9100
  132 CONTINUE
      DO 134 L = 1, 9
        CRITER(L) = CRITER(L+1)
  134 CONTINUE
C
C  IF POPULATION IS CONVERGED INTO A SUFFICIENTLY SMALL SPACE,
C  TERMINATE THE OPTIMIZATION SEARCH
      IF (IPCNVG.EQ.1) GO TO 9200
C
C  NONE OF THE STOPPING CRITERIA IS SATISFIED, CONTINUE SEARCH
C
C  CHECK FOR COMPLEX REDUCTION
      IF (NGS1 .GT. MINGS) THEN
        NGS2 = NGS1
        NGS1 = NGS1 - 1
        NPT1 = NGS1 * NPG
        CALL COMP(NOPT,NPT1,NGS1,NGS2,NPG,X,XF,CX,CF)
      END IF
C
C  END OF MAIN LOOP -----------
      NLOOP = NLOOP + 1
      GO TO 1000
C
C  SEARCH TERMINATED
 9000 CONTINUE
      WRITE(IPR,800) MAXN
      GO TO 910
 9100 CONTINUE
      WRITE(IPR,810) PCENTO*100.,KSTOP
      GO TO 910
 9200 WRITE(IPR,820) GNRNG*100.
C
  910 CONTINUE
      IEND = 1
      DO 999 J = 1, NOPT
        A(J) = BESTX(J)
  999 CONTINUE
      OPTIM = BESTF
      PBIAS = BESTPB
      RCOF = BESTRC
C
C  PRINT THE FINAL PARAMETER ESTIMATES AND ITS STATISTICS
      WRITE(IPR,830)
      WRITE(IPR,582) (OA(ILOCOA(J)+2),OA(ILOCOA(J)+3),J=1,NOPT2)
      WRITE(IPR,584) (A(J),J=1,NOPT2)
      IF (NOPT.LT.14) GO TO 501
      WRITE(IPR,582) (OA(ILOCOA(J)+2),OA(ILOCOA(J)+3),J=14,NOPT)
      WRITE(IPR,584) (A(J),J=14,NOPT)
  501 CONTINUE
      WRITE(IPR,586) YDRMS,YVRMS,YSABDF,YSABLG,YPBIAS,YRMOD1,YRCOF,
     *               YHMLE,YLAMDA
C
 8888 CONTINUE
C
      CALL FSTWHR(OLDOPN,IOLDOP,OLDOPN,IOLDOP)
C
      IF (ITRACE.GE.1) WRITE(IODBUG,1002)
 1002 FORMAT(1H0,'** EXIT OSCEUA')
C
C  END OF SUBROUTINE OSCEUA
      RETURN
  570 FORMAT(1H1,48X,'SCE ALGORITHM CONTROL PARAMETERS',/,49X,32(1H=),
     *//,4X,'NUMBER OF',6X,'POINTS PER',6X,'POINTS IN',7X,'POINTS PER',
     *5X,'EVOL. STEPS',6X,'COMPLX NO.',6X,'MIN COMPLEX',6X,'INI. POINT'
     *,/,4X,'COMPLEXES',7X,'COMPLEX',7X,'INI. POPUL.',6X,'SUB-COMPLX',
     *5X,'PER COMPLEX',6X,'REDUCTION',7X,'NO. ALLOWED',7X,'INCLUDED',/,
     *4X,9(1H-),6X,10(1H-),5X,11(1H-),6X,10(1H-),5X,11(1H-),6X,10(1H-),
     *6X,11(1H-),6X,10(1H-)//,1X,5(I8,8X),5X,A4,7X,I8,15X,A4)
  580 FORMAT(1H0,//,1X,'*** PRINT THE INITIAL POINT AND ITS STATISTICS',
     *           ' ***',/,1X,62(1H=))
  582 FORMAT(1H0,/,3X,13(2X,2A4))
  584 FORMAT(1H0,13F10.3)
  586 FORMAT(1H0,/,2X,'DAILY RMS',6X,'MON VRMS',5X,'/O-S/**EXP',2X,
     *       '/LOG ERR/**EXP',3X,'% BIAS',6X,'1.-MOD RCOF',6X,'R COEF',
     *       6X,'HMLE VALUE',3X,'LAMDA VALUE',/,2X,9(1H-),6X,8(1H-),5X,
     *       10(1H-),2X,14(1H-),3X,6(1H-),6X,11(1H-),6X,6(1H-),6X,
     *       10(1H-),3X,11(1H-),//,9(E12.4,2X))
  590 FORMAT(1H0,23X,E12.4,F8.2,F8.4,8F10.3)
  600 FORMAT(1H0,51X,8F10.3)
  605 FORMAT(1H0,//,1X,'*** PRINT THE RESULTS OF THE SCE SEARCH ***',/,
     *       1X,62(1H=))
  610 FORMAT(1H0,1X,' LOOP  RUN  # CMPLXS   CRITERION  % BIAS  R',
     *       ' COEF',2X,8(2X,2A4))
  620 FORMAT(1H0,51X,8(2X,2A4))
  630 FORMAT(1H0,I5,1X,I5,2X,I5,3X,E12.4,F8.2,F8.4,8F10.3)
  640 FORMAT(1H0,49X,8F10.3)
  730 FORMAT(1H0,/,1X,'PRINT THE POPULATION AT LOOP ',I5)
  740 FORMAT(23X,E12.4,F8.2,F8.4,8F10.3)
  750 FORMAT(51X,8F10.3)
  790 FORMAT(1H0,1X,'***  SEARCH STOPPED AT SUB-COMPLEX ',I3,
     *       ' OF COMPLEX ',I3,' OF LOOP ',I5)
  800 FORMAT(1H0,1X,'*** OPTIMIZATION TERMINATED BECAUSE THE',
     *       ' MAXIMUM NUMBER OF RUNS  (',I5,')  HAS BEEN REACHED')
  810 FORMAT(1H0,1X,'*** OPTIMIZATION TERMINATED BECAUSE THE',
     *       ' CRITERION VALUE WAS NOT CHANGED ',F5.2,'  PERCENT IN ',
     *       I2,'  LOOPS')
  820 FORMAT(1H0,1X,'*** OPTIMIZATION TERMINATED BECAUSE THE',
     *       ' POPULATION HAS CONVERGED INTO ',F5.2,'  PERCENT OF',
     *       ' THE FEASIBLE SPACE')
  830 FORMAT(1H0,//,1X,'*** PRINT THE FINAL PARAMETER ESTIMATES AND',
     *       ' THE STATISTICS ***',/,1X,62(1H=))
      END
