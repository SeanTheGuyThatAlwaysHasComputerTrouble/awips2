C  =====================================================================
C  pgm: MX_MAIN .. Mainline to generate hrap files and/or run mapxx
C  pgm:            to generate MAPX time series using xmrg files
C
C  use:     mapx  [cntl-fil]  [out-fil]
C
C   in: cntl-fil . (optional) pathname of control file, if not given
C   in:            the user will be prompted for it - CHAR*128
C   in:            (note, use "tty" for interactive input)
C   in: out-fil .. (optional) pathname of output file, if not given
C   in:            the user will be prompted for it - CHAR*128
C   in:            (note, use "tty" for output to the terminal)
C   in: (file) ... input ".latlon" file with lat/lon coordinates
C  i/o: (file) ... input and or output ".hrap" file with grid coords
C  out: (file) ... time series mapx output file: <name>.MAPX01_jjj_hhnn
C  out: (file) ... missed data status file: MISSED.LOG_jjj_hhnn
C  oth: (files) .. internal usage files mayb be generated by "system"
C  oth:            commands and later removed in the current dir:
C  oth:              temp1  temp2  temp.MISSED_LOG
C  oth:              mapx_tmp.out  mapx_cv.out  mapx_zp.out
C   in: (common) . Common 'uiox' contains variables:
C   in:              ICD .. input unit number for the control file
C   in:              LP  .. output unit number for program status
C   in: (common) . Common 'upvrsx' contains variables:
C   in:              PGMVRN .. program version number as char str
C   in:              PGMVRD .. program version date as 'mm/dd/yy'
C
C  rqd: MX_UPRIMO,MXC_HEAD,UPCLOS
C  rqd: MXC_INIT,MXC_READ,MXC_LIST,MXC_ERRS,MXC_CHEK
C  rqd: MXL_PATH,MXL_LIST,MXL_EXEC,MXL_ERRS
C  rqd: MXX_PATH,MXX_LIST,MXX_MAPX
C  =====================================================================
      SUBROUTINE MX_MAIN

      EXTERNAL   MX_UPRIMO,MXC_HEAD,UPCLOS
      EXTERNAL   MXC_INIT,MXC_READ,MXC_LIST,MXC_ERRS,MXC_CHEK
      EXTERNAL   MXL_PATH,MXL_LIST,MXL_EXEC,MXL_ERRS
      EXTERNAL   MXX_PATH,MXX_LIST,MXX_MAPX

      INCLUDE 'uiox'
      INCLUDE 'upvrsx'

      REAL            X(5000),Y(5000),FLAT(5000),FLON(5000)
      INTEGER         IY(4000),IXB(4000),IXE(4000)
      INTEGER         MX,IDIM

      CHARACTER*32000 KARR
      INTEGER         IARR(8000)
      REAL            RARR(8000)
      INTEGER         LARR

      CHARACTER*128   NAMLLG,DIRGRD,DIRMAP
      CHARACTER*128   FLLATL,FLHRAP,FLMISS
      CHARACTER*32    PREF
      CHARACTER*3     UNIT
      CHARACTER*8     XTIME
      CHARACTER*8     BASINS(200)
      INTEGER         ISTART,IEND,LLRUN,NYY,DT,ICV
      INTEGER         RMISS,NCOL,MAXBSN,NAREA,ISTAT,IERR

      EQUIVALENCE    (KARR,RARR)
      EQUIVALENCE    (IARR,RARR)
C
C    ================================= RCS keyword statements ==========
      CHARACTER*68     RCSKW1,RCSKW2
      DATA             RCSKW1,RCSKW2 /                                 '
     .$Source: /fs/hseb/ob72/rfc/calb/src/mapx_main/RCS/mx_main.f,v $
     . $',                                                             '
     .$Id: mx_main.f,v 1.2 2004/08/10 15:02:17 dsa Exp $
     . $' /
C    ===================================================================
C

      DATA            LARR   / 8000 /
      DATA            MX     / 5000 /
      DATA            IDIM   / 4000 /
      DATA            MAXBSN /  200 /

C  = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
C  Subroutine ARGVER outputs the version/date info and exits the
C   program if the first command line argument is "-version"
C
      CALL ARGVER()

C  = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
C  Set input and output unit numbers, open files
C   Open input and output files                           - MX_UPRIMO
C   Output a heading                                      - MX_HEAD

        CALL MX_UPRIMO(IERR)
        IF (IERR .NE. 0) STOP 77
        CALL MX_HEAD(PGMVRN,PGMVRD)

C  = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
C  Read control file, output results
C   Initialize mapx variables to their default values     - MXC_INIT
C   Locate, read, and parse the given control file        - MXC_READ
C   Close input control file                              - UPCLOS
C   Run "ofs" dump mxco cmd to get basins if called for   - MXO_MXCO
C   Output final file program variables to log file       - MXC_LIST
C   Output any errors during the reading of the input     - MXC_ERRS
C   Check for obvious errors in values from input file    - MXC_CHEK

        CALL MXC_INIT(ISTART,IEND,LLRUN,NAMLLG,DIRGRD,
     $                PREF,NYY,DT,ICV,RMISS,UNIT,
     $                NCOL,DIRMAP,MAXBSN,NAREA,BASINS,XTIME)

        CALL MXC_READ(ISTART,IEND,LLRUN,NAMLLG,DIRGRD,
     $                PREF,NYY,DT,ICV,RMISS,UNIT,
     $                NCOL,DIRMAP,MAXBSN,NAREA,BASINS,XTIME,
     $                ICD,ISTAT)

        CALL UPCLOS(ICD,' ',IERR)

        CALL MXO_MXCO(LARR,KARR,IARR,RARR,NAREA,BASINS,MAXBSN,ISTAT)

        CALL MXC_LIST(ISTART,IEND,LLRUN,NAMLLG,DIRGRD,
     $                PREF,NYY,DT,ICV,RMISS,UNIT,
     $                NCOL,DIRMAP,MAXBSN,NAREA,BASINS,XTIME)

        CALL MXC_ERRS(ISTAT)

        CALL MXC_CHEK(ISTART,IEND,LLRUN,NAMLLG,DIRGRD,
     $                PREF,NYY,DT,ICV,RMISS,UNIT,
     $                NCOL,DIRMAP,MAXBSN,NAREA,BASINS,
     $                JSTAT)

C  = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
C  Part two, locate or generate the hrap file
C   Generate path(s) to ll_grid file and/or hrap file     - MXL_PATH
C   Output final file pathnames to log file               - MXL_LIST
C   Output errors/notes about getting hrap pathnames      - MXL_ERRS
C   Generate dir paths to input xmrg dir, output dir      - MXX_PATH
C   Output final dir pathnames to log file                - MXX_LIST
C   If finished (LLRUN=0), close PPP database files       - MXO_DBOP
C    and close output status file                         - UPCLOS
C   If LLRUN=4,5,6 then create lat-lon file from PPP db   - MXO_XLAT
C   If LLRUN=1, generate hrap file from ll_grid file      - MXL_EXEC
C   If LLRUN=7,8 then create hrap file from PPP database  - MXO_XHRP

        IF (ISTAT .EQ. 0) THEN
          CALL MXL_PATH(LLRUN,NAMLLG,FLLATL,FLHRAP,IERR,ISTAT)
          CALL MXL_LIST(FLLATL,FLHRAP)
          CALL MXL_ERRS(LLRUN,NAMLLG,IERR)
        ENDIF

        IF (ISTAT.EQ.0 .AND. (LLRUN.EQ.0 .OR. LLRUN.EQ.2 .OR.
     $      LLRUN.EQ.3 .OR. LLRUN.EQ.6 .OR. LLRUN.EQ.8)       ) THEN
          CALL MXX_PATH(DIRGRD,FLMISS,DIRMAP,XTIME,ISTAT)
          CALL MXX_LIST(DIRGRD,FLMISS,DIRMAP)
        ENDIF

        IF (LLRUN .EQ. 0) THEN
          CALL MXO_DBOP('C',IERR)
          CALL UPCLOS(LP,' ',IERR)
          IF (ISTAT .GT. 0) STOP 8
          STOP 0
        ENDIF

        IF (ISTAT.EQ.0 .AND. (LLRUN.EQ.4 .OR.
     $      LLRUN.EQ.5 .OR. LLRUN.EQ.6)       ) THEN
          CALL MXO_XLAT(LARR,KARR,IARR,RARR,FLAT,FLON,NUMLL,
     $                  FLLATL,BASINS,NAREA,ISTAT)
        ENDIF

        IF (ISTAT.EQ.0 .AND. (LLRUN.EQ.1 .OR.
     $      LLRUN.EQ.2 .OR. LLRUN.EQ.5 .OR. LLRUN.EQ.6)) THEN
          CALL MXL_EXEC(MX,X,Y,FLAT,FLON,IDIM,IY,IXB,IXE,
     $                  FLLATL,FLHRAP,NAREA,BASINS,ISTAT)
        ENDIF

        IF (ISTAT.EQ.0 .AND. (LLRUN.GE.7 .AND. LLRUN.LE.8)) THEN
          CALL MXO_XHRP(LARR,KARR,IARR,RARR,IY,IXB,IXE,NUMLL,
     $                  FLHRAP,BASINS,NAREA,ISTAT)
        ENDIF

C  = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
C  Part three, using the hrap file, run the mapxx program
C   Run mapx program                                      - MXX_MAPX

        IF (ISTAT.EQ.0 .AND. (LLRUN.EQ.2 .OR. LLRUN.EQ.3 .OR.
     $      LLRUN.EQ.6 .OR. LLRUN.EQ.8)                       ) THEN
          CALL MXX_MAPX(LP,ISTART,IEND,MAXBSN,NAREA,BASINS,FLHRAP,
     $                  DIRGRD,PREF,NYY,DT,ICV,DIRMAP,RMISS,
     $                  FLMISS,UNIT,NCOL,XTIME,ISTAT)
        ENDIF

C  = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
C  Close files and quit
C   Close PPP database files                              - MXO_DBOP
C   Close output status file                              - UPCLOS

        CALL MXO_DBOP('C',IERR)
        CALL UPCLOS(LP,' ',IERR)
        IF (ISTAT .GT. 0) STOP 8
        STOP 0

      END
