C MODULE EX25
C-----------------------------------------------------------------------
C
C     Given two holleriths compares them to see if they are equal
      logical function lholeq(hol1,hol2)
         integer hol1,hol2
         lholeq = (hol1.eq.hol2)
      end

      SUBROUTINE EX25(PO,D1,W1,LOCTS)

      logical lholeq
C
C  SUBROUTINE ... EX25 ... APRIL, 1982
C
C  PROGRAMMER ... RANDALL P. TETZLOFF, TULSA RFC, FTS 8-736-7121
C
C  PURPOSE ... TO EXECUTE THE PLOT OPERATION
C
C  PROCEDURE ... GET CONTROL VALUES FROM PO() ARRAY
C     DETERMINE SCALE
C     PRINT HEADINGS
C     DETERMINE LISTING FORMAT
C     DETERMINE PLOTTING POINT LOCATIONS
C     PRINT LINE OF PLOT
C
C  ASSUMPTIONS ...
C     1.  TIME SERIES OF UPSTREAM COMPONENTS MUST BE DEFINED
C         IN PREVIOUS OPERATIONS
C     2.  TIME SERIES OF LUMPED UPSTREAM COMPONENTS MUST BE DEFINED
C         IN PREVIOUS OPERATIONS
C     3.  TIME SERIES OF ADJUSTED FLOWS MUST BE BLENDED
C         IN PREVIOUS OPERATIONS
C     4.  TIME SERIES OF ADJUSTED FLOWS MUST BE CONVERTED TO
C         TIME SERIES OF STAGES IN PREVIOUS OPERATION
C     5.  ANY NUMBER OF TIME SERIES CAN BE PLOTTED AS LONG AS THEIR
C         UNITS AND TIME INTERVAL ARE THE SAME
C     6.  THE LISTING AND PLOTTING ORDER WILL BE DETERMINED BY
C         THE ORDER INPUT INTO THE PIN25 SUBROUTINE
C         ... THE FIRST ENTERED WILL BE LISTED FIRST ON THE PLOT
C             LEFT TO RIGHT
C         ... THE LAST ENTERED WILL BE PLOTTED FIRST AND
C             OVERWRITTEN BY PREVIOUS ENTRIES
C     7.  THE LISTING OF MORE THAN THREE TIME SERIES WITH THE PLOT
C         WILL IMPLY THE USE OF AN ORDINATE SIZE OF 51 CHARACTERS VS 101
C     8.  ONLY EIGHT TIME SERIES CAN BE LISTED ON PLOT
C         ... 1ST THREE TIME SERIES (USUALLY M.A.P., STAGE, AND
C             ADJUSTED FLOW) WILL BE LISTED TO LEFT OF ORDINATE
C             AND WILL BE REAL VARIABLES
C         ... LAST FIVE TIME SERIES (SIMULATED, M.A.P.'S, ETC.)
C             WILL BE LISTED TO RIGHT OF ORDINATE AND WILL BE
C             REAL VARIABLES
C
C  DEFINITION OF FILES ...
C     IN     ... CARD READER  ... //FT05F001  DD  *
C     IPR    ... LINE PRINTER ... //FT06F001  DD  SYSOUT=A
C     IPU    ... CARD PUNCH   ... //FT07F001  DD  SYSOUT=B
C     IODBUG ... LINE PRINTER ... //FT08F001  DD  SYSOUT=A
C
C  DEFINITION OF CALLED SUBROUTINES ...
C     EX25   ... EXECUTES THE OPERATION
C     FCONVT ... CALCULATES METRIC TO ENGLISH CONVERSION FACTORS
C     FPRBUG ... CHECKS TRACE LEVEL AND SETS THE
C                DEBUG OUTPUT SWITCH
C     FSTGQ  ... MAKES STAGE-DISCHARGE CONVERSIONS OR OBTAINS
C                INFORMATION ABOUT A RATING CURVE FOR USE WHEN PLOTTING
C                OR TABULATING HYDROGRAPHS
C     MDYH1  ... CONVERTS TIME FROM THE FORECAST COMPONENT INTERNAL
C                TIME TO THE MONTH, DAY, YEAR, AND HOUR OF A
C                SPECIFIED TIME ZONE
C
C  DEFINITION OF CALLED FUNCTIONS ...
C     IFMSNG ... CHECKS TO DETERMINE IF THE ARGUMENT IS A MISSING
C                DATA VALUE
C
C  DEFINITION OF ARRAYS ...
C     CARRYO(4) ... CARRY OVER ARRAY FOR RATING SUBROUTINE
C     D1(1)    ... ARRAY CONTAINING ALL THE TIME SERIES DATA
C     EMPTY(36)  ... FOR FUTURE USE
C     FPTYPE(5) ... CODE FOR TYPE OF FORECAST POINT - 5A4
C     FRMT2(25)  ... VARIABLE FORMAT ARRAY
C     HDATA(1)  ... STAGE DATA TIME SERIES (M)
C     IDEBUG(20) ... LIST OF OPERATION NUMBERS TO PRODUCE
C                    DEBUG PRINTOUT
C     ISEG(2)   ... SEGMENT IDENTIFIER OF SEGMENT BEING EXECUTED
C     LOCPTR(1) ... WORKING SPACE FOR LOOP RATING POINTER ARRAY
C     LOCTS(1)   ... ARRAY OF LOCATIONS OF THE FIRST ELEMENTS OF
C                    EACH TIME SERIES USED IN THE OPERATION
C     MODAYS(12) ... NUMBER OF DAYS IN EACH MONTH
C     MONTH(12)  ... ALPHA 4 CHAR MONTHS OF THE YEAR
C     NOW(5)    ... THE CURRENT TIME FROM THE COMPUTER'S CLOCK
C                   NOW(1) = MONTH
C                   NOW(2) = DAY
C                   NOW(3) = 4 DIGIT YEAR
C                   NOW(4) = HOUR AND MINUTES
C                   NOW(5) = SECONDS AND MILLISECONDS
C     OPNAME(2) ... NAME OF OPERATION BEING EXECUTED
C     PNAME(5)  ... PROCESS NAME ... FORMAT (5A4)
C     PO(1)     ... USED TO STORE ALL THE PARAMETERS, TIME
C                   SERIES IDENTIFICATION, OPTIONS, TITLES, ETC.
C        CONTENTS OF PO() ARRAY ... PIN 25 ... PLOT OPERATION
C
C      POSITION         CONTENTS                      FORM
C     **********       **********                    ******
C            1          VERSION NUMBER                INTEGER
C            2          IS PLOT A HYDROGRAPH WITH     INTEGER
C                            A RATING CURVE - 0/1/9
C            3          TOP OF PAGE OPTION-0/1        INTEGER
C            4          PLOT SIZE OPTION-51/101       INTEGER
C            5          PUNCH STREAM OF PLOT-0/1/2    INTEGER
C            6          MINIMUM SCALE (INCREMENT)     INTEGER
C            7          TIME INTERVAL OF TIME SERIES  INTEGER
C            8          PREFERRED TIME INCREMENT      INTEGER
C            9          TOTAL NO. OF TIME SERIES      INTEGER
C           10          NO. OF TIME SERIES TO LIST    INTEGER
C           11          ORDINATE PLOTTING SYMBOL      1 CHAR
C           12          CURRENT TIME PLOTTING SYMBOL  1 CHAR
C           13          PLOT CRITERIA IF NO
C                            RATING CURVE             INTEGER
C           14          PLOT BASE VALUE               INTEGER
C           15          DUMMY                         INTEGER
C
C        16-25          PLOT NAME LABEL               40 CHAR
C                       ... OR ...
C           16          PLOT STAGE                    INTEGER
C           17          PER CENT OF FLOOD FLOW        INTEGER
C           18          FLOOD FLOW PLOTTING SYMBOL    1 CHAR
C           19          RATING UP LIMIT PLOT SYMBOL   1 CHAR
C           20          MAX OF RECORD PLOTTING SYMBOL 1 CHAR
C        21-22          RATING CURVE IDENTIFIER       8 CHAR
C           23          DUMMY                         INTEGER
C           24          DUMMY                         INTEGER
C           25          DUMMY                         INTEGER
C
C        26-30          LEFT SIDE COLUMN HEADING      20 CHAR
C                       ... OR ...
C        26-30          LEFT SIDE COLUMN HEADING      20 CHAR
C        31-43          RIGHT SIDE COLUMN HEADING     52 CHAR
C
C     FOR EACH TIME SERIES ...
C        +1,+2          TIME SERIES IDENTIFIER        8 CHAR
C           +3          TYPE CODE                     4 CHAR
C           +4          STANDARD METRIC UNITS         4 CHAR
C           +5          DIMENSION OF UNITS            4 CHAR
C           +6          LIST/PLOT/BOTH OPTION         4 CHAR
C           +7          PLOTTING SYMBOL               1 CHAR
C        +8,+9          LISTING FORMAT-REAL           8 CHAR
C          +10          CONVERSION FACTOR             REAL
C          +11          ADDITION CONSTANT             REAL
C          +12          STANDARD ENGLISH UNITS        4 CHAR
c          +13          time series time interval     int
c       +14,+18         time series description       20 char
C
C     QDATA(1)  ... DISCHARGE DATA TIME SERIES (CMS)
C     RCID(2)   ... 8 CHARACTER RATING CURVE IDENTIFIER
C     RFCOMT(5) ... COMMENT RELATING TO FLOOD OF RECORD
C     RIVERN(5) ... 20 CHARACTER RIVER NAME - 5A4
C     RIVSTA(5) ... 20 CHARACTER STATION NAME - 5A4
C     RTCVID(2) ... 8 CHARACTER IDENTIFIER FOR THE RATING CURVE
C     SNAME     ... 8 CHARACTER NAME OF SUBROUTINE
C     TSLIST(8) ... ONE LINE OF PLOT'S LISTED TIME SERIES
C     T1(1)     ... WORKING SPACE FOR LOOP RATING TIMING
C     VDATE(2)    ... VERSION DATE ... FORMAT (2A4)
C     W1(1)     ... WORKING ARRAY
C     XRC(225)    ... SPACE TO HOLD RATING CURVE STAGE AND DISCHARGE
C                     VALUES, CROSS-SECTIONAL DATA, AND OPTIONAL
C                     INFORMATION
C
C  DEFINITION OF VARIABLES ...
C     ABELOW ... CROSS-SECTIONAL AREA BELOW FIRST
C                CROSS-SECTIONAL ELEVATION 'SQ M)
C     ADDC   ... ADDITION CONSTANT FOR METRIC TO ENGLISH
C                CONVERSION FACTORS
C     AMAX   ... MAX VALUE OF PLOTTED TIME SERIES TO DETERMINE
C                SCALE OF PLOT
C     AREAL  ... LOCAL DRAINAGE AREA (SQ KM)
C     AREAT  ... TOTAL DRAINAGE AREA (SQ KM)
C     BASE   ... PLOT BASE VALUE
C     BLANK1 ... ALPHA 1 CHARACTER, BLANK
C     BLANK4 ... ALPHA 4 CHARACTER, BLANK
C     BNKSTG ... BANKFULL STAGE
C     CONVRT ... CONVERSION FACTOR METRIC TO ENGLISH
C     CURTM  ... ALPHA 1 CHARACTER CURRENT TIME PLOTTING SYMBOL
C     CURVLO ... LOWER STAGE LIMIT OF RATING CURVE
C     CURVUP ... UPPER STAGE LIMIT OF RATING CURVE
C     FLDSTG ... FLOOD STAGE (ABOVE GAGE ZERO) (M)
C     FLDSYM ... ALPHA 1 CHARACTER FOR FLOOD FLOW
C     FLOODN ... MANNING'S N FOR FLOOD PLAIN ABOVE UPPER MOST
C                GIVEN CROSS-SECTION ELEVATION
C     FLOODQ ... FLOOD FLOW
C     FLSTAG ... FLOOD STAGE
C     FLUDQ  ... FLOOD FLOW
C     FRLOOP ... R TERM USED IN DYNAMIC LOOP COMPUTATIONS
C     GZERO  ... GAGE ZERO DATUM (M)
C     IBGN   ... BEGINNING ELEMENT COUNTER
C     IBUG   ... DEBUG OUTPUT SWITCH
C     ICFLAG ... CONVERSION FLAG
C     ICONV  ... CONVERSION IDICATOR FOR FSTGQ SUBROUTINE
C     IDA    ... THE JULIAN DATE OF THE FIRST DAY TO BE COMPUTED IN
C                THE CURRENT PASS THROUGH THE OPERATIONS TABLE
C     IDABGN ... BEGINNING DAY OF PLOT
C     IDADAT ... THE JULIAN DATE OF THE FIRST DAY OF TIME SERIES DATA
C                STORED IN THE D ARRAY
C     IDAEND ... ENDING DAY OF PLOT
C     IDANOW ... TODAY'S DAY FOR PLOT
C     IDARUN ... INITIAL JULIAN DAY OF THE ENTIRE RUN
C     IDBALL ... DEBUG ALL OPERATIONS SWITCH
C     IEND   ... ENDING ELEMENT COUNTER
C     IERR   ... ERROR FLAG
C     IERROR ... NUMBER OF ERRORS ENCOUNTERED
C     IHR    ... THE FIRST HOUR TO BE COMPUTED IN THE CURRENT PASS
C                THROUGH THE OPERATIONS TABLE
C     IHRBGN ... BEGINNING HOUR OF PLOT
C     IHREND ... ENDING HOUR OF PLOT
C     IHRNOW ... TODAY'S HOUR FOR PLOT
C     IHRRUN ... THE INITIAL HOUR OF THE ENTIRE RUN
C     IHYD   ... HYDROGRAPH PLOT INDICATOR
C     IMOBGN ... BEGINNING MONTH OF PLOT
C     IMOEND ... ENDING MONTH OF PLOT
C     IMONOW ... TODAY'S MONTH FOR PLOT
C     IN     ... UNIT NUMBER OF CARD READER
C     INCRTS ... TIME SERIES INCREMENT
C     INITHR ... HOUR (INTERNAL CLOCK) OF INITIAL VALUE TO BE
C                CONVERTED IN FSTGQ SUBROUTINE
C     INTRVL ... TIME INTERVAL IN HOURS FOR THE TIME SERIES
C     IOBGN  ... BEGINNING POINTER OF TIME SERIES DATA
C     IODBUG ... UNIT NUMBER OF DEBUG FILE
C     IOPNUM ... OPERATION TYPE NUMBER OF THE CURRENT OPERATION
C     IPLHY  ... INDICATES WHETHER HYDROGRAPHS SHOULD BE PLOTTED
C                = 0 ... USE OPERATION CRITERIA FOR DETERMINING
C                        IF HYDROGRAPH SHOULD BE PLOTTED
C                = 1 ... PLOT HYDROGRAPHS NO MATTER WHAT THE CRITERIA
C                = -1 ... DO NOT PLOT ANY HYDROGRAPHS
C     IPOPT  ... POINTER TO STARTING POSITION IN THE XRC ARRAY
C                WHERE OPTIONAL INFORMATION IS STORED
C     IPR    ... UNIT NUMBER OF LINE PRINTER
C     IPRHY  ... INDICATES WHETHER HYDROGRAPHS SHOULD BE
C                PRINTED IN TABULAR FORM
C     IPRWRN ... INDICATES WHETHER TO PRINT WARNING
C                MESSAGES FROM SUBROUTINE FSTGQ
C                = 0 ... DO NOT PRINT MESSAGES
C                = 1 ... PRINT MESSAGES
C     IPT    ... POINTER TO POSITION IN XRC ARRAY
C     IPU    ... UNIT NUMBER OF CARD PUNCH
C     IRCHNG ... RATING CURVE CHANGE INDICATOR
C     IRFDA  ... MAX OF RECORD DATE, DAY
C     IRFDAT ... MAX OF RECORD, DATE (YYMMDD)
C     IRFDAY ... MAX OF RECORD, DATE (YYMMDD)
C     IRFMO  ... MAX OF RECORD DATE, MONTH
C     IRFYR  ... MAX OF RECORD DATE, YEAR
C     ITEMP1  ... DUMMY VARIABLE
C     ITEMP2  ... DUMMY VARIABLE
C     ITEMP3  ... DUMMY VARIABLE
C     ITEMP4  ... DUMMY VARIABLE
C     ITRACE ... TRACE LEVEL CARRIED IN COMMON
C     ITSPOS ... POSITION IN QDATA AND HDATA ARRAYS WHERE FIRST
C                VALUE TO BE CONVERTED IS LOCATED
C     IYRBGN ... BEGINNING YEAR OF PLOT
C     IYREND ... ENDING YEAR OF PLOT
C     IYRNOW ... TODAY'S YEAR FOR PLOT
C     JBGN   ... BEGINNING ARRAY ELEMENT
C     JEND   ... ENDING ARRAY ELEMENT
C     JENDP1 ... JEND + 1
C     JTRACE ... TRACE LEVEL FOR THIS SUBROUTINE
C     JULDAY ... JULIAN DAY (INTERNAL CLOCK) OF INITIAL VALUE
C                TO BE CONVERTED IN FSTGQ SUBROUTINE
C     LASDAY ... LAST DAY THAT RATING CURVE SHOULD BE USED
C                (JULIAN DAY)
C                = 0 ... IF NO LIMIT (USED FOR CALIBRATION ONLY)
C     LDA    ... THE JULIAN DATE OF THE LAST DAY TO BE COMPUTED IN THE
C                CURRENT PASS THROUGH THE OPERATIONS TABLE
C     LDACPD ... JULIAN DAY OF LAST DAY WITH OBSERVED DATA
C     LDARUN ... JULIAN DAY OF LAST DAY OF THE ENTIRE RUN
C     LHR    ... THE LAST HOUR TO BE COMPUTED IN THE CURRENT PASS
C                THROUGH THE OPERATIONS TABLE
C     LHRCPD ... LAST HOUR WITH OBSERVED DATA
C     LHRRUN ... LAST HOUR OF THE ENTIRE RUN
C     LINE   ... LINE NUMBER OF PLOT
C     LINEDA ... DAY OF SPECIFIC LINE OF PLOT
C     LINEHR ... HOUR OF SPECIFIC LINE OF PLOT
C     LINEMO ... MONTH OF SPECIFIC LINE OF PLOT
C     LINEYR ... YEAR OF SPECIFIC LINE OF PLOT
C     LOCAL  ... THE HOUR OFFSET TO LOCAL TIME
C     LOCH   ... STARTING LOCATION OF THE RATING CURVE STAGE
C                VALUES IN THE XRC ARRAY
C     LOCQ   ... STARTING LOCATION OF THE RATING CURVE DISCHARGE
C                VALUES IN THE XRC ARRAY
C     LXELEV ... STARTING LOCATION OF THE CROSS-SECTIONAL ELEVATION
C                VALUES IN THE XRC ARRAY
C     LXTOPW ... STARTING LOCATION OF THE CROSS-SECTIONAL TOP
C                WIDTH VALUES IN THE XRC ARRAY
C     MAINUM ... NUMBER OF PROCESS
C                = 1 ... OPERATIONAL PROGRAM
C                = 2 ... ESP
C                = 3 ... MANUAL CALIBRATION
C                = 3 ... AUTOMATIC OPTIMIZATION
C     METHOD ... METHOD OF CONVERSION IN FSTGQ SUBROUTINE
C     METRIC ... SWITCH INDICATING THE UNITS FOR OUTPUT FROM CERTAIN
C                OPERATIONS
C                = 0 ... OUTPUT IN ENGLISH UNITS
C                = 1 ... OUTPUT IN METRIC UNITS
C     MINSCL ... MINIMUM SCALE (INCREMENT)
C     MO     ... ALPHA 4 CHAR NAME OF THE MONTH
C     NBASE  ... PLOT BASE VALUE
C     NCALC  ... ARRAY ELEMENT COUNTER FOR PO AND W1 ARRAYS
C     NCRMNT ... PREFERRED TIME INCREMENT TO PLOT
C     NCROSS ... NUMBER OF VALUES IN CROSS-SECTIONAL
C                DATA TABLE (MAX 20 VALUES)
C     NDD    ... NUMBER OF ELEMENTS IN D() ARRAY
C     NDEBUG ... NUMBER OF OPERATIONS WITH DEBUG OUTPUT
C     NEEDEX ... RATING EXTENSION INDICATOR IN FSTGQ SUBROUTINE
C     NEWPG  ... TOP OF PAGE OPTION
C     NJEND  ... NUMBER OF ARRAY ELEMENTS IN TIME SERIES
C                BETWEEN BEGINNING AND ENDING OF PLOT
C     NL     ... NUMBER OF TIME SERIES BEING LISTED
C     NLSTZ  ... THE TIME ZONE NUMBER FOR LOCAL STANDARD TIME
C     NMLIST ... NUMBER OF TIME SERIES TO BE LISTED
C     NOOPER ... OPERATION NUMBER
C     NOPROT ... INDICATES WHETHER OPERATIONS SHOULD GENERATE ANY
C                PRINTER OUTPUT
C                = 0 ... USE OPERATION CRITERIA FOR DETERMINING IF ANY
C                        PRINTER OUTPUT SHOULD BE GENERATED
C                = 1 ... DO NOT GENERATE ANY PRINTER OUTPUT FROM AN
C                        OPERATION
C     NORC   ... INDICATOR THAT NO RATING CURVE EXISTS
C     NOUTZ  ... THE DEFAULT TIME ZONE NUMBER FOR OUTPUT
C     NOUTDS ... THE DEFAULT DAYLIGHT SAVING TIME SWITCH FOR OUTPUT
C                = 0 ... STANDARD TIME
C                = 1 ... DAYLIGHT SAVING TIME
C     NP     ... NUMBER OF TIME SERIES BEING PLOTTED
C     NPLCRT ... PLOT CRITERIA IF PLOT HAS NO
C                RATING CURVE DEFINED
C     NPLSTG ... PLOT STAGE
C     NPLTSZ ... PLOT SIZE OPTION
C     NPLTTS ... NUMBER OF PLOTTED TIME SERIES
C     NPUNCH ... PUNCH STREAM OF PLOT OPTION
C     NRCPTS ... NUMBER OF STAGE VS DISCHARGE POINTS USED TO DEFINE
C                THE RATING CURVE
C     NUMCOD ... NUMBER CODE FOR OPTIONAL INFORMATION IN XRC ARRAY
C     NUMTS  ... NUMBER OF TIME SERIES TO BE READ IN
C     NVALS  ... NUMBER OF STAGE OR FLOW VALUES TO BE CONVERTED
C                BY FSTGQ SUBROUTINE
C     OPTION ... TYPE OF UNITS USED WHEN THE RATING CURVE WAS DEFINED
C                = 'ENGL' ... ENGLISH UNITS
C                = 'METR' ... METRIC UNITS
C     ORDSYM ... ALPHA 1 CHARACTER ORDINATE PLOTTING SYMBOL
C     PADDC  ... PLOT VARIABLE ADDITION CONSTANT FOR METRIC TO ENGLISH
C                CONVERSION FACTORS
C     PCNVRT ... PLOT VARIABLE CONVERSION FACTOR METRIC TO ENGLISH
C     PERCNT ... PER CENT OF FLOOD FLOW
C     PLOT   ... ALPHA 4 CHARACTER, PLOT
C     PLTCRT ... PLOTTING CRITERIA FOR PLOTS NOT DEFINED AS HYDROGRAPHS
C     PLTMAX ... MAX VALUE POSSIBLE ON PLOT
C     PLTOPT ... LIST/PLOT/BOTH OPTION FOR TIME SERIES
C     PLTSTG ... PLOT STAGE
C     PVISFS ... PROVISONAL FLOOD STAGE INDICATOR - 1A4
C     QADDC  ... FLOW ADDITION CONSTANT FOR METRIC TO ENGLISH
C                CONVERSION FACTORS
C     QCNVRT ... FLOW CONVERSION FACTOR METRIC TO ENGLISH
C     RANGE  ... PLOT MAX VALUE - PLOT BASE VALUE
C     RATLIM ... ALPHA 1 CHARACTER RATING UPPER LIMIT SYMBOL
C     RATUPL ... UPPER FLOW LIMIT OF RATING CURVE
C     RCDMAX ... ALPHA 1 CHARACTER MAX OF RECORD PLOTTING SYMBOL
C     RCFSTG ... MAX OF RECORD, STAGE
C     RCFQ   ... MAX OF RECORD, FLOW
C     RFSTG  ... MAX OF RECORD, STAGE
C     RFQ    ... MAX OF RECORD, FLOW
C     RLAT   ... LATITUDE OF STATION
C     RLONG  ... LONGITUDE OF STATION
C     R1     ... 1ST 4 CHARACTERS OF RATING CURVE IDENTIFIER
C     R2     ... 2ND 4 CHARACTERS OF RATING CURVE IDENTIFIER
C     SADDC  ... STAGE ADDITION CONSTANT FOR METRIC TO ENGLISH
C                CONVERSION FACTORS
C     SCALE  ... INCREMENTAL SCALE FACTOR FOR PLOT
C     SCFSTG ... SECONDARY FLOOD STAGE (M)
C     SCLMIN ... MINIMUM SCALE, INCREMENT
C     SCNVRT ... STAGE CONVERSION FACTOR METRIC TO ENGLISH
C     SDIM   ... DIMENSION OF STAGE UNITS
C     SHIFT  ... SHIFT FACTOR USED DURING LOG-LOG EXTRAPOLATION
C                OF LOW FLOWS
C     SLOPE  ... CHANNEL BOTTOM SLOPE (M/M)
C     STGMIN ... MINIMUM STAGE POSSIBLE (M)
C     SUNTE  ... STANDARD ENGLISH UNITS, STAGE
C     SUNTM  ... STANDARD METRIC UNITS, STAGE
C     SYMBOL ... ALPHA 1 CHARACTER PLOTTING SYMBOL
C     TIMZON ... 4 CHAR TIME ZONE CODE
C     TLIST  ... ALPHA 4 CHARACTER, LIST
C     TSDELT ... TIME INTERVAL OF DISCHARGE AND STAGE DATA IN
C                HOURS FOR FSTGQ SUBROUTINE
C     TSID1  ... 1ST 4 CHARACTERS OF TIME SERIES IDENTIFIER
C     TSID2  ... 2ND 4 CHARACTERS OF TIME SERIES IDENTIFIER
C     TYPE   ... TYPE CODE OF TIME SERIES
C     UNITS  ... STANDARD UNITS
C     UNITSE ... STANDARD ENGLISH UNITS
C     UNITSM ... STANDARD METRIC UNITS
C     VERS   ... VERSION NUMBER
C     WRNSTG ... WARNING STAGE
C     WRSTG  ... WARNING STAGE
C     XSECLO ... LOWER ELEVATION (MSL) LIMIT OF THE
C                CROSS-SECTIONAL DATA
C     XSECUP ... UPPER ELEVATION (MSL) LIMIT OF THE
C                CROSS-SECTIONAL DATA
C
C
C********************************************************************
C
C  CHANGES FINISHED 6/26/89 BY RICARDO ROMERO
C                              HYDROLOGIC RESEARCH LAB
C                              SILVER SPRING, MD  20910
C
C  CHANGES MADE:
C
C     RATING CURVE COMMENTS, NWS-ID, AND DATUM OF THE STREAMGAGE
C     ADDED TO THE TITLE SECTION OF THE OPERATION.
C
C  NEW ARRAYS:
C
C     IFPLOT(4) ... FOR FUTURE USE
C     RNWSID(2) ... ARRAY TO STORE THE NWS-ID AFTER IT IS EXTRACTED
C                   FROM THE XRC ARRAY FOR PRINTING.
C
C  NEW VARIABLES:
C
C     IEND   ... POINTER TO THE END POSITION IN THE XRC ARRAY OF
C                THE ADDITIONAL COMMENTS.
C     IPRRCI ... CONTROL FOR PRINTING OPTIONAL RATING
C                CURVE INFORMATION:
C                0 = DON'T PRINT
C                1 = PRINT OPTIONAL INFORMATION
C
C     RGZERO ... STORES GAGE ZERO DATUM IN METRIC OR ENGLISH UNITS
C                FOR PRINTING.
C
C********************************************************************
C
      DIMENSION PO(*),W1(*)
      DIMENSION LOCTS(*),D1(*)
      CHARACTER*8  SNAME
      DIMENSION        FRMT2(25)
      CHARACTER*100    FRMT
      EQUIVALENCE    ( FRMT,FRMT2(1) )
      DIMENSION MODAYS(12)
      DIMENSION MONTH(12)
      DIMENSION TSLIST(8)
      DIMENSION RNWSID(2)
C
      DIMENSION RCID(2),CARRYO(4)
      DIMENSION QDATA(12),HDATA(12),LOCPTR(12),T1(12)
C
      CHARACTER*4 CHAR
      integer pltime,tstime
      character*4 descrp(5)
      character*4 loctn(2)
      character*8 tnloc
      character*1 extrt1
      character*2 extrt2
      character*50 strcat1, strcat2
      integer index(100),relnum(100),ndeci(100)
C
      logical search,comma
      LOGICAL DOT
C
      INCLUDE 'common/fctime'
      INCLUDE 'common/fdbug'
      INCLUDE 'common/fengmt'
      INCLUDE 'common/fprog'
      INCLUDE 'common/fratng'
      INCLUDE 'common/ionum'
      COMMON /FNOPR/ NOPROT
      COMMON /FPLOTC/ IPRRCI,IFPLOT(4)
      COMMON /FPLTAB/ IPLHY,IPRHY
      COMMON /WHERE/ ISEG(2),IOPNUM,OPNAME(2)
C
C
C    ================================= RCS keyword statements ==========
      CHARACTER*68     RCSKW1,RCSKW2
      DATA             RCSKW1,RCSKW2 /                                 '
     .$Source: /fs/hseb/ob72/rfc/ofs/src/fcst_ex/RCS/ex25.f,v $
     . $',                                                             '
     .$Id: ex25.f,v 1.14 2001/06/13 09:32:43 mgm Exp $
     . $' /
C    ===================================================================
C
C
      DATA  SNAME / 'EX25    ' /
      DATA  NOOPER,IBUG / 25, 0 /
      DATA TLIST,PLOT/4HLIST,4HPLOT/
      DATA BLANK1,BLANK4/1H ,4H    /
C
C
      DATA SUNTM,SDIM/4HM   ,4HL   /
      DATA MODAYS/31,28,31,30,31,30,31,31,30,31,30,31/
      DATA MONTH/4HJAN ,4HFEB ,4HMAR ,4HAPR ,4HMAY ,4HJUN ,
     1   4HJUL ,4HAUG ,4HSEP ,4HOCT ,4HNOV ,4HDEC /
      DATA TCUM/4HTCUM/
C
C
C  CALL SUBROUTINE, FPRBUG, TO CHECK TRACE LEVEL AND DEBUG OPTION
C     JTRACE = TRACE LEVEL FOR SUBROUTINE = 1
C     IBUG   = DEBUG SWITCH = 0
C
      JTRACE=1
      CALL FPRBUG (SNAME,JTRACE,NOOPER,IBUG)
C
C  IF IBUG = 1 ... PRINT OUT DEBUG INFORMATION
C
      IF(IBUG.NE.1) GO TO 270
C
C  PRINT OUT PO() ARRAY
C
      WRITE(IODBUG,10)
10    FORMAT(10X,29HPRP25 ... PLOT OPERATION ... ,
     1   23HCONTENTS OF PO() ARRAY ,//)
C
      WRITE(IODBUG,20) (PO(I),I=1,6)
20    FORMAT(10X,5HPO(1),5X,5HPO(2),5X,5HPO(3),5X,
     1   5HPO(4),5X,5HPO(5),5X,5HPO(6),/,
     2   10X,6HNOVRSN,4X,4HIHYD,6X,5HNEWPG,5X,
     3   6HNPLTSZ,4X,6HNPUNCH,4X,6HMINSCL,/,
     4   10X,6(F5.0,5X),/)
C
      WRITE(IODBUG,30) (PO(I),I=7,12)
30    FORMAT(10X,5HPO(7),5X,5HPO(8),5X,5HPO(9),5X,
     1   6HPO(10),4X,6HPO(11),4X,6HPO(12),/,
     2   10X,6HINTRVL,4X,6HNCRMNT,4X,5HNUMTS,5X,
     3   6HNMLIST,4X,6HORDSYM,4X,5HCURTM,/,
     4   10X,4(F5.0,5X),2(A1,9X),/)
C
      WRITE(IODBUG,40) (PO(I),I=13,15)
40    FORMAT(10X,6HPO(13),4X,6HPO(14),4X,6HPO(15),/,
     1   10X,6HPLTCRT,4X,6HNBASE ,4X,6HIDUMMY,/,
     2   5X,3F10.0,/)
C
      IHYD=PO(2)
      IF(IHYD.EQ.1) GO TO 60
      WRITE(IODBUG,50) (PO(I),I=16,25)
50    FORMAT(10X,23H(IF IHYD = 0 OR 9 ... ),/,
     1   10X,9HPO(16-25),/,
     2   10X,15HPLOT NAME LABEL,/,
     3   10X,10A4,/)
      GO TO 90
C
60    WRITE(IODBUG,70) (PO(I),I=16,20)
70    FORMAT(10X,18H(IF IHYD = 1 ... ),/,
     1   10X,6HPO(16),4X,6HPO(17),4X,6HPO(18),4X,
     2   6HPO(19),4X,6HPO(20),/,
     3   10X,6HNPLSTG,4X,6HNPRCNT,4X,6HFLDSYM,4X,
     4   6HRATLIM,4X,6HRCDMAX,/,
     5   10X,2(F5.0,5X),3(A1,9X),/)
C
      WRITE(IODBUG,80) (PO(I),I=21,25)
80    FORMAT(10X,8HPO(21-2),2X,6HPO(23),4X,6HPO(24),4X,6HPO(25),/,
     1   10X,7HRC(1-2),3X,6HIDUMMY,4X,6HIDUMMY,4X,6HIDUMMY,/,
     2   10X,2A4,2X,3(F5.0,5X),/)
C
90    WRITE(IODBUG,100) (PO(I),I=26,30)
100   FORMAT(10X,9HPO(26-30),/,
     1   10X,25HLEFT SIDE COLUMN HEADINGS,/,
     2   10X,5A4,/)
C
      NPLTSZ=PO(4)
      NMLIST=PO(10)
      IF(NPLTSZ.EQ.51 .AND. NMLIST.GT.3)
     1   WRITE(IODBUG,110) (PO(I),I=31,43)
110   FORMAT(10X,9HPO(31-43),/,
     1   10X,26HRIGHT SIDE COLUMN HEADINGS,/,
     2   10X,13A4,/)
C
      IF(NPLTSZ.EQ.101) NCALC=31
      IF(NPLTSZ.EQ.51 .AND. NMLIST.LT.4) NCALC=31
      IF(NPLTSZ.EQ.51 .AND. NMLIST.GT.3) NCALC=44
      NUMTS=PO(9)
      WRITE(IODBUG,120)
120   FORMAT(10X,27H(FOR EACH TIME SERIES ... ),/,
     1   10X,16HPO(+1,+2) PO(+3),4X,6HPO(+4),4X,6HPO(+5),4X,
     2   6HPO(+6),4X,6HPO(+7),4X,9HPO(+8,+9),
     3   3X,7HPO(+10),3X,7HPO(+11),3X,7HPO(+12),2x,'po(+13)',/,
     4   10X,14HTSID(1-2) TYPE,6X,5HUNITS,5X,3HDIM,7X,
     5   6HPLTOPT,4X,6HSYMBOL,4X,9HFRMT(1-2),
     6   4X,6HCONVRT,6X,4HADDC,4X,6HUNITSE,2x,6HTSTIME/)
C
      novrsn=po(1)
      DO 140 II=1,NUMTS
      I=II-1
      IBGN=NCALC+(I*12)
      if (novrsn.eq.2.and.i.gt.0) ibgn=ncalc+(i*18)
      IEND=IBGN+11
      if (novrsn.eq.2) iend=ibgn+17
      WRITE(IODBUG,130) (PO(I),I=IBGN,IEND)
130   FORMAT(10X,2A4,2X,4(A4,6X),A1,9X,2A4,1X,2F10.4,6X,A4,4x,i2,2x,5a4)
C
140   CONTINUE
C
C  PRINT OUT CONTENTS OF COMMON/ / STATEMENTS
C
      WRITE(IODBUG,150) IDARUN,IHRRUN,LDARUN,LHRRUN,LDACPD,LHRCPD,
     1   (NOW(I),I=1,5),LOCAL,
     2   NOUTZ,NOUTDS,NLSTZ,IDA,IHR,
     3   LDA,LHR,IDADAT
150   FORMAT(//,10X,16HCOMMON /FCTIME/ ,/,
     1   14X,26HIDARUN    IHRRUN    LDARUN,
     2   4X,26HLHRRUN    LDACPD    LHRCPD,/,
     3   10X,6I10,//,
     4   14X,26HNOW(1)    NOW(2)    NOW(3),
     5   4X,26HNOW(4)    NOW(5)     LOCAL,/,
     6   10X,6I10,//,
     7   15X,25HNOUTZ    NOUTDS     NLSTZ,
     8   7X,3HIDA,7X,3HIHR,/,
     9   10X,5I10,//,
     A   17X,3HLDA,7X,3HLHR,4X,6HIDADAT,/,
     B   10X,3I10,//)
C
      WRITE(IODBUG,160) IODBUG,ITRACE,IDBALL,NDEBUG,
     1   (IDEBUG(I),I=1,20)
160   FORMAT(10X,15HCOMMON /FDBUG/ ,/,
     1   14X,36HIODBUG    ITRACE    IDBALL    NDEBUG,/,
     2   10X,4I10,//,
     3   14X,12HIDEBUG(1-20),/,
     4   10X,10I10,/,10X,10I10,//)
C
      WRITE(IODBUG,170) METRIC
170   FORMAT(10X,16HCOMMON /FENGMT/ ,/,
     1   14X,6HMETRIC,/,10X,I10,//)
C
      WRITE(IODBUG,180) NOPROT
180   FORMAT(10X,15HCOMMON /FNOPR/ ,/,
     1   14X,6HNOPROT,/,10X,I10,//)
C
      WRITE(IODBUG,190) IPLHY,IPRHY
190   FORMAT(10X,16HCOMMON /FPLTAB/ ,/,
     1   15X,5HIPLHY,5X,5HIPRHY,/,10X,2I10,//)
C
      WRITE(IODBUG,200) IN,IPR,IPU
200   FORMAT(10X,15HCOMMON /IONUM/ ,/,
     1   18X,2HIN,7X,3HIPR,7X,3HIPU,/,10X,3I10,//)
C
      WRITE(IODBUG,210) ISEG(1),ISEG(2),IOPNUM,OPNAME(1),OPNAME(2)
210   FORMAT(10X,15HCOMMON /WHERE/ ,/,
     1   11X,9HISEG(1-2),4X,6HIOPNUM,9X,11HOPNAME(1-2),/,
     2   12X,2A4,I10,12X,2A4,//)
C
      WRITE(IODBUG,220) MAINUM,VERS,VDATE(1),VDATE(2),
     1   (PNAME(I),I=1,5),NDD
220   FORMAT(10X,15HCOMMON /FPROG/ ,/,
     1   14X,6HMAINUM,6X,4HVERS,10X,10HVDATE(1-2),/,
     2   10X,I10,F10.2,12X,2A4,//,
     3   20X,10HPNAME(1-5),7X,3HNDD,/,
     4   10X,5A4,I10,//)
C
      WRITE(IODBUG,230) RTCVID(1),RTCVID(2),(RIVERN(I),I=1,5),
     1   (RIVSTA(I),I=1,5),
     2   RLAT,RLONG,(FPTYPE(I),I=1,5),AREAT,AREAL,
     3   FLDSTG,FLOODQ,PVISFS,SCFSTG,WRNSTG,GZERO,
     4   NRCPTS,LOCQ,LOCH,STGMIN,NCROSS,
     5   LXTOPW,LXELEV,ABELOW,FLOODN,SLOPE,FRLOOP,
     6   SHIFT,OPTION,LASDAY,IPOPT,RFSTG,RFQ,
     7   IRFDAY,(RFCOMT(I),I=1,5)
230   FORMAT(10X,16HCOMMON /FRATNG/ ,//,
     1   9X,11HRTCVID(1-2),5X,11HRIVERN(1-5),14X,11HRIVSTA(1-5),/,
     2   12X,2A4,5X,5A4,5X,5A4,//,
     3   16X,4HRLAT,5X,5HRLONG,5X,11HFPTYPE(1-5),
     4   9X,5HAREAT,5X,5HAREAL,/,
     5   10X,F10.4,F10.4,5A4,F10.2,F10.2,//,
     6   14X,6HFLDSTG,4X,6HFLOODQ,4X,6HPVISFS,
     7   4X,6HSCFSTG,4X,6HWRNSTG,5X,5HGZERO,/,
     8   10X,F10.2,F10.2,4X,1H',A4,1H',F10.2,F10.2,F10.4,//,
     9   14X,6HNRCPTS,6X,4HLOCQ,6X,4HLOCH,4X,6HSTGMIN,4X,6HNCROSS,/,
     A   10X,I10,I10,I10,F10.2,I10,//,
     B   14X,6HLXTOPW,4X,6HLXELEV,4X,6HABELOW,
     C   4X,6HFLOODN,5X,5HSLOPE,4X,6HFRLOOP,/,
     D   10X,I10,I10,F10.2,F10.2,F10.4,F10.4,//,
     E   15X,5HSHIFT,4X,6HOPTION,4X,6HLASDAY,
     F   5X,5HIPOPT,5X,5HRFSTG,7X,3HRFQ,/,
     G   10X,F10.4,6X,1A4,I10,I10,F10.2,F10.2,//,
     H   14X,6HIRFDAY,5X,11HRFCOMT(1-5),/,
     I   10X,I10,5X,5A4,//)
      WRITE(IODBUG,240)  (EMPTY(I),I=1,25),
     1   (XRC(I),I=1,225)
240   FORMAT(10X,11HEMPTY(1-25),/,
     1   10X,5F10.2,/,10X,5F10.2,/,10X,5F10.2,/,10X,5F10.2,/,10X,5F10.2,
     2   //,10X,10HXRC(1-225),/,
     3   45(10X,5F10.2,/))
C
      WRITE(IODBUG,250) NUMTS,NUMTS
250   FORMAT(10X,8HLOCTS(1-,I2,1H),10X,7HNUMTS =,I3)
      WRITE(IODBUG,260) (LOCTS(I),I=1,NUMTS)
260   FORMAT(10X,6I10)
C
270   CONTINUE
C
C  CHECK RUN-TIME OPTION FOR DISPLAYING OF PLOT
C     IPLHY = -1 ... DO NOT PLOT
C     NOPROT = 1 ... DO NOT GENERATE ANY PRINTER OUTPUT
C     IHYD = 0 ... PLOT IS HYDROGRAPH WITH NO RATING CURVE
C     IHYD = 1 ... PLOT IS HYDROGRAPH WITH RATING CURVE
C     IHYD = 9 ... PLOT IS NOT A HYDROGRAPH
C
      IHYD=PO(2)
      IF(IHYD.EQ.0 .AND. IPLHY.EQ.-1) RETURN
      IF(IHYD.EQ.1 .AND. IPLHY.EQ.-1) RETURN
      IF(NOPROT.EQ.1) RETURN
      IF(IHYD.EQ.9) IHYD=0
C
C  IF PLOT IS HYDROGRAPH ...
C     CHECK IF RATING CURVE IS DEFINED IN PO() ARRAY
C     SET VARIABLE NORC
C        NORC = 0 ... RATING CURVE DEFINED IN PO() ARRAY AND AGREES
C                     WITH RATING CURVE IDENTIFIER IN COMMON /FRATNG/
C        NORC = 1 ... NO RATING CURVE DEFINED IN PO() ARRAY OR
C                     RATING CURVE IDENTIFIERS DO NOT AGREE
C
      NORC=1
      IF(IHYD.EQ.0) GO TO 290
      R1=PO(21)
      R2=PO(22)
      IF(R1.EQ.BLANK4 .AND. R2.EQ.BLANK4) GO TO 290
C
C  RATING CURVE IS DEFINED ... CHECK IF IDENTICAL WITH DATA
C     IN COMMON /FRATNG/
C
      X=RTCVID(1)
      Y=RTCVID(2)
      IF(R1.EQ.X .AND. R2.EQ.Y) NORC=0
C
      IF(IBUG.EQ.1) WRITE(IODBUG,280) R1,R2,X,Y,NORC
280   FORMAT(//,18X,2HR1,8X,2HR2,9X,1HX,9X,1HY,6X,4HNORC,/,
     1   16X,A4,6X,A4,6X,A4,6X,A4,I10,//)
C
C  DETERMINE THE NUMBER OF VALUES WITHIN EACH TIME SERIES
C     (SAME FOR EACH TIME SERIES)
C     I = ARRAY ELEMENT OF TS OF BEGINNING OF DATA TO BE PLOTTED
C     K = ARRAY ELEMENT OF TS OF ENDING OF DATA TO BE PLOTTED
C     N = NUMBER OF ARRAY ELEMENTS IN TS BETWEEN PLOT BEGINNING AND END
C     IOBGN = OFFSET FROM START OF TS TO BEGINNING OF PLOT
C
290   INTRVL=PO(7)
      J=LOCTS(1)
      I=J-1+(IDA-IDADAT)*(24/INTRVL)+(IHR/INTRVL)
      K=J-1+(LDA-IDADAT)*(24/INTRVL)+(LHR/INTRVL)
      N=K-I
      NJEND=N-1
      IOBGN=I-J
C
C  GET NUMBER OF TIME SERIES TO BE PLOTTED
C
      NUMTS=PO(9)
C
C  IF IBUG = 1 ... PRINT OUT D1() ARRAY
C
      IF(IBUG.NE.1) GO TO 350
      WRITE(IODBUG,300) NUMTS,INTRVL,J,I,K,N,IOBGN
300   FORMAT(//,15X,15HNUMTS    INTRVL,9X,1HJ,9X,1HI,9X,1HK,9X,1HN,
     1   5X,5HIOBGN,/,10X,7I10,//)
      WRITE(IODBUG,310)
310   FORMAT(10X,22HCONTENTS OF D1() ARRAY)
      DO 340 LL=1,NUMTS
      L=LL
      I=LOCTS(L)+IOBGN
      J=I+N
      WRITE(IODBUG,320) I,J
320   FORMAT(10X,3HD1(,I4,1H-,I4,1H))
      WRITE(IODBUG,330) (D1(K),K=I,J)
330   FORMAT(10X,8F12.2)
340   CONTINUE
C
350   CONTINUE
C
C  DETERMINE THE MAXIMUM VALUE WITHIN THE TIME SERIES FOR
C     SCALE DETERMINATION
C
      AMAX=0.00
      NPLTSZ=PO(4)
      NMLIST=PO(10)
      IF(NPLTSZ.EQ.101) NCALC=31
      IF(NPLTSZ.EQ.51 .AND. NMLIST.LT.4) NCALC=31
      IF(NPLTSZ.EQ.51 .AND. NMLIST.GT.3) NCALC=44
C
C  BLANK OUT VARIABLE FORMAT STRING
C
      FRMT = ' '
C
C  INITIALIZE ELEMENTS OF FORMAT ARRAY
C
      FRMT(1:12)  = '(1X,I2, I3, '
      FRMT(37:40) = '1X, '
      IF(NPLTSZ.EQ.101) GO TO 370
        FRMT(41:48) = '51A1,   '
      GO TO 380
370   FRMT(41:48) = '101A1,  '
380   M=4
      mcheck=0
C
      do 375 ii=1,100
         index(ii)=0
         relnum(ii)=0
         ndeci(ii)=0
  375 continue
c
C  LOOP THRU THE TIME SERIES TO BE PLOTTED
C
      ICFLAG=0
      NPLTTS=0
      novrsn=po(1)
      pltime=po(7)
      DO 420 II=1,NUMTS
      I=II-1
      ix=ii
      K=NCALC+(I*12)+5
      if (novrsn.eq.2.and.i.gt.0) k=ncalc+(i*18)+5
c
c----------------------------------------------------------
c  9/19/96 by david tran
c  only plot or list time series in batch mode that has the
c  same time interval as the time interval specified by the
c  PLOT-TUL operation (i.e. time series time interval must
c  as same as time interval in po(7).  However, IFP will be
c  able to plot different time series with different time
c  interval
c----------------------------------------------------------
c
      kk=ncalc+(i*12)+12
      if(novrsn.eq.2.and.i.gt.0) kk=ncalc+(i*18)+12
      tstime=pltime
      if(novrsn.eq.2) tstime=po(kk)
c     if(tstime.ne.pltime) goto 420
      PLTOPT=PO(K)
      if(tstime.ne.pltime) goto 410
      IF(PLTOPT.EQ.TLIST) GO TO 410
      NPLTTS=NPLTTS+1
C
C DETERMINE CONVERSION FACTORS TO ENGLISH UNITS
C
      IF(METRIC.EQ.1) GO TO 390
      IF(ICFLAG.EQ.1) GO TO 390
      K=NCALC+(I*12)+3
      if(novrsn.eq.2.and.i.gt.0) k=ncalc+(i*18)+3
      UNITSM=PO(K)
      K=K+6
      CONVRT=PO(K)
      K=K+1
      ADDC=PO(K)
      K=K+1
      UNITSE=PO(K)
      ICFLAG=1
390   CONTINUE
C
C  LOOP THRU THE VALUES WITHIN THE TIME SERIES TO BE PLOTTED
C     DATA IN METRIC
C
c     JBGN=LOCTS(I)+IOBGN
      jbgn=locts(ix)+iobgn
      JEND=JBGN+N-1
      DO 400 JJ=JBGN,JEND
      J=JJ
      X=D1(J)
      L=IFMSNG(X)
      IF(L.EQ.1) GO TO 400
      IF(X.GT.AMAX) AMAX=X
400   CONTINUE
C
C  SET UP VARIABLE FORMAT STATEMENT FOR PRINTING ONE LINE OF PLOT
C     PLOT OPTION = LIST OR BOTH
C
410   if(pltopt.eq.plot.and.tstime.eq.pltime) goto 420
c410  IF(PLTOPT.EQ.PLOT) GO TO 420
      K=NCALC+(I*12)+7
      if(novrsn.eq.2.and.i.gt.0) k=ncalc+(i*18)+7
      index(ii)=-1
      if(tstime.ne.pltime) then
c       if(pltopt.ne.plot) then
           index(ii)=1
c          endif
        endif
      if(pltopt.eq.plot) goto 420
c
      FRMT2(M)=PO(K)
      loctn(1)=' '
      call umemov(FRMT2(m),loctn(1),1)
      K=K+1
      M=M+1
      FRMT2(M)=PO(K)
      loctn(2)=' '
      call umemov(FRMT2(m),loctn(2),1)
      M=M+1
c
      lfound=2
      do 414 jjj=1,4
         if(loctn(1)(jjj:jjj).eq.'.') lfound=jjj-1
  414 continue
      extrt2=' '
      extrt2=loctn(1)(2:lfound)
      call ufa2i(extrt2,1,2,icnvrt,0,6,ierr)
      relnum(ii)=icnvrt
      tnloc=' '
      call umemov(loctn(1),tnloc,2)
      lfound=0
      do 415 iii=1,8
         if(tnloc(iii:iii).eq.',') lfound=iii-1
  415 continue
      extrt1=' '
      if(lfound.gt.0) extrt1=tnloc(lfound:lfound)
      call ufa2i(extrt1,1,1,icnvrt,0,6,ierr)
      ndeci(ii)=icnvrt
c
      IF(M.EQ.10) M=13
C
420   CONTINUE
      IF(NPLTSZ.EQ.101) M=13
      IF(NPLTSZ.EQ.51 .AND. NMLIST.LT.4) M=13
        MBEG=4*M-1
        MEND=MBEG+3
        FRMT(MBEG:MEND) = '1X) '
C
C  IF IBUG = 1 ... PRINT OUT FRMT STRING
C
      IF(IBUG.NE.1) GO TO 440
      WRITE(IODBUG,430) FRMT
430   FORMAT(//,10X,'FRMT STRING',/,
     1   10X,A,//)
C
440   CONTINUE
C
C  IF PLOT IS A HYDROGRAPH, CHECK IF AMAX FROM TIME SERIES DATA
C     IS WITHIN PERCNT% OF FLOOD FLOW, IF SO, MAKE AMAX = FLOOD FLOW
C     DATA IN METRIC
C
      IF(IHYD.EQ.0) GO TO 460
      FLUDQ=FLOODQ
      PERCNT=PO(17)/100.0
C
      IF(AMAX.GE.FLUDQ) GO TO 460
      X=(1.00+PERCNT)*AMAX
C
      IF(IBUG.EQ.1) WRITE(IODBUG,450)
     1   FLUDQ,FLOODQ,PERCNT,AMAX,X
450   FORMAT(15X,5HFLUDQ,4X,6HFLOODQ,4X,6HPERCNT,6X,4HAMAX,9X,1HX,/,
     1   10X,5F10.2,//)
C
      IF(X.GE.FLUDQ) AMAX=FLUDQ
C
C  DETERMINE SCALE OF PLOT FROM AMAX AND BASE
C     IF ENGLISH DESIRED ... DATA CONVERTED TO ENGLISH
C     BASE IS DIMENSIONLESS AT THIS POINT
C
460   CONTINUE
      IF(METRIC.EQ.1) THEN
        CONVRT=1.0
        ADDC=0.0
      ENDIF
      DCF=1.0
      IF(UNITSM.EQ.TCUM) THEN
        DCF=86400./43560.
        IF(METRIC.EQ.1) DCF=86.4
      ENDIF
      AMAX=AMAX*CONVRT*DCF+ADDC
C
      NBASE=PO(14)
      BASE=NBASE
      RANGE=AMAX-BASE
C
      IF(IHYD.NE.0) GO TO 480
      NPLCRT=PO(13)
      PLTCRT=NPLCRT
      IF(IBUG.EQ.1) WRITE(IODBUG,470) IHYD,PLTCRT,AMAX
470   FORMAT(16X,4HIHYD,4X,6HPLTCRT,6X,4HAMAX,/,
     1   10X,I10,2F10.2,//)
      IF(IPLHY.EQ.0 .AND. PLTCRT.GT.AMAX) RETURN
C
480   IF(NPLTSZ.EQ.101) GO TO 490
C
      IF(RANGE.GT.1000000.0) SCALE=RANGE/5.0
      IF(RANGE.LE.1000000.0) SCALE=200000.0
      IF(RANGE.LE.500000.0) SCALE=100000.0
      IF(RANGE.LE.250000.0) SCALE=50000.0
      IF(RANGE.LE.100000.0) SCALE=20000.0
      IF(RANGE.LE.50000.0) SCALE=10000.0
      IF(RANGE.LE.25000.0) SCALE=5000.0
      IF(RANGE.LE.10000.0) SCALE=2000.0
      IF(RANGE.LE.5000.0) SCALE=1000.0
      IF(RANGE.LE.2500.0) SCALE=500.0
      IF(RANGE.LE.1000.0) SCALE=200.0
      IF(RANGE.LE.500.0) SCALE=100.0
      IF(RANGE.LE.250.0) SCALE=50.0
      IF(RANGE.LE.100.0) SCALE=20.0
      IF(RANGE.LE.50.0) SCALE=10.0
      IF(RANGE.LE.25.0) SCALE=5.0
      IF(RANGE.LE.10.0) SCALE=2.0
      IF(RANGE.LE.5.0) SCALE=1.0
      IF(RANGE.LE.2.5) SCALE=0.5
      IF(RANGE.LE.1.0) SCALE=0.2
      IF(RANGE.LE.0.5) SCALE=0.1
      IF(RANGE.LE.0.25) SCALE=0.05
      IF(RANGE.LE.0.1) SCALE=0.02
      IF(RANGE.LE.0.05) SCALE=0.01
      GO TO 500
C
490   IF(RANGE.GT.1000000.0) SCALE=RANGE/10.0
      IF(RANGE.LE.1000000.0) SCALE=100000.0
      IF(RANGE.LE.500000.0) SCALE=50000.0
      IF(RANGE.LE.200000.0) SCALE=20000.0
      IF(RANGE.LE.100000.0) SCALE=10000.0
      IF(RANGE.LE.50000.0) SCALE=5000.0
      IF(RANGE.LE.20000.0) SCALE=2000.0
      IF(RANGE.LE.10000.0) SCALE=1000.0
      IF(RANGE.LE.5000.0) SCALE=500.0
      IF(RANGE.LE.2000.0) SCALE=200.0
      IF(RANGE.LE.1000.0) SCALE=100.0
      IF(RANGE.LE.500.0) SCALE=50.0
      IF(RANGE.LE.200.0) SCALE=20.0
      IF(RANGE.LE.100.0) SCALE=10.0
      IF(RANGE.LE.50.0) SCALE=5.0
      IF(RANGE.LE.20.0) SCALE=2.0
      IF(RANGE.LE.10.0) SCALE=1.0
      IF(RANGE.LE.5.0) SCALE=0.5
      IF(RANGE.LE.2.0) SCALE=0.2
      IF(RANGE.LE.1.0) SCALE=0.1
      IF(RANGE.LE.0.5) SCALE=0.05
      IF(RANGE.LE.0.2) SCALE=0.02
      IF(RANGE.LE.0.1) SCALE=0.01
C
C  DETERMINE IF A PREFERRED MINIMUM SCALE EXISTS
C     MINSCL IS DIMENSIONLESS ... NO DIFFERENCE IF ENGLISH OR METRIC
C
500   MINSCL=PO(6)
      SCLMIN=MINSCL
C
C  CHECK IF PREFERRED MINIMUM SCALE
C     IS GREATER THAN SCALE DETERMINED FROM AMAX AND BASE
C
      IF(SCLMIN.GT.SCALE) SCALE=SCLMIN
C
      IF(IBUG.EQ.1) WRITE(IODBUG,510) AMAX,SCALE,CONVRT,SCLMIN
510   FORMAT(16X,34HAMAX     SCALE    CONVRT    SCLMIN,/,
     1   10X,4F10.2,//)
C
C  SET UP SCALE ORDINATE DIVISIONS IN WORKING ARRAY, W1()
C     DATA IN ENGLISH
C
      JEND=11
      IF(NPLTSZ.EQ.51) JEND=6
      X=BASE
      W1(1)=BASE
      DO 520 JJ=2,JEND
      J=JJ
      X=X+SCALE
      W1(J)=X
520   CONTINUE
      JENDP1=JEND+1
      W1(JENDP1)=AMAX
C
C  IF IBUG = 1 ... PRINT OUT SCALE ARRAY W1()
C
      IF(IBUG.NE.1) GO TO 560
      WRITE(IODBUG,530) JEND
530   FORMAT(10X,17HSCALE ARRAY W1(1-,I2,1H))
      IF(JEND.EQ.6)  WRITE(IODBUG,540) (W1(J),J=1,JEND)
540   FORMAT(10X,6F10.2,//)
      IF(JEND.EQ.11)  WRITE(IODBUG,550) (W1(J),J=1,JEND)
550   FORMAT(10X,6F10.2,/,10X,5F10.2,//)
C
560   CONTINUE
C
C  IF RATING CURVE DEFINED (NORC=0) ... THIS IMPLIES THAT
C     A STAGE SCALE IS DESIRED UNLESS A LOOP RATING EXISTS
C     ... CHECK IF RATING CURVE IS A LOOP RATING
C         FRLOOP NOT MISSING (I=0) IMPLIES LOOP RATING
C         ... CANNOT DETERMINE STAGE SCALE
C         FRLOOP IS MISSING (I=1) IMPLIES SINGLE VALUE RATING
C         ... CAN DETERMINE STAGE SCALE
C
      IF(NORC.EQ.1) GO TO 680
C     CHANGE 1994 BEGIN
      IFRL=IFMSNG(FRLOOP)
C
      IF(IBUG.EQ.1) WRITE(IODBUG,570) NORC,FRLOOP,IFRL
570   FORMAT(16X,14HNORC    FRLOOP,9X,4HIFRL,/,
     1   10X,I10,F10.2,I10,//)
      IF(IFRL.EQ.0) THEN
      WRITE(IPR,580) RTCVID
580   FORMAT(///10X,'*WARNING* RATING CURVE ',2A4,
     & ' HAS LOOP RATING OPTION TURNED ON, ',
     & ' A STAGE SCALE CANNOT BE COMPUTED')
      CALL WARN
      FLSTAG=FLDSTG
      NPLSTG=PO(16)
      PLTSTG=NPLSTG
      IF(METRIC.NE.0) GO TO 680
      QCNVRT=CONVRT
      QADDC=ADDC
      IERR=0
      CALL FCONVT(SUNTM,SDIM,SUNTE,SCNVRT,SADDC,IERR)
      GO TO 680
      END IF
C     CHANGE 1994 END
C
C  NOT A LOOP RATING ... CONVERT SCALE WORKING ARRAY W1() TO STAGES
C     SET UP VARIABLES FOR CALL TO SUBROUTINE FSTGQ
C
      RCID(1)=R1
      RCID(2)=R2
      ICONV=2
      ITSPOS=1
      NVALS=JENDP1
      TSDELT=0.00
C
C  INITIALIZE ARRAYS FOR SUBROUTINE, FSTGQ
C
      DO 590 JJ=1,JENDP1
      J=JJ
      X=W1(J)
      IF(METRIC.EQ.0) X=X/CONVRT
      QDATA(J)=X
      HDATA(J)=0.00
      LOCPTR(J)=0
      T1(J)=0.00
      IF(J.LT.5) CARRYO(J)=0.00
590   CONTINUE
C
      CURVLO=0.00
      CURVUP=0.00
      XSECLO=0.00
      XSECUP=0.00
      METHOD=0
      FLSTAG=FLDSTG
      NEEDEX=0
      JULDAY=IDA
      INITHR=IHR
      IRCHNG=0
      IERROR=0
      IPRWRN=0
C
C  CALL FSTGQ SUBROUTINE TO DETERMINE STAGE SCALE
C     STAGE SCALE (METRIC) WILL BE RETURNED IN HDATA() ARRAY
C
      CALL FSTGQ(RCID,ICONV,ITSPOS,NVALS,TSDELT,
     1   QDATA,HDATA,LOCPTR,T1,CURVLO,CURVUP,XSECLO,
     2   XSECUP,METHOD,FLSTAG,NEEDEX,CARRYO,JULDAY,
     3   INITHR,IRCHNG,IERROR,IPRWRN)
C
      IF(IERROR.EQ.1) NORC=1
      IF(NORC.EQ.1) GO TO 680
C
C  CHECK IF STAGE, HDATA(JENDP1), ASSOCIATED WITH FLOW, AMAX,
C     IS GREATER THAN PLOT STAGE, PLTSTG
C     ... IF IPLHY = 1 ... PLOT HYDROGRAPHS NO MATTER WHAT
C                          THE CRITERIA ARE
C     ... MAX STAGE IS IN METRIC UNITS AT THIS POINT
C         PLOT STAGE IS DIMENSIONLESS
C     ... IF LESS THAN PLOT STAGE ... RETURN
C
      NPLSTG=PO(16)
      PLTSTG=NPLSTG
      IF(IPLHY.EQ.1) GO TO 610
      X=HDATA(JENDP1)
C
      IF(IBUG.EQ.1) WRITE(IODBUG,600) IPLHY,NPLSTG,PLTSTG,JENDP1,X
600   FORMAT(15X,5HIPLHY,4X,6HNPLSTG,4X,6HPLTSTG,
     1   4X,6HJENDP1,9X,1HX,/,
     2   10X,2I10,F10.1,I10,F10.1,/)
C
      IF(METRIC.NE.0 .AND. X.LT.PLTSTG) RETURN
C
C  IF OUTPUT IN ENGLISH UNITS, CONVERT STAGE/FLOW SCALES
C     FLOW SCALE, W1() ARRAY, STILL IN ORIGINAL UNITS (METRIC)
C
610   IF(METRIC.NE.0) GO TO 650
      QCNVRT=CONVRT
      QADDC=ADDC
      IERR=0
C
      CALL FCONVT(SUNTM,SDIM,SUNTE,SCNVRT,SADDC,IERR)
C
      IF(IBUG.EQ.1) WRITE(IODBUG,620) SUNTM,SDIM,SUNTE,
     1   SCNVRT,SADDC,IERR
620   FORMAT(//,15X,5HSUNTM,6X,4HSDIM,5X,5HSUNTE,
     1   4X,6HSCNVRT,5X,5HSADDC,6X,4HIERR,/,
     2   10X,3(6X,A4),2F10.4,I10,//)
C
      X=X*SCNVRT+SADDC
C
      IF(IBUG.EQ.1) WRITE(IODBUG,630) X,PLTSTG
630   FORMAT(14X,1HX,4X,6HPLTSTG,/,5X,2F10.2,//)
C
      IF(IPLHY.EQ.0 .AND. X.LT.PLTSTG) RETURN
C
      DO 640 II=1,JEND
      I=II
      X=QDATA(I)
      X=X*QCNVRT+QADDC
      QDATA(I)=X
      X=HDATA(I)
      X=X*SCNVRT+SADDC
      HDATA(I)=X
640   CONTINUE
C
C  IF IBUG = 1 ... PRINT OUT STAGE/FLOW SCALES
C
650   IF(IBUG.NE.1) GO TO 680
      WRITE(IODBUG,660) JEND
660   FORMAT(10X,26HSTAGE SCALE ARRAY HDATA(1-,I2,1H))
      IF(JEND.EQ.6) WRITE(IODBUG,540) (HDATA(J),J=1,JEND)
      IF(JEND.EQ.11) WRITE(IODBUG,550) (HDATA(J),J=1,JEND)
      WRITE(IODBUG,670) JEND
670   FORMAT(10X,25HFLOW SCALE ARRAY QDATA(1-,I2,1H))
      IF(JEND.EQ.6) WRITE(IODBUG,540) (QDATA(J),J=1,JEND)
      IF(JEND.EQ.11) WRITE(IODBUG,550) (QDATA(J),J=1,JEND)
C
680   CONTINUE
C
C  *********************************************************************
C
C
C  IF IBUG = 1 ... PRINT OUT D1() ARRAY
C
      IF(IBUG.NE.1) GO TO 700
      WRITE(IODBUG,310)
      DO 690 LL=1,NUMTS
      L=LL
      I=LOCTS(L)+IOBGN
      J=I+N
      WRITE(IODBUG,320) I,J
      WRITE(IODBUG,330) (D1(K),K=I,J)
690   CONTINUE
C
700   CONTINUE
C
C  BEGIN TO PRINT THE PLOT
C
C  CHECK WHETHER TO GO TO TOP OF NEW PAGE
C
      NEWPG=PO(3)
      IF(NEWPG.GT.0) WRITE(IPR,710)
710   FORMAT(1H1)
      IF(NEWPG.LT.1) WRITE(IPR,720)
720   FORMAT(/////)
C
C  CHECK PUNCH STREAM OF PLOT OPTION ... 0/1/2
C     IF 0 ... NO PUNCH STREAM
C     IF 1 ... PUNCH STREAM ONLY (NPLTSZ=51)
C     IF 2 ... PUNCH AND PRINT STREAM (NPLTSZ=51)
C
      NPUNCH=PO(5)
C
C  DETERMINE TIME OF LAST OBSERVED DATA
C
      IMONOW=0
      IDANOW=0
      IYRNOW=0
      IHRNOW=0
      TIMZON=BLANK4
      CALL MDYH1(LDACPD,LHRCPD,IMONOW,IDANOW,IYRNOW,IHRNOW,
     1   NOUTZ,NOUTDS,TIMZON)
      MO=MONTH(IMONOW)
C
C  CHECK WHETHER OPERATIONAL RUN OR NOT
C
      IF(MAINUM.EQ.1) GO TO 730
C
      ITEMP1=IMONOW
      ITEMP2=IDANOW
      ITEMP3=IYRNOW
      ITEMP4=IHRNOW
      CALL MDYH1(LDA,LHR,IMONOW,IDANOW,IYRNOW,IHRNOW,
     1   NOUTZ,NOUTDS,TIMZON)
      MO=MONTH(IMONOW)
730   CONTINUE
C
C  DETERMINE BEGINNING DATE AND TIME OF PLOT
C
      IMOBGN=0
      IDABGN=0
      IYRBGN=0
      IHRBGN=0
      TIMZON=BLANK4
      CALL MDYH1(IDA,IHR,IMOBGN,IDABGN,IYRBGN,IHRBGN,
     1   NOUTZ,NOUTDS,TIMZON)
C
C  PRINT PLOT TITLE LINE
C
      IHYD=PO(2)
      IF(IHYD.EQ.9) IHYD=0
      IF(IHYD.NE.1) GO TO 770
      IF(NPUNCH.NE.1 .AND. METRIC.NE.0) WRITE(IPR,740)
     1   (RIVSTA(I),I=1,5),(RIVERN(I),I=1,5),
     2   MO,IYRNOW,TIMZON,ISEG(1),ISEG(2)
740   FORMAT(1X,5A4,2H- ,5A4,5X,A4,I4,2X,A4,5X,2A4,
     1   9X,20H*** METRIC UNITS ***,/)
      IF(NPUNCH.NE.1 .AND. METRIC.EQ.0) WRITE(IPR,750)
     1   (RIVSTA(I),I=1,5),(RIVERN(I),I=1,5),
     2   MO,IYRNOW,TIMZON,ISEG(1),ISEG(2)
750   FORMAT(1X,5A4,2H- ,5A4,5X,A4,I4,2X,A4,5X,2A4,
     1   9X,21H*** ENGLISH UNITS ***,/)
      IF(NPUNCH.GT.0) WRITE(IPU,760)
     1   (RIVSTA(I),I=1,5),(RIVERN(I),I=1,5),
     2   MO,IYRNOW,TIMZON,ISEG(1),ISEG(2)
760   FORMAT(1X,5A4,2H- ,5A4,5X,A4,I4,2X,A4,5X,2A4,/)
      GO TO 810
C
770   IF(NPUNCH.NE.1 .AND. METRIC.NE.0) WRITE(IPR,780)
     1   (PO(I),I=16,25),MO,IYRNOW,TIMZON,ISEG(1),ISEG(2)
780   FORMAT(1X,10A4,5X,A4,I4,2X,A4,5X,2A4,
     1   9X,20H*** METRIC UNITS ***,/)
      IF(NPUNCH.NE.1 .AND. METRIC.EQ.0) WRITE(IPR,790)
     1   (PO(I),I=16,25),MO,IYRNOW,TIMZON,ISEG(1),ISEG(2)
790   FORMAT(1X,10A4,5X,A4,I4,2X,A4,5X,2A4,
     1   9X,21H*** ENGLISH UNITS ***,/)
      IF(NPUNCH.GT.0) WRITE(IPU,800)
     1   (PO(I),I=16,25),MO,IYRNOW,TIMZON,ISEG(1),ISEG(2)
800   FORMAT(1X,10A4,5X,A4,I4,2X,A4,5X,2A4,/)
      GO TO 860
C
C  PRINT SYMBOL IDENTIFICATIONS
C
810   FLDSYM=PO(18)
      RATLIM=PO(19)
      RCDMAX=PO(20)
      RNWSID(1)=PO(21)
      RNWSID(2)=PO(22)
C
C  IF IPOPT=0 THEN THERE IS NO OPTIONAL INFORMATION TO
C  EXTRACT FROM THE XRC ARRAY.
C
      IF(IPOPT.EQ.0) GO TO 850
      IPT=IPOPT
820   NUMCOD=XRC(IPT)
      IF (NUMCOD.LT.0) GO TO 850
      GO TO (830,830,840,830,830),NUMCOD
C
C  NUMBER CODE FOR THE NWS IDENTIFIER NOT FOUND, ADVANCE POINTER.
C
830   IPT=IPT+1
      IPT=XRC(IPT)
      GO TO 820
C
C  EXTRACT THE NWS IDENTIFIER FROM THE XRC ARRAY.
C
840   IPT=IPT+2
      RNWSID(1)=XRC(IPT)
      RNWSID(2)=XRC(IPT+1)
C
C  IF OUTPUT IS IN METRIC UNITS, THEN CONVERT DATUM TO METRIC.
C
850   CONTINUE
      RGZERO=GZERO
      IF (METRIC.EQ.0) RGZERO=RGZERO*SCNVRT+SADDC
C
860   CONTINUE
C
C  RESET IMONOW,IDANOW,IYRNOW,IHRNOW IF NOT AN OPERATIONAL RUN
C
      IF(MAINUM.EQ.1) GO TO 870
      IMONOW=ITEMP1
      IDANOW=ITEMP2
      IYRNOW=ITEMP3
      IHRNOW=ITEMP4
      MO=MONTH(IMONOW)
870   CONTINUE
C
      M=0
      novrsn=po(1)
      pltime=po(7)
      DO 1040 II=1,NUMTS
      I=II-1
      kk=ncalc+(i*12)+12
      if(novrsn.eq.2.and.i.gt.0) kk=ncalc+(i*18)+12
      tstime=pltime
      if(novrsn.eq.2) tstime=po(kk)
      if(pltime.ne.tstime) goto 1040
      K=NCALC+(I*12)+5
      if(novrsn.eq.2.and.i.gt.0) k=ncalc+(i*18)+5
      PLTOPT=PO(K)
      IF(PLTOPT.EQ.TLIST) GO TO 1040
C
      K=K+1
      SYMBOL=PO(K)
      K=K-6
      TSID1=PO(K)
      K=K+1
      TSID2=PO(K)
      K=K+1
      TYPE=PO(K)
      K=K+1
      UNITSM=PO(K)
      K=K+8
      UNITSE=PO(K)
      UNITS=UNITSM
c
      do 875 ik=1,5
         descrp(ik)='    '
  875 continue
      novrsn=po(1)
      if(novrsn.eq.2) call umemov(po(kk+1),descrp,5)
c
      IF(METRIC.EQ.0) UNITS=UNITSE
C
      M=M+1
      IF(M.GT.3) GO TO 980
      IF(IHYD.NE.1) GO TO 980
C
      IF(FLDSYM.EQ.BLANK1) GO TO 980
      IF(RATLIM.EQ.BLANK1) GO TO 980
      IF(RCDMAX.EQ.BLANK1) GO TO 980
C
      GO TO (880,920,960),M
C
880   IF (NPUNCH.NE.1.AND.IPRRCI.EQ.0) GO TO 890
      WRITE(IPR,910) SYMBOL,TSID1,TSID2,TYPE,UNITS,descrp,
     1     FLDSYM,RNWSID(1),RNWSID(2)
      GO TO 1040
890   IF(NPUNCH.NE.1) WRITE(IPR,900)
     1   SYMBOL,TSID1,TSID2,TYPE,UNITS,descrp,FLDSYM
C     IF(NPUNCH.GT.0) WRITE(IPU,710)
C    1   SYMBOL,TSID1,TSID2,TYPE,UNITS,FLDSYM
900   FORMAT(11X,A1,3H = ,2A4,1X,A4,1X,1H(,A4,1H),
     1   5x,5a4,5X,A1,14H = FLOOD STAGE)
910   FORMAT(11X,A1,3H = ,2A4,1X,A4,1X,1H(,A4,1H),
     1   5X,5a4,5x,A1,14H = FLOOD STAGE,
     2   22X,13HNWS-ID =     ,2A4)
      GO TO 1040
C
920   IF (NPUNCH.NE.1.AND.IPRRCI.EQ.0) GO TO 930
      WRITE(IPR,950)SYMBOL,TSID1,TSID2,TYPE,UNITS,descrp,RATLIM,RGZERO
      GO TO 1040
930   IF(NPUNCH.NE.1) WRITE(IPR,940)
     1   SYMBOL,TSID1,TSID2,TYPE,UNITS,descrp,RATLIM
C     IF(NPUNCH.GT.0) WRITE(IPU,730)
C    1   SYMBOL,TSID1,TSID2,TYPE,UNITS,RATLIM
940   FORMAT(11X,A1,3H = ,2A4,1X,A4,1X,1H(,A4,1H),
     1   5X,5a4,5x,A1,21H = RATING UPPER LIMIT)
950   FORMAT(11X,A1,3H = ,2A4,1X,A4,1X,1H(,A4,1H),
     1   5X,5a4,5x,A1,21H = RATING UPPER LIMIT,15X,9HDATUM  = ,F10.2)
      GO TO 1040
C
960   IF(NPUNCH.NE.1) WRITE(IPR,970)
     1   SYMBOL,TSID1,TSID2,TYPE,UNITS,descrp,RCDMAX
C     IF(NPUNCH.GT.0) WRITE(IPU,750)
C    1   SYMBOL,TSID1,TSID2,TYPE,UNITS,RCDMAX
970   FORMAT(11X,A1,3H = ,2A4,1X,A4,1X,1H(,A4,1H),
     1   5X,5a4,5x,A1,16H = MAX OF RECORD)
      GO TO 1040
C
980   IF(M.NE.NPLTTS) GO TO 1020
      IF(METRIC.EQ.1) GO TO 1000
      IF(NPUNCH.NE.1) WRITE(IPR,1030)
     1    SYMBOL,TSID1,TSID2,TYPE,UNITS,descrp
C     IF(NPUNCH.GT.0) WRITE(IPU,762)
      IF(NPUNCH.GT.0 .AND. IHYD.EQ.0) WRITE(IPU,990)
     1   SYMBOL,TSID1,TSID2,TYPE,UNITS,descrp
990   FORMAT(11X,A1,3H = ,2A4,1X,A4,1X,1H(,A4,1H),5x,5a4,
     1   5X,21H*** ENGLISH UNITS ***)
      GO TO 1040
C
1000  IF(NPUNCH.NE.1) WRITE(IPR,1030)
     1    SYMBOL,TSID1,TSID2,TYPE,UNITS,descrp
C     IF(NPUNCH.GT.0) WRITE(IPU,766)
      IF(NPUNCH.GT.0 .AND. IHYD.EQ.0) WRITE(IPU,1010)
     1    SYMBOL,TSID1,TSID2,TYPE,UNITS,descrp
1010  FORMAT(11X,A1,3H = ,2A4,1X,A4,1X,1H(,A4,1H),5x,5a4,
     1   5X,20H*** METRIC UNITS ***)
      GO TO 1040
C
1020  IF(NPUNCH.NE.1) WRITE(IPR,1030)
     1    SYMBOL,TSID1,TSID2,TYPE,UNITS,descrp
C     IF(NPUNCH.GT.0) WRITE(IPU,770)
      IF(NPUNCH.GT.0 .AND. IHYD.EQ.0) WRITE(IPU,1030)
     1    SYMBOL,TSID1,TSID2,TYPE,UNITS,descrp
1030  FORMAT(11X,A1,3H = ,2A4,1X,A4,1X,1H(,A4,1H),5x,5a4)
C
1040  CONTINUE
C
      IF(NPUNCH.NE.1) WRITE(IPR,1050)
C     IF(NPUNCH.GT.0) WRITE(IPU,790)
      IF(NPUNCH.GT.0 .AND. IHYD.EQ.0) WRITE(IPU,1050)
1050  FORMAT(10X)
C
C  IF PLOT IS HYDROGRAPH ... PRINT FLOOD/WARNING/MAX OF RECORD INFO
C     IF NPUNCH .NE. 1 ... IMPLIES PRINT LINE
C     IF NPUNCH .GT. 0 ... IMPLIES PUNCH LINE
C     IF NORC   .EQ.1 ... NO RATING CURVE ... DATA NOT AVAILABLE
C
      IF(IHYD.NE.1) GO TO 1330
      IF(NORC.EQ.1) GO TO 1330
C
      FLUDQ=FLOODQ
      WRSTG=WRNSTG
      RCFSTG=RFSTG
      RCFQ=RFQ
      IRFDAT=IRFDAY
      IF(IRFDAT.GT.0) GO TO 1060
      IRFMO=99
      IRFDA=99
      IRFYR=9999
1060  IRFMO=IRFDAT/1000000
      IRFDA=(IRFDAT-(IRFMO*1000000))/10000
      IRFYR=IRFDAT-(IRFMO*1000000)-(IRFDA*10000)
C
C  DETERMINE BANKFULL STAGE, BNKSTG, FROM XRC ARRAY
C
      IPT=IPOPT
1070  NUMCOD=XRC(IPT)
      IF(NUMCOD.LT.0) BNKSTG=-999.0
      IF(NUMCOD.LT.0) GO TO 1100
      GO TO (1080,1080,1080,1090,1080),NUMCOD
C
1080  IPT=IPT+1
      IPT=XRC(IPT)
      GO TO 1070
C
1090  IPT=IPT+2
      BNKSTG=XRC(IPT)
C
1100  CONTINUE
C
      IF(METRIC.EQ.1) GO TO 1110
      IF(IFMSNG(FLSTAG).EQ.0) FLSTAG=FLSTAG*SCNVRT+SADDC
      IF(IFMSNG(FLUDQ).EQ.0) FLUDQ=FLUDQ*QCNVRT+QADDC
      IF(IFMSNG(WRNSTG).EQ.0) WRSTG=WRSTG*SCNVRT+SADDC
      IF(IFMSNG(BNKSTG).EQ.0) BNKSTG=BNKSTG*SCNVRT+SADDC
      IF(IFMSNG(RCFSTG).EQ.0) RCFSTG=RCFSTG*SCNVRT+SADDC
      IF(IFMSNG(RCFQ).EQ.0) RCFQ=RCFQ*QCNVRT+QADDC
1110  IF(RCFQ.GT.0) CALL FSIGFG(RCFQ,3,IER)
C
      TOTALA=AREAT
      ALOCAL=AREAL
      AKM2MI=1.0
      IF(METRIC.EQ.0) CALL FCONVT('KM  ','MI  ',ENGU,AKM2MI,BKM2MI,IERR)
      IF(METRIC.EQ.0) TOTALA=TOTALA*(AKM2MI**2)
      IF(METRIC.EQ.0) ALOCAL=ALOCAL*(AKM2MI**2)
C
      IF(NPUNCH.NE.1 .AND. NPLTSZ.EQ.101) GO TO 1150
1120  IF(NPUNCH.NE.1 .AND. NPLTSZ.EQ.51 .AND. NMLIST.LE.3) GO TO 1190
1130  IF(NPUNCH.GT.0 .AND. NPLTSZ.EQ.51) GO TO 1230
1140  IF(NPUNCH.NE.1 .AND. NPLTSZ.EQ.51 .AND. NMLIST.GT.3) GO TO 1240
      GO TO 1250
C
C
1150  WRITE(IPR,1160) FLSTAG,PVISFS,FLUDQ,RCFSTG
1160  FORMAT(11X,15HFLOOD STAGE   =,F7.1,A4,
     1   3X,16HFLOOD FLOW     =,F10.1,
     2   24X,22HMAX OF RECORD  STAGE =,F9.1)
C
      WRITE(IPR,1170) WRSTG,BNKSTG,RCFQ
1170  FORMAT(11X,15HWARNING STAGE =,F7.1,
     1   7X,16HBANKFULL STAGE =,F10.1,
     2   39X,7HFLOW  =,F9.1)
C
      WRITE(IPR,1180) PLTSTG,(FPTYPE(I),I=1,5),IRFMO,IRFDA,IRFYR
1180  FORMAT(11X,15HPLOT STAGE    =,F7.1,
     1   7X,17HFCST CRITERIA  = ,5(A4,1X),
     2   23X,8HDATE  = ,I2,1H-,I2,1H-,I4)
C
      WRITE(IPR,1185) TOTALA,ALOCAL,(RFCOMT(III),III=1,5)
1185  FORMAT(11X,'TOTAL AREA = ',F9.1,
     1   7X,'LOCAL AREA     = ',F9.1,
     2  24X,'COMMENTS             =',5A4)
      GO TO 1120
C
C
1190  WRITE(IPR,1200) FLSTAG,PVISFS,FLUDQ
1200  FORMAT(11X,15HFLOOD STAGE   =,F7.1,A4,
     1   3X,16HFLOOD FLOW     =,F10.1)
C
      WRITE(IPR,1210) WRSTG,BNKSTG
1210  FORMAT(11X,15HWARNING STAGE =,F7.1,
     1   7X,16HBANKFULL STAGE =,F10.1)
C
      WRITE(IPR,1220) PLTSTG,(FPTYPE(I),I=1,5)
1220  FORMAT(11X,15HPLOT STAGE    =,F7.1,
     1   7X,17HFCST CRITERIA  = ,5(A4,1X))
      WRITE(IPR,1185) TOTALA,ALOCAL,(RFCOMT(III),III=1,5)
      GO TO 1130
C
C
1230  WRITE(IPU,1200) FLSTAG,PVISFS,FLUDQ
      WRITE(IPU,1210) WRSTG,BNKSTG
      WRITE(IPU,1220) PLTSTG,(FPTYPE(I),I=1,5)
      WRITE(IPR,1185) TOTALA,ALOCAL,(RFCOMT(III),III=1,5)
      GO TO 1140
C
C
1240  WRITE(IPR,1160) FLSTAG,PVISFS,FLUDQ,RCFSTG
      WRITE(IPR,1170) WRSTG,BNKSTG,RCFQ
      WRITE(IPR,1180) PLTSTG,(FPTYPE(I),I=1,5),IRFMO,IRFDA,IRFYR
      WRITE(IPR,1185) TOTALA,ALOCAL,(RFCOMT(III),III=1,5)
C
1250  IF(NPUNCH.NE.1) WRITE(IPR,1050)
      IF(NPUNCH.GT.0) WRITE(IPU,1050)
C
C  IF IPRRCI=0, THEN NO OPTIONAL INFORMATION IS TO BE PRINTED.
C
      IF (IPRRCI.EQ.0) GO TO 1330
C
C  IF IPOPT=0, THEN THERE IS NO OPTIONAL INFORMATION IN THE
C  XRC ARRAY.
C
      IF (IPOPT.EQ.0) GO TO 1300
      IF (NPUNCH.EQ.1) GO TO 1320
C
C  FIND THE ADDITIONAL COMMENTS IN THE XRC ARRAY AND PRINT OUT.
C
      IPT=IPOPT
1260  NUMCOD=XRC(IPT)
      IF (NUMCOD.LT.0) GO TO 1320
      GO TO (1280,1270,1270,1270,1270), NUMCOD
C
C  ADDITIONAL COMMENTS NOT FOUND, ADVANCE POINTER TO NEXT LOCATION
C  IN XRC ARRAY.
C
1270  IPT=IPT+1
      IPT=XRC(IPT)
      GO TO 1260
C
C  ADDITIONAL COMMENTS FOUND.  CALCULATE THE END (IEND) OF THE
C  COMMENT LINE IN XRC ARRAY AND PRINT OUT.
C
1280  IPT=IPT+1
      IEND=XRC(IPT)-1
      IPT=IPT+1
      WRITE(IPR,1290) (XRC(I),I=IPT,IEND)
1290  FORMAT(1X,11HCOMMENTS:  ,30A4)
      IPT=IEND+1
      GO TO 1260
1300  IF (NPUNCH.NE.1) WRITE(IPR,1310)
1310  FORMAT('**** NO OPTIONAL INFORMATION AVAILABLE ****')
1320  WRITE(IPR,1050)
1330  CONTINUE
C
C
C  IF PLOT IS HYDROGRAPH WITH RATING CURVE DEFINED ... PRINT STAGE SCALE
C     NORC = 0
C     IHYD = 1
C
      IF(IHYD.NE.1) GO TO 1410
      IF(NORC.NE.0) GO TO 1410
C     CHANGE 1994 BEGIN
      IF(IFRL.EQ.0) GO TO 1410
C     CHANGE 1994 END
C
      X=HDATA(1)
      XX1=X
      NDEC=1
      IF (X.GT.-1.AND.X.LT.0.) THEN
         NDEC=2
         GOTO 1340
         ENDIF
      IF (X.GE.0.AND.X.LT.0.9995) THEN
         NDEC=3
         GOTO 1340
         ENDIF
      IF (X.GE.0.9995.AND.X.LT.1.0) THEN
         NDEC=2
         GOTO 1340
         ENDIF
      IF (X.GE.1..AND.X.LT.9.995) THEN
         NDEC=2
         GOTO 1340
         ENDIF
      IF (X.GE.9.995.AND.X.LT.10.) GOTO 1340
      IF (X.GT.-10..AND.X.LE.-1.) GOTO 1340
      IF (X.GE.10..AND.X.LT.100.) GOTO 1340
C
      IWHOLE=ABS(X)
      WHOLE=IWHOLE
      REMAIN = 0.0
      IF (IWHOLE .NE. 0) REMAIN = MOD(ABS(X),WHOLE)
C
      NDEC=0
      IF (REMAIN.GE.0.5) THEN
         CALL UROUND('REAL4',X,1.0,'HIGH',X1,IERR)
         GOTO 1340
         ENDIF
      CALL UROUND('REAL4',X,1.0,'LOW',X1,IERR)
      X=X1
      XX1=X
1340  CALL UFF2A(X,Y,1,4,NDEC,0,6,ISTAT)
      CALL UMEMOV(Y,CHAR,1)
      DOT=.FALSE.
      DO 1350 I=1,4
         IF (CHAR(I:I).EQ.'.') DOT=.TRUE.
1350  CONTINUE
      IF (.NOT.DOT) THEN
         IF (CHAR(1:1).EQ.' ') THEN
            DO 1360 J=2,4
               CHAR(J-1:J-1)=CHAR(J:J)
1360        CONTINUE
            CHAR(4:4)='.'
            CALL UMEMOV(CHAR,Y,1)
            GOTO 1370
            ENDIF
         IF (XX1.GT.9999.995) CALL UMEMOV(4H    ,Y,1)
         ENDIF
      IF(lholeq(Y,4H.000)) CALL UMEMOV(4H 0.0,Y,1)
1370  CONTINUE
      HDATA(1)=Y
C
      IF(NPUNCH.NE.1 .AND. JEND.EQ.6) WRITE(IPR,1380)
     1    (HDATA(J),J=1,JEND)
1380  FORMAT(21X,5HSTAGE,A4,5F10.1)
C
      IF(NPUNCH.GT.0 .AND. JEND.EQ.6) WRITE(IPU,1390)
     1    (HDATA(J),J=1,JEND)
1390  FORMAT(20X,5HSTAGE,A4,F9.1,4F10.1)
C
      IF(NPUNCH.NE.1 .AND. JEND.EQ.11) WRITE(IPR,1400)
     1    (HDATA(J),J=1,JEND)
1400  FORMAT(21X,5HSTAGE,A4,10F10.1)
1410  CONTINUE
C
C  PRINT COLUMN HEADINGS AND SCALE OF PLOT
C
      X=W1(1)
      Y1=X
      NDEC=1
      IF (X.GT.-1.AND.X.LT.0.) THEN
         NDEC=2
         GOTO 1420
         ENDIF
      IF (X.GE.0.AND.X.LT.0.9995) THEN
         NDEC=3
         GOTO 1420
         ENDIF
      IF (X.GE.0.9995.AND.X.LT.1.0) THEN
         NDEC=2
         GOTO 1420
         ENDIF
      IF (X.GE.1..AND.X.LT.9.995) THEN
         NDEC=2
         GOTO 1420
         ENDIF
      IF (X.GE.9.995.AND.X.LT.10.) GOTO 1420
      IF (X.GT.-10..AND.X.LE.-1.) GOTO 1420
      IF (X.GE.10..AND.X.LT.100.) GOTO 1420
C
      IWHOLE=ABS(X)
      WHOLE=IWHOLE
      REMAIN = 0.0
      IF (IWHOLE .NE. 0) REMAIN = MOD(ABS(X),WHOLE)
C
      NDEC=0
      IF (REMAIN.GE.0.5) THEN
         CALL UROUND('REAL4',X,1.0,'HIGH',X1,IERR)
         GOTO 1420
         ENDIF
      CALL UROUND('REAL4',X,1.0,'LOW',X1,IERR)
      X=X1
1420  CONTINUE
      CALL UFF2A(X,Y,1,4,NDEC,0,6,ISTAT)
      CALL UMEMOV(Y,CHAR,1)
      DOT=.FALSE.
      DO 1430 I=1,4
         IF (CHAR(I:I).EQ.'.') DOT=.TRUE.
1430  CONTINUE
      IF (.NOT.DOT) THEN
         IF (CHAR(1:1).EQ.' ') THEN
            DO 1440 J=2,4
               CHAR(J-1:J-1)=CHAR(J:J)
1440        CONTINUE
            CHAR(4:4)='.'
            CALL UMEMOV(CHAR,Y,1)
            GOTO 1450
            ENDIF
         IF (Y1.GT.9999.995) CALL UMEMOV(4H    ,Y,1)
         ENDIF
      IF(lholeq(Y,4H.000)) CALL UMEMOV(4H 0.0,Y,1)
1450  CONTINUE
      W1(1)=Y
C
      IF(NPUNCH.NE.1 .AND. JEND.EQ.11) WRITE(IPR,1460)
     1    (PO(I),I=26,30),(W1(J),J=1,JEND)
1460  FORMAT(1X,5HDA HR,5A4,A4,10F10.1)
C
      IF(NPUNCH.NE.1 .AND. JEND.EQ.6 .AND. NMLIST.LE.3)
     1   WRITE(IPR,1470) (PO(I),I=26,30),(W1(J),J=1,JEND)
1470  FORMAT(1X,5HDA HR,5A4,A4,5F10.1)
C
      IF(NPUNCH.GT.0 .AND. JEND.EQ.6) WRITE(IPU,1480)
     1   (PO(I),I=26,30),(W1(J),J=1,JEND)
1480  FORMAT(5HDA HR,5A4,A4,F9.1,4F10.1)
C
      IF(NPUNCH.NE.1 .AND. JEND.EQ.6 .AND. NMLIST.GT.3)
     1   WRITE(IPR,1490) (PO(I),I=26,30),W1(1),(W1(J),J=2,JEND),
     2   (PO(K),K=31,43)
1490  FORMAT(1X,5HDA HR,5A4,A4,5F10.1,13A4)
C
C  INITIALIZE PLOT SYMBOLS, VARIABLES
C     NPLTSZ=PO(4)
C     INTRVL=PO(7)
C     NMLIST=PO(10)
C     FLDSYM=PO(18)
C     RATLIM=PO(19)
C     RCDMAX=PO(20)
C
      NCRMNT=PO(8)
      ORDSYM=PO(11)
      CURTM=PO(12)
      SYMBOL=BLANK1
      LINE=0
      INCRTS=NCRMNT/INTRVL
      ICFLAG=0
C
C  DETERMINE THE BEGINNING AND ENDING DATE AND TIME OF PLOT
C
      IMOBGN=0
      IDABGN=0
      IYRBGN=0
      IHRBGN=0
      TIMZON=BLANK4
      CALL MDYH1(IDA,IHR,IMOBGN,IDABGN,IYRBGN,IHRBGN,
     1   NOUTZ,NOUTDS,TIMZON)
C
      IF(IBUG.EQ.1) WRITE(IODBUG,1500)
     1   IDA,IHR,IMOBGN,IDABGN,IYRBGN,IHRBGN,NOUTZ,NOUTDS,TIMZON
1500  FORMAT(17X,3HIDA,7X,3HIHR,4X,6HIMOBGN,4X,6HIDABGN,
     1   4X,6HIYRBGN,4X,6HIHRBGN,/,10X,6I10,//,
     2   15X,5HNOUTZ,4X,6HNOUTDS,4X,6HTIMZON,/,
     3   10X,2I10,6X,A4,/)
C
      L=IYRBGN-((IYRBGN/4)*4)
      IF(L.EQ.0) MODAYS(2)=29
C
      IMOEND=0
      IDAEND=0
      IYREND=0
      IHREND=0
      TIMZON=BLANK4
      CALL MDYH1(LDA,LHR,IMOEND,IDAEND,IYREND,IHREND,
     1   NOUTZ,NOUTDS,TIMZON)
C
      IF(IBUG.EQ.1) WRITE(IODBUG,1510)
     1   LDA,LHR,IMOEND,IDAEND,IYREND,IHREND,NOUTZ,NOUTDS,TIMZON
1510  FORMAT(17X,3HLDA,7X,3HLHR,4X,6HIMOEND,4X,6HIDAEND,
     1   4X,6HIYREND,4X,6HIHREND,/,10X,6I10,//,
     2   15X,5HNOUTZ,4X,6HNOUTDS,4X,6HTIMZON,/,
     3   10X,2I10,6X,A4,/)
C
C  DETERMINE DATE - TIME FOR THIS LINE OF PLOT
C
1520  LINE=LINE+1
      IF(LINE.GT.1) GO TO 1530
      LINEMO=IMOBGN
      LINEDA=IDABGN
      LINEYR=IYRBGN
      LINEHR=IHRBGN
      GO TO 1540
C
1530  LINEHR=LINEHR+NCRMNT
      IF(LINEHR.LT.25) GO TO 1540
      LINEHR=LINEHR-24
      LINEDA=LINEDA+1
      L=MODAYS(LINEMO)
      IF(LINEDA.LE.L) GO TO 1540
      LINEDA=LINEDA-L
      LINEMO=LINEMO+1
      IF(LINEMO.LT.13) GO TO 1540
      LINEMO=1
      LINEYR=LINEYR+1
      MODAYS(2)=28
      L=LINEYR-((LINEYR/4)*4)
      IF(L.EQ.0) MODAYS(2)=29
1540  CONTINUE
C
      IF(IBUG.EQ.1 .AND. LINE.EQ.1) WRITE(IODBUG,1550)
     1   LINEMO,LINEDA,LINEYR,LINEHR
1550  FORMAT(14X,6HLINEMO,4X,6HLINEDA,4X,6HLINEYR,4X,6HLINEHR,/,
     1   10X,4I10,/)
C
C  INITIALIZE ARRAY OF TIME SERIES DATA TO BE LISTED
C
      DO 1560 II=1,NMLIST
      I=II
      TSLIST(I)=0.00
c     tslist(i)=99.
1560  CONTINUE
C
C  INITIALIZE ARRAY FOR LINE OF PLOT
C
      DO 1570 II=1,NPLTSZ
      I=II
      W1(I)=BLANK1
1570  CONTINUE
C
C  CHECK IF LINE IS CURRENT DAY - TIME
C     IF YES ... FILL LINE WITH CURRENT TIME PLOTTING SYMBOL
C
      IF(CURTM.EQ.BLANK1) GO TO 1600
      IF(MAINUM.NE.1) GO TO 1600
      IF(LINEMO.NE.IMONOW) GO TO 1600
      IF(LINEDA.NE.IDANOW) GO TO 1600
      IF(LINEHR.EQ.IHRNOW) GO TO 1580
      L=LINEHR-IHRNOW
      LL=L
      IF(L.LT.0) LL=L*(-1)
      I=NCRMNT/2
      IF(LL.GT.I) GO TO 1600
      IF(LL.EQ.I .AND. L.LT.0) GO TO 1580
      IF(LL.EQ.I .AND. L.GT.0) GO TO 1600
C
1580  DO 1590 II=1,NPLTSZ
      I=II
      W1(I)=CURTM
1590  CONTINUE
1600  CONTINUE
C
C  PLACE ORDINATE PLOTTING SYMBOL ONTO PLOT
C
      DO 1610 II=1,NPLTSZ,10
      I=II
      W1(I)=ORDSYM
1610  CONTINUE
C
C  PLACE FLOOD FLOW, RATING UPPER LIMIT, AND MAX OF RECORD SYMBOLS
C     ONTO PLOT
C
      IF(IHYD.NE.1) GO TO 1650
      IF(NORC.NE.0) GO TO 1650
      IF(NPLTSZ.EQ.51) PLTMAX=5.0*SCALE+BASE
      IF(NPLTSZ.EQ.101) PLTMAX=10.0*SCALE+BASE
C
      IF(IBUG.EQ.1 .AND. LINE.EQ.1) WRITE(IODBUG,1620)
     1   IHYD,NPLTSZ,PLTMAX,SCALE,FLUDQ,RCFQ
1620  FORMAT(16X,4HIHYD,4X,6HNPLTSZ,4X,6HPLTMAX,
     1   5X,5HSCALE,5X,5HFLUDQ,6X,4HRCFQ,/,
     2   10X,2I10,4F10.2,/)
C
      IF(FLDSYM.EQ.BLANK1) GO TO 1630
      IF(FLUDQ.LT.0) GO TO 1630
      IF(PLTMAX.LT.FLUDQ) GO TO 1630
      N=(FLUDQ-BASE)*10.0/SCALE+1.0
      W1(N)=FLDSYM
C
1630  IF(RATLIM.EQ.BLANK1) GO TO 1640
C
C  DETERMINE RATING CURVE UPPER LIMIT OF FLOW
C
      IPT=LOCQ+NRCPTS-1
      RATUPL=XRC(IPT)
C
      IF(METRIC.EQ.0) RATUPL=(RATUPL*QCNVRT)+QADDC
      IF(PLTMAX.LT.RATUPL) GO TO 1640
      N=(RATUPL-BASE)*10.0/SCALE+1.0
      W1(N)=RATLIM
C
1640  IF(RCDMAX.EQ.BLANK1) GO TO 1650
      IF(RCFQ.LT.0) GO TO 1650
      IF(PLTMAX.LT.RCFQ) GO TO 1650
      N=(RCFQ-BASE)*10.0/SCALE+1.0
      W1(N)=RCDMAX
1650  CONTINUE
C
C  LOOP THRU THE TIME SERIES
C     FORWARD TO GET TIME SERIES TO LIST
C     BACKWARD TO GET TIME SERIES TO PLOT
C
      NL=0
      novrsn=po(1)
      pltime=po(7)
      DO 1710 II=1,NUMTS
      I=II-1
      iy=ii
      kk=ncalc+(i*12)+12
      if(novrsn.eq.2.and.i.gt.0) kk=ncalc+(i*18)+12
      tstime=pltime
      if(novrsn.eq.2) tstime=po(kk)
c     if(pltime.ne.tstime) goto 1710
c     if(pltime.ne.tstime) goto 1680
c     if(pltime.ne.tstime) goto 1655
      IF(NL.GE.NMLIST) then
         GOTO 1680
         endif
      K=NCALC+(I*12)+5
      if(novrsn.eq.2.and.i.gt.0) k=ncalc+(i*18)+5
      PLTOPT=PO(K)
      IF(PLTOPT.EQ.PLOT) GO TO 1680
      if(pltime.ne.tstime) goto 1710
C
C  PLTOPT .NE. PLOT THEREFORE .EQ. TLIST OR BOTH
C     GET CONVERSION FACTORS IF ENGLISH DESIRED
C
 1655 continue
c
      if(pltime.ne.tstime) goto 1710
      NL=NL+1
c     if(pltime.ne.tstime) goto 1680
      CONVRT=1.0
      ADDC=0.0
      DCF=1.0
      K=NCALC+(I*12)+3
      if(novrsn.eq.2.and.i.gt.0) k=ncalc+(i*18)+3
      UNITSM=PO(K)
      IF(UNITSM.EQ.TCUM) THEN
        DCF=86400./43560.
        IF(METRIC.EQ.1) DCF=86.4
      ENDIF
      IF(METRIC.EQ.1) GO TO 1660
      K=K+6
      CONVRT=PO(K)
      K=K+1
      ADDC=PO(K)
      K=K+1
      UNITSE=PO(K)
1660  CONTINUE
C
C  DETERMINE TIME SERIES ARRAY ELEMENT NUMBER AND
C     GET VALUE FROM TIME SERIES ARRAY, D1()
C     PLACE VALUE IN LISTING ARRAY, TSLIST()
C     IF TIME SERIES ARRAY ELEMENT NUMBER GREATER THAN
C        NUMBER IN TIME SERIES ... PLOT FINISHED
C
c     JBGN=LOCTS(I)
      jbgn=locts(iy)
      J=JBGN+IOBGN-1+(LINE*INCRTS)
      JEND=JBGN+NJEND+1
      IF(J.GT.JEND) GO TO 1720
      X=D1(J)
      L=IFMSNG(X)
c     IF(L.EQ.1) X=-0.00001
      if(l.eq.0) X=X*CONVRT*DCF+ADDC
c     X=X*CONVRT*DCF+ADDC
      TSLIST(NL)=X
C
      IF(IBUG.EQ.1 .AND. LINE.LT.11) WRITE(IODBUG,1670)
     1   LINE,NL,JBGN,J,X
1670  FORMAT(16X,4HLINE,8X,2HNL,6X,4HJBGN,9X,1HJ,9X,1HX,/,
     1   10X,4I10,F10.2,/)
C
C  WORK BACKWARDS PLOTTING TIME SERIES
C
1680  continue
c     NP=NUMTS+1-I
      npx=numts+1-i
      np=numts+1-ii
      IF(NP.LE.0) GO TO 1710
      kk=ncalc+((np-1)*12)+12
      if(novrsn.eq.2) kk=ncalc+((np-1)*18)+12
      tstime=pltime
      if(novrsn.eq.2) tstime=po(kk)
c     if(pltime.ne.tstime) goto 1710
      K=NCALC+((NP-1)*12)+5
      if(novrsn.eq.2) k=ncalc+((np-1)*18)+5
      PLTOPT=PO(K)
      if(pltime.ne.tstime) goto 1710
      IF(PLTOPT.EQ.TLIST) GO TO 1710
C
C  PLTOPT .NE. TLIST THEREFORE .EQ. PLOT OR BOTH
C     GET CONVERSION FACTORS IF ENGLISH DESIRED
C
      DCF=1.0
      K=NCALC+((NP-1)*12)+3
c     K=NCALC+((NP)*12)+3
      if(novrsn.eq.2) k=ncalc+((np-1)*18)+3
      UNITSM=PO(K)
      IF(UNITSM.EQ.TCUM) THEN
        DCF=86400./43560.
        IF(METRIC.EQ.1) DCF=86.4
      ENDIF

      PCNVRT=1.0
      PADDC=0.0

      IF(METRIC .EQ.1) GO TO 1690

C  commented out this line so that the pcnvrt values
C  would be set for each timeseries.
C     IF(ICFLAG.EQ.1) GO TO 1690

      K=NCALC+((NP-1)*12)+3
c     K=NCALC+((NP)*12)+3
      if(novrsn.eq.2) k=ncalc+((np-1)*18)+3
      UNITSM=PO(K)
      K=K+6
      PCNVRT=PO(K)
      K=K+1
      PADDC=PO(K)
      K=K+1
      UNITSE=PO(K)
      ICFLAG=1
1690  CONTINUE
C
C  DETERMINE TIME SERIES ARRAY ELEMENT NUMBER AND
C     GET VALUE FROM TIME SERIES ARRAY, D1()
C     PLACE SYMBOL ON PLOT ARRAY, W1()
C
      JBGN=LOCTS(NP)
c     jbgn=locts(npx)
      J=JBGN+IOBGN-1+(LINE*INCRTS)
      JEND=JBGN+NJEND+1
      IF(J.GT.JEND) GO TO 1720
      X=D1(J)
      L=IFMSNG(X)
      IF(L.EQ.1) GO TO 1710
      X=X*PCNVRT*DCF+PADDC
C
      N=(X-BASE)*10.0/SCALE+1.0
      K=NCALC+((NP-1)*12)+6
      if(novrsn.eq.2) k=ncalc+((np-1)*18)+6
      SYMBOL=PO(K)
C
      IF(N.LT.1) N=1
      W1(N)=SYMBOL
C
      IF(IBUG.EQ.1 .AND. LINE.LT.11) WRITE(IODBUG,1700)
     1   LINE,NP,JBGN,J,X,SYMBOL,N
1700  FORMAT(16X,4HLINE,8X,2HNP,6X,4HJBGN,9X,1HJ,9X,1HX,
     1   4X,6HSYMBOL,9X,1HN,/,
     2   10X,4I10,F10.2,9X,A1,I10,/)
C
1710  CONTINUE
C
      search=.true.
      do 1711 i=1,numts
         if(index(i).eq.-1) goto 1711
         if(index(i).eq.0) goto 1711
         search=.false.
 1711 continue
c
      if(search) goto 1725
c
      strcat1=' '
      strcat2=' '
c
      ibegin=1
      ibeg2=1
c
      ntrack=0
      do 1712 i=1,numts
         if(index(i).eq.0) then
            goto 1712
            endif
         if(index(i).eq.1) then
            goto 1712
            endif
         if(index(i).eq.-1) then
           if(ntrack+1.lt.4 .or.nmlist.lt.4) then
              if(ndeci(i).eq.0) then
                 iwhole=abs(tslist(ntrack+1))
                 whole=iwhole
                 remain=mod(abs(tslist(ntrack+1)),whole)
                 if(remain.ge.0.5) then
                    x=tslist(ntrack+1)
                    call uround('REAL4',x,1.0,'HIGH',temp,ierr)
                    tslist(ntrack+1)=temp
                    endif
                 endif
              call uff2a(tslist(ntrack+1),strcat1,ibegin,
     1                   relnum(i),ndeci(i),0,6,ierr)
              iold=ibegin
              ibegin=ibegin+relnum(i)
              if(ndeci(i).eq.0) then
                 do 7777 ishift=iold+1,ibegin-1
                    strcat1(ishift-1:ishift-1)=strcat1(ishift:ishift)
 7777            continue
                 strcat1(ibegin-1:ibegin-1)='.'
                 endif
              ntrack=ntrack+1
              goto 1712
              endif
           if(ntrack+1.gt.3.and.nmlist.gt.3.and.ntrack+1.le.nmlist) then
              if(ndeci(i).eq.0) then
                 iwhole=abs(tslist(ntrack+1))
                 whole=iwhole
                 remain=mod(abs(tslist(ntrack+1)),whole)
                 if(remain.ge.0.5) then
                    x=tslist(ntrack+1)
                    call uround('REAL4',x,1.0,'HIGH',temp,ierr)
                    tslist(ntrack+1)=temp
                    endif
                 endif
              call uff2a(tslist(ntrack+1),strcat2,ibeg2,
     1                   relnum(i),ndeci(i),0,6,ierr)
              iold2=ibeg2
              ibeg2=ibeg2+relnum(i)
              if(ndeci(i).eq.0) then
                 do 8888 ishift=iold2+1,ibeg2-1
                    strcat2(ishift-1:ishift-1)=strcat2(ishift:ishift)
 8888            continue
                 strcat2(ibeg2-1:ibeg2-1)='.'
                 endif
              ntrack=ntrack+1
              goto 1712
              endif
           endif
c
 1712 continue
c
      FRMT(13:36) = ' '
      FRMT(49:96) = ' '
c
c     if(nmlist.lt.4.and.npltsz.eq.51) FRMT(49:52) = '1X) '
      if(nmlist.lt.4) FRMT(49:52) = '1X) '
c
      FRMT(13:16) = 'A,  '
      if(nmlist.gt.3) then
         FRMT(49:52)  = 'A   '
         FRMT(97:100) = '1X) '
         comma=.false.
         do 4444 iii=53,96
            if ( FRMT(iii:iii) .eq. ',' ) comma=.true.
 4444    continue
         if (.not.comma) FRMT(49:52) = 'A,  '
         endif
c
c
      IF(NPUNCH.NE.1 .AND. NPLTSZ.EQ.101)
     1   WRITE(IPR,FRMT,ERR=9998) LINEDA,LINEHR,
     2   (strcat1(1:ibegin-1)),(W1(L),L=1,NPLTSZ)
c
      IF(NPUNCH.NE.1 .AND. NPLTSZ.EQ.51 .AND. NMLIST.LT.4)
     1   WRITE(IPR,FRMT,ERR=9998) LINEDA,LINEHR,
     2   (strcat1(1:ibegin-1)),(W1(L),L=1,NPLTSZ)
c
      FRMT(1:4) = '(   '
      IF(NPUNCH.GT.0 .AND. NPLTSZ.EQ.51)
     1   WRITE(IPU,FRMT,ERR=9998) LINEDA,LINEHR,
     2   (strcat1(1:ibegin-1)),(W1(L),L=1,NPLTSZ)
      FRMT(1:4) = '(1X,'
C
c

      IF(NPUNCH.NE.1 .AND. NPLTSZ.EQ.51 .AND. NMLIST.GT.3)
     1   WRITE(IPR,FRMT,ERR=9998) LINEDA,LINEHR,
     2   (strcat1(1:ibegin-1)),(W1(L),L=1,NPLTSZ),
     3   (strcat2(1:ibeg2-1))
c
      goto 5555
C  WRITE ONE LINE OF PLOT TO OUTPUT
C
 1725    IF(NPUNCH.NE.1 .AND. NPLTSZ.EQ.101)
     1   WRITE(IPR,FRMT,ERR=9998) LINEDA,LINEHR,
     2   (TSLIST(I),I=1,NMLIST),(W1(L),L=1,NPLTSZ)
C
      IF(NPUNCH.NE.1 .AND. NPLTSZ.EQ.51 .AND. NMLIST.LT.4)
     1   WRITE(IPR,FRMT,ERR=9998) LINEDA,LINEHR,
     2   (TSLIST(I),I=1,NMLIST),(W1(L),L=1,NPLTSZ)
C
      FRMT(1:4) = '(   '
      IF(NPUNCH.GT.0 .AND. NPLTSZ.EQ.51)
     1   WRITE(IPU,FRMT,ERR=9998) LINEDA,LINEHR,
     2   (TSLIST(I),I=1,NMLIST),(W1(L),L=1,NPLTSZ)
      FRMT(1:4) = '(1X,'
C
      IF(NPUNCH.NE.1 .AND. NPLTSZ.EQ.51 .AND. NMLIST.GT.3)
     1   WRITE(IPR,FRMT,ERR=9998) LINEDA,LINEHR,
     2   (TSLIST(I),I=1,3),(W1(L),L=1,NPLTSZ),
     3   (TSLIST(J),J=4,NMLIST)
C
      GO TO 5555
C
9998  WRITE (IPR,9997) FRMT
9997  FORMAT ('0**WARNING** IN EX25 - THE FOLLOWING IS AN INVALID ',
     *   'FORMAT: ' /
     *   13X,A)
      CALL WARN
      GO TO 1760
C
C  TEST FOR END OF PLOT
c
 5555 continue
c
      IF(LINEYR.NE.IYREND) GO TO 1520
      IF(LINEMO.NE.IMOEND) GO TO 1520
      IF(LINEDA.NE.IDAEND) GO TO 1520
      IF(LINEHR.NE.IHREND) GO TO 1520
C
C
1720  CONTINUE
c
      if (nl.gt.0) goto 1760
      write(ipr,1730)
 1730 format(1H0,'*************************************************')
      do 1750 jj=1,3
         write(ipr,1740)
 1750 continue
 1740 format('***NOTE**** THERE IS NO TIME SERIES TO BE LISTED')
      write(ipr,1730)
 1760 continue
      RETURN
      END
