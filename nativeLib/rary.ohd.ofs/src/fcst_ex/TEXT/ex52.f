C MEMBER EX52
C-----------------------------------------------------------------------
C
C@PROCESS LVL(77)
C
      SUBROUTINE EX52 (P, C, OUTB, OUTE, LOCD, D)             
C
C     ALL EXECUTION ROUTINES BY CONVENTION MUST BE NAMED FCEX**
C     WHERE ** IS THE NUMBER ASSIGNED TO THE OPERATION 

C     THIS IS THE EXECUTION ROUTINE FOR SSARR SUMMING POINT OPERATION

C     THIS ROUTINE INITIALLY WRITTEN BY
C          RAY FUKUNAGA -- NWRFC   JUNE 1995

      REAL * 4  P(*),C(*),CTEMP(750),OUTB(*),OUTE(*),D(*)
      REAL*4       PREAL1,PREAL2
      CHARACTER*4  PCHAR1,PCHAR2
      EQUIVALENCE (PREAL1,PCHAR1),(PREAL2,PCHAR2)
      DIMENSION LOCD(*)

C     COMMON BLOCKS
C 
C     DEBUG COMMON
C        IODBUG - UNIT NUMBER TO WRITE OUT ALL DEBUG OUTPUT
      COMMON /FDBUG/IODBUG,ITRACE,IDBALL,NDEBUG,IDEBUG(20)

C     UNIT NUMBERS COMMON
C     ALWAYS USE THE VARIABLES IN IONUM TO SPECIFY UNIT NUMBER
      COMMON /IONUM/IN,IPR,IPU

C     TIMING INFORMATION COMMON
      COMMON /FCTIME/IDARUN,IHRRUN,LDARUN,LHRRUN,LDACPD,LHRCPD,NOW(5),
     +               LOCAL,NOUTZ,NOUTDS,NLSTZ,IDA,IHR,LDA,LHR,IDADAT
C     IDARUN - I* 4 - INITIAL JULIAN DAY OF THE ENTIRE RUN
C     IHRRUN - I* 4 - INITIAL HOUR OF THE ENTIRE RUN
C     LDARUN - I* 4 - JULIAN DAY OF LAST DAY OF THE ENTIRE RUN
C     LHRRUN - I* 4 - LAST HOUR OF ENTIRE RUN
C     LDACPD - I* 4 - JULIAN DAY OF LAST DAY WITH OBSERVED DATA
C     LHRCPD - I* 4 - LAST HOUR WITH OBSERVED DATA
C     NOW    - I* 4 - CURRENT TIME FROM THE COMPUTER'S CLOCK
C                     NOW(1) - MONTH
C                     NOW(2) - DAY
C                     NOW(3) - YEAR (4 DIGIT)
C     LOCAL  - I* 4 - HOUR OFFSET TO LOCAL TIME
C     NOUTZ  - I* 4 - DEFAULT TIME ZONE NUMBER FOR OUTPUT
C     NOUTDS - I* 4 - DEFAULT DAYLIGHT SAVING TIME SWITCH FOR OUTPUT
C                     =0, STANDARD TIME
C                     =1, DAYLIGHT SAVING TIME
C     NLSTZ  - I* 4 - TIME ZONE NUMBER OF LOCAL STANDARD TIME
C     IDA    - I* 4 - JULIAN DATE OF THE FIRST DAY TO BE COMPUTED
C     IHR    - I* 4 - FIRST HOUR TO BE COMPUTED IN THE CURRENT PASS
C     LDA    - I* 4 - JULIAN DATE OF THE LAST DAY TO BE COMPUTED
C     LHR    - I* 4 - LAST HOUR TO BE COMPUTED IN THE CURRENT PASS
C     IDADAT - I* 4 - JULIAN DATE OF THE FIRST DAY OF TIME SERIES DATA 

C     CONTROL INFORMATION FOR SAVING CARRYOVER
      COMMON /FCARY/IFILLC,NCSTOR,ICDAY(20),ICHOUR(20)
C
C    ================================= RCS keyword statements ==========
      CHARACTER*68     RCSKW1,RCSKW2
      DATA             RCSKW1,RCSKW2 /                                 '
     .$Source: /fs/hseb/ob72/rfc/ofs/src/fcst_ex/RCS/ex52.f,v $
     . $',                                                             '
     .$Id: ex52.f,v 1.1 1996/03/21 13:37:21 page Exp $
     . $' /
C    ===================================================================
C
C     IFILLC - I* 4 - CONTROLS UPDATE OF C ARRAY AND STORING CARRYOVER
C                     =0, NO OPERATION CAN MODIFY THE C ARRAY; NO
C                         CARRYOVER STORED
C                     =1, C ARRAY SHOULD BE MODIFIED   
C     NCSTOR - I* 4 - NUMBER OF CARRYOVER DATES SAVED TO BE SAVED     
C                     IGNORED IF IFILLC=0
C     ICDAY  - I* 4 - JULIAN DAYS TO STORE CARRYOVER
C     ICHOUR - I* 4 - HOURS TO STORE CARRYOVER

C     POSITION     CONTENTS OF P ARRAY
C      1           VERSION NUMBER OF OPERATION
C      2-19        DESCRIPTION - TITLE
C     20           # OF INPUT TIME SERIES TO SUM

C     21-22        BEGIN INTERVAL OUTPUT TIME SERIES IDENTIFIER
C     23           BEGIN INTERVAL OUTPUT TIME SERIES DATA TYPE CODE
C     24           BEGIN INTERVAL OUTPUT TIME SERIES TIME INTEVAL
C
C     25-26        END INTERVAL OUTPUT TIME SERIES IDENTIFIER
C     27           END INTERVAL OUTPUT TIME SERIES DATA TYPE CODE
C     28           END INTERVAL OUTPUT TIME SERIES TIME INTERVAL

C     FOR EACH INPUT TIME SERIES TO BE SUMMED
C     29-30        INPUT TIME SERIES IDENTIFIER
C     31           INPUT TIME SERIES DATA TYPE CODE
C     32           INPUT TIME SERIES TIME INTERVAL
C     33           CARRYOVER FLAG
C                  = 'CARY', FROM CARRYOVER ARRAY
C                  = 'FLAT', SET EQUAL TO SECOND ELEMENT
C                  = '    ', SET EQUAL TO ZERO
C                  = 'VALU', READ IN FROM INPUT

C     THEREFORE THE NUMBER OF ELEMENTS REQUIRED IN THE P ARRAY IS
C        28 +
C         5 * NUMBER OF INPUT TIME SERIES TO BE SUMMED

C     POSITION     CONTENTS OF C ARRAY
C      1+      INITIAL BEGIN INCREMENT INFLOW FOR EACH INPUT TIME SERIES
C              IF INPUT TIME SERIES IS AN END INCREMENT TIME SERIES,
C                  VALUE SET TO ZERO
C              ELSE, IF INPUT TS IS A BEGIN INCREMENT TIME SERIES,
C                  VALUE IS SET DEPENDING ON THE CARRYOVER FLAG


C     CHECK THE TRACE LEVEL AND WHETHER DEBUG OUTPUT IS NEEDED
      CALL FPRBUG ('EX52    ',1,52,IBUG)

C   SET LENGTH OF CTEMP ARRAY TO 750
      LCTEMP = 750

C     GET NUMBER OF INPUT TIME SERIES FROM P ARRAY
      NTS = INT(P(20))
      IF (IBUG.EQ.1) WRITE(IODBUG,1001) NTS
 1001 FORMAT('EX52: NTS: ',I4)

C     GET TIME INTERVAL FROM OUTPUT TIME SERIES
      IDT = INT(P(24))

C     COMPUTE THE TOTAL NUMBER OF PERIODS
      NPD = (LDA-IDA)*24/IDT+(LHR-IHR)/IDT+1
      IF (IBUG.EQ.1) WRITE(IODBUG,1002) LDA,IDA,LHR,IHR,IDT,NPD
 1002 FORMAT('EX52: LDA (DATE OF LAST  DAY TO BE COMPUTED): ',I7,/,
     +       'EX52: IDA (DATE OF FIRST DAY TO BE COMPUTED): ',I7,/,
     +       'EX52: LHR (LAST  HOUR TO BE COMPUTED       ): ',I7,/,
     +       'EX52: IHR (FIRST HOUR TO BE COMPUTED       ): ',I7,/,
     +       'EX52: IDT (TIME INTERVAL                   ): ',I7,/,
     +       'EX52: NPD (NUMBER OF COMPUTE PERIODS       ): ',I7)

C     INITIALIZE OUTB AND OUTE FOR NPD PERIODS
      DO 200 I=1,NPD
         OUTB(I) = 0.
         OUTE(I) = 0.
 200  CONTINUE

C     FIND STARTING LOCATION OF COMPUTED VALUE
      ILOC=(IDA-IDADAT)*24/IDT+(IHR-1)/IDT    
      ILOCS=ILOC+1
      KLOCS=ILOCS
      IF (IBUG.EQ.1) WRITE(IODBUG,1003) ILOCS,IDADAT
 1003 FORMAT('EX52: ILOCS  (START LOCATION OF COMPUTED VAL ): ',I7,/,
     +       'EX52: IDADAT (JULIAN DATE OF FIRST DAY OF TS ): ',I7)  

      IF (IBUG.EQ.1) THEN
         DO 100 I=1,NTS
            J=LOCD(I)
            KK=NPD+J-1
            WRITE(IODBUG,1004) I,LOCD(I)
 1004       FORMAT('EX52: VALUES OF INPUT TIME SERIES NUMBER: ',I4,/,
     +             'EX52: BEGIN LOCATION IN ARRAY D: ',I4)
            WRITE(IODBUG,1005) (D(IK),IK=J,KK)
 1005       FORMAT('EX52: ',10F10.2)
 100     CONTINUE
      ENDIF 

C
C   CHECK THAT # OF CARRYOVER VALUES IS NOT GREATER THAN CTEMP ARRAY
      IF (NTS .GT. LCTEMP) THEN
         WRITE(IPR, 1016 ) LCTEMP, NTS
 1016 FORMAT('0**ERROR** IN EX52 - SIZE OF ARRAY ',
     1       'CTEMP (',I4,') IS SMALLER THAN ',
     2       'NTS (',I4,')')
         GO TO 992
      ENDIF
C
      DO 105 IS = 1,NTS
 105  CTEMP(IS) = C(IS)

      ICARY = 1
      KDA = IDA
      KHR = IHR

C     SUM END TIME SERIES ONLY INTO OUTE

      DO 110 L=1,NPD

         DO 120 K=1,NTS
            I1=LOCD(K)+ILOC

C           IF END TIME SERIES ONLY
C           CHECK FOR MISSING VALUES
            PREAL1 = P(5*K+26)
            IF (PCHAR1 .NE. 'SQIB') THEN

               IM = IFMSNG(D(I1))     
               IF (IBUG.GE.1) WRITE(IODBUG,1100) L,K,ILOCS,I1,D(I1)
 1100          FORMAT('EX52: L,K,ILOCS,I1,D: ',4I5,F10.2)
               IF (IM.EQ.0) THEN
                  OUTE(ILOCS) = OUTE(ILOCS) + D(I1)
               ELSE 
                  OUTE(ILOCS) = -999.
                  GO TO 115
               ENDIF

            ENDIF

 120     CONTINUE

 115     IF (IFILLC.EQ.1 .AND. L.NE.1) THEN

            IF (IBUG.EQ.1) WRITE(IODBUG,1116)
     +                     KDA,KHR,ICARY,ICDAY(ICARY),ICHOUR(ICARY)
 1116       FORMAT('EX52: KDA,KHR,ICARY,ICDAY(ICARY),ICHOUR(ICARY):',
     +                      7I5)
            IF (KDA.EQ.ICDAY(ICARY) .AND. KHR.EQ.ICHOUR(ICARY)) THEN
               DO 117 IC = 1,NTS
                  PREAL1 = P(5*IC+26)
                  IF (PCHAR1 .EQ. 'SQIB') THEN
                     I1 = LOCD(IC) + ILOC
                  ELSE
                     I1 = LOCD(IC) + ILOC -1
                  ENDIF
                  IF (IBUG.EQ.1) WRITE(IODBUG,1117)
     +                           IC,LOCD(IC),ILOC,D(I1)
 1117             FORMAT('EX52: IC,LOCD,ILOC,D: ',3I4,F10.2)
                  CTEMP(IC) = D(I1)
 117           CONTINUE

               CALL FCWTCO (KDA,KHR,CTEMP,NTS)
               ICARY = ICARY + 1
            ENDIF

         ENDIF

         ILOC = ILOC + 1 
         ILOCS = ILOC + 1

         KHR = KHR + IDT
         IF (KHR.GT.24) THEN
            KDA = KDA + 1
            KHR = KHR - 24
         ENDIF

 110  CONTINUE

C     COPY OUTE TO OUTB WHERE OUTB(2) = OUTE(1)
      DO 500 IC=KLOCS,KLOCS+NPD-2
 500  OUTB(IC+1) = OUTE(IC)

C     SET OUTB(KLOCS) ACCORDING TO CARRYOVER FLAG
      DO 300 J=1,NTS

        PREAL1 = P(J*5+26)
        IF (PCHAR1 .EQ. 'SQIB') THEN
           OUTB(KLOCS) = OUTB(KLOCS) + D(LOCD(J)+KLOCS-1)
           IF (IBUG.GE.1) WRITE(IODBUG,3001) J,KLOCS,D(LOCD(J)+KLOCS-1)
 3001      FORMAT('EX52: OUTB(KLOCS) SUM: J,KLOCS,VALUE:',2I4,F10.2)
        ELSEIF (PCHAR1 .NE. 'SQIE') THEN
           PREAL2 = P(J*5+28)
           IF (PCHAR2.EQ.'CARY' .OR. PCHAR2.EQ.'VALU') THEN
              OUTB(KLOCS) = OUTB(KLOCS) + C(J)  
              IF (IBUG.GE.1) WRITE(IODBUG,3001) J,KLOCS,C(J) 
           ELSEIF (PCHAR2 .EQ. 'FLAT') THEN
              OUTB(KLOCS) = OUTB(KLOCS) + D(LOCD(J)+KLOCS-1)
            IF (IBUG.GE.0) WRITE(IODBUG,3001) J,KLOCS,D(LOCD(J)+KLOCS-1)
           ENDIF
        ENDIF
 
 300  CONTINUE        

      IF (IBUG.EQ.1) THEN
         WRITE(IODBUG,1006)  
 1006    FORMAT('EX52: END & BEGIN INTERVAL OUTPUT TIME SERIES')
         WRITE(IODBUG,1007) (I,OUTE(I),OUTB(I),I=KLOCS,KLOCS+NPD-1)
 1007    FORMAT('EX52: ',I4,2F10.2)
      ENDIF

      PREAL1 = P(23)
      IF (PCHAR1 .EQ. 'NONE') THEN
         DO 9000 IK=KLOCS,KLOCS+NPD-1
 9000    OUTE(IK) = (OUTE(IK)+OUTB(IK))*P(24)*3600./2.
      ENDIF

 992  IF (ITRACE.GE.1) WRITE(IODBUG,991) 
 991  FORMAT (//,'EX52: EXITED:')  

      RETURN
      END
