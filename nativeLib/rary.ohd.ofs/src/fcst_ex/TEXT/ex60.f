C MODULE EX60
C-----------------------------------------------------------------------
C
C
C
      SUBROUTINE EX60 (P,ODEPTH,PDEPTH,ASTID1,ASTID2,ASTID3,
     +                        ASTID4,DWTIDA)

C     THIS IS THE EXECUTION ROUTINE TO EFFECT CHANGES TO
C     TIDE TIME SERIES BASED ON USER INPUT (USED FOR INPUT TO DWOPER)

C     THIS ROUTINE INITIALLY WRITTEN BY
C        JOANNE R. SALERNO - NWRFC   OCT 1997

C        1         2         3         4         5         6         7
C23456789012345678901234567890123456789012345678901234567890123456789012

C     POSITION     CONTENTS OF P ARRAY
C        1         VERSION NUMBER OF OPERATION
C        2-19      GENERAL NAME OR TITLE
C       20-22      DW OBSERVED ASTORIA STAGE (TIDE)
C       23-25      NOS         ASTORIA STAGE (STID)
C       26-28      OBS/FX  MAX/MIN BALANCE ASTID1  (TIDB)
C       29-31      OBS/FX  MAX/MIN BALANCE ASTID2  (TIDB)
C       32-34      OBS/FX  MAX/MIN BALANCE ASTID3  (TIDB)
C       35-37      OBS/FX  MAX/MIN BALANCE ASTID4  (TIDB)
C       38-40      DW ADJUSTED STAGE (TIDE)


C     THE NUMBER OF ELEMENTS REQUIRED IN THE P ARRAY IS  40

C     POSITION     CONTENTS OF C ARRAY

C     THE NUMBER OF ELEMENTS REQUIRED IN THE C ARRAY IS   0

C        1         2         3         4         5         6         7
C23456789012345678901234567890123456789012345678901234567890123456789012

C       FLOW CHART FOR DWOPER ASTORIA ADJUSTMENT


C       1.      READ IN TIME SERIES

C                       DW OBS ASTORIA STAGE    (TIDE) -- ODEPTH
C                       NOS    ASTORIA STAGE    (STID) -- PDEPTH
C                       ASTORIA TIDE1 BALANCES (TIDB)- ASTID1
C                          "    TIDE2 BALANCES (TIDB)- ASTID2
C                          "    TIDE3 BALANCES (TIDB)- ASTID3
C                          "    TIDE4 BALANCES (TIDB)- ASTID4

C       2.      IDENTIFY FIRST AND LAST HOURLY TIME SERIES
C               IDENTIFY LAST OBSERVED  HOURLY TIME SERIES
C                ITS            LOTS              LTS
C                  |______________|________________|
C                STARTRUN       T=0              ENDRUN

C       2a      IDENTIFY FIRST AND LAST DAILY TIME SERIES
C               ITSDLY                          LTSDLY
C                  |______________|________________|
C               STARTRUN        T=0              ENDRUN
C                  THE ABOVE IS USED WHEN DEALING WITH BALANCES

C       3.      FIND OBSERVED MAX AND MIN
C                       -ROUND OBSERVED DEPTHS TO NEAREST TENTH OF A FOOT
C                       -IDENTIFY OBSERVED MAX AND MIN

C       4.      MATCH OBSERVED MAX/MIN TO PREDICTED

C       5.      CALCULATE MAX/MIN BALANCES
C                       OBSERVED - PREDICTED

C       6.      BASED ON ADJUSTED MAX/MIN BALANCES FILL HOURLY TIME STEPS

C       7.      APPLY HOURLY BALANCES TO NOS TIDE VALUES.. WRITE TO DATABASE

C        1         2         3         4         5         6         7
C23456789012345678901234567890123456789012345678901234567890123456789012

C     VARIABLE DEFINITIONS

C     ODEPTH(*)   - DW OBSERVED STAGE TIME SERIES       INPUT
C     PDEPTH(*)   - NOS         STAGE TIME SERIES       INPUT
C     OTS(*)      - TIME MARKER                         CALC INPUT
C       JHR(*)    -       TIDE HOUR
C       JDAY(*)   -       TIDE DAY
C       JMONTH(*) -       TIDE MONTH
C     ODM(*)      - HEIGHT MAX/MIN OBS                  OUTPUT
C     PDM(*)      - HEIGHT MAX/MIN PREDICTED            OUTPUT
C     OTM(*)      - TIME   MAX/MIN MARKER               OUTPUT
C     K1          - BEGIN TIME OF MAXMIN                INPUT
C     K2          - END   TIME OF MAXMIN                INPUT
C     KM          - # OF MAX/MIN POINTS                 OUTPUT
C     BAL(*)      - (OBSERVED - PREDICTED); ODM-PDM
C     DWTIDA(*)   - ADJUSTED ASTORIA STAGE              OUTPUT
C     ASTID1,2,3,4(*) - OBS/FX  MAX/MIN BALANCES TIDE1,2,3,4  OUTPUT

      DIMENSION P(*),ODEPTH(*),PDEPTH(*),ASTID1(*),ASTID2(*),ASTID3(*),
     +          ASTID4(*),DWTIDA(*)
      DIMENSION JHR(1200),JDAY(1200),JMONTH(1200),OTS(1200),BAL(1200),
     +         PDM(1200),PPDM(1200),PTM(1200),OTM(1200),ODM(1200)

      DATA E/1hE/,PI/3.1416/


C        1         2         3         4         5         6         7
C23456789012345678901234567890123456789012345678901234567890123456789012

C     COMMON BLOCKS

C     DEBUG COMMON
C        IODBUG - UNIT NUMBER TO WRITE OUT ALL DEBUG OUTPUT
C     UNIT NUMBERS COMMON
C     ALWAYS USE THE VARIABLES IN IONUM TO SPECIFY UNIT NUMBER

      INCLUDE 'common/ionum'
      INCLUDE 'common/fdbug'
      INCLUDE 'common/fctime'
      INCLUDE 'common/fcary'
C
C    ================================= RCS keyword statements ==========
      CHARACTER*68     RCSKW1,RCSKW2
      DATA             RCSKW1,RCSKW2 /                                 '
     .$Source: /fs/hseb/ob81/ohd/ofs/src/fcst_ex/RCS/ex60.f,v $
     . $',                                                             '
     .$Id: ex60.f,v 1.5 2007/01/05 15:53:17 xfan Exp $
     . $' /
C    ===================================================================
C



C     IDARUN - I* 4 - INITIAL JULIAN DAY OF THE ENTIRE RUN
C     IHRRUN - I* 4 - INITIAL HOUR OF THE ENTIRE RUN
C     LDARUN - I* 4 - JULIAN DAY OF LAST DAY OF THE ENTIRE RUN
C     LHRRUN - I* 4 - LAST HOUR OF ENTIRE RUN
C     LDACPD - I* 4 - JULIAN DAY OF LAST DAY WITH OBSERVED DATA
C     LHRCPD - I* 4 - LAST HOUR WITH OBSERVED DATA
C     NOW    - I* 4 - CURRENT TIME FROM THE COMPUTER'S CLOCK
C                     NOW(1) - MONTH
C                     NOW(2) - DAY
C                     NOW(3) - YEAR (4 DIGIT)
C     LOCAL  - I* 4 - HOUR OFFSET TO LOCAL TIME
C     NOUTZ  - I* 4 - DEFAULT TIME ZONE NUMBER FOR OUTPUT
C     NOUTDS - I* 4 - DEFAULT DAYLIGHT SAVING TIME SWITCH FOR OUTPUT
C                     =0, STANDARD TIME
C                     =1, DAYLIGHT SAVING TIME
C     NLSTZ  - I* 4 - TIME ZONE NUMBER OF LOCAL STANDARD TIME
C     IDA    - I* 4 - JULIAN DATE OF THE FIRST DAY TO BE COMPUTED
C     IHR    - I* 4 - FIRST HOUR TO BE COMPUTED IN THE CURRENT PASS
C     LDA    - I* 4 - JULIAN DATE OF THE LAST DAY TO BE COMPUTED
C     LHR    - I* 4 - LAST HOUR TO BE COMPUTED IN THE CURRENT PASS
C     IDADAT - I* 4 - JULIAN DATE OF THE FIRST DAY OF TIME SERIES DATA

C     CONTROL INFORMATION FOR SAVING CARRYOVER

C     IFILLC - I* 4 - CONTROLS UPDATE OF C ARRAY AND STORING CARRYOVER
C                     =0, NO OPERATION CAN MODIFY THE C ARRAY; NO
C                         CARRYOVER STORED
C                     =1, C ARRAY SHOULD BE MODIFIED
C     NCSTOR - I* 4 - NUMBER OF CARRYOVER DATES SAVED TO BE SAVED
C                     IGNORED IF IFILLC=0
C     ICDAY  - I* 4 - JULIAN DAYS TO STORE CARRYOVER
C     ICHOUR - I* 4 - HOURS TO STORE CARRYOVER

C     CHECK THE TRACE LEVEL AND WHETHER DEBUG OUTPUT IS NEEDED
      CALL FPRBUG ('EX60    ',1,60,IBUG)

C        1         2         3         4         5         6         7
C23456789012345678901234567890123456789012345678901234567890123456789012

C  --- LOCATE FIRST DATA VALUE IN THE 'HOURLY' TIME SERIES DATA ARRAYS
C
      KDA = IDA
      KHR = IHR
      ITS = (KDA-IDADAT) * 24 + KHR
      IBUG = 0

C  --- LOCATE FIRST DATA VALUE IN THE 'DAILY' TIME SERIES DATA ARRAYS
C         USED WHEN ADDRESSING DAILY BALANCES
C
      ITSDLY = (KDA-IDADAT) + KHR / 24
      IF (IBUG.EQ.1) WRITE(IODBUG,1001) ITSDLY,ITS
 1001 FORMAT(' EX60: ITSDLY,ITS: ',2I6)

C  DEBUG OUTPUT FOR FIRST DATA VALUE LOCATION

      IF (IBUG.EQ.1) WRITE(IODBUG,1002) KDA,KHR,IDADAT,ITS
 1002 FORMAT(' EX60: KDA,KHR,IDADAT,ITS: ',4I6)

C  --- LOCATE LAST DATA VALUE IN THE 'HOURLY' TIME SERIES DATA ARRAYS
C
      LTS = (LDA-(IDADAT-1)) * 24 + KHR - 1

C  --- LOCATE LAST DATA VALUE IN THE 'DAILY' TIME SERIES DATA ARRAYS
C         USED WHEN ADDRESSING DAILY BALANCES
C
      LTSDLY = (LDA-(IDADAT-1)) + KHR / 24

C  --- LOCATE LATEST OBS  VALUE IN 'HOURLY' TIME SERIES DATA
C
      LOTS = (LDACPD-IDADAT) * 24 + LHR

C  DEBUG OUTPUT FOR LAST DATA VALUE LOCATION

      IF (IBUG.EQ.1) WRITE(IODBUG,1003) LDA,LTS
 1003 FORMAT(' EX60: LDA,LTS: ',2I6)

C
C  --- DETERMINE HR, DAY, MONTH AND TIME MARKER FOR TIME SERIES
C
      DO 100 I=ITS,LTS
        OTS(I)=I
        CALL MDYH1(KDA,KHR,ILM,ILD,ILY,ILH,NOUTZ,NOUTDS,NTZCD)
        KHR=KHR+1
        IF (KHR.GT.24) THEN
          KHR=1
          KDA=KDA+1
        ENDIF
        JHR(I)=ILH
        JMONTH(I)=ILM
        JDAY(I)=ILD
      IF (IBUG.EQ.1) WRITE(IODBUG,1005) ILH,ILM,ILD,ITS,LOTS,LTS,I
 1005 FORMAT(' EX60: ILH,ILM,ILD,ITS,LOTS,LTS,I: ',7I6)
  100 CONTINUE
C        1         2         3         4         5         6         7
C
C
C  ---  FIND MAX AND MIN OF OBSERVED DATA
C
C       ROUND OBS HEIGHTS TO NEAREST TENTH OF A FOOT
C       SO TIDAL HIGH AND LOW SEARCH ROUTINE DOES NOT WORK WITH
C       HUNDREDTHS OF FEET
C
C              ODEPTH   = HEIGHT       (TID)                  INPUT
C              OTS      = TIME MARKER  AST                    CALC INPUT
C                JHR    = TIDE HOUR
C                JDAY   = TIDE DAY
C                JMONTH = TIDE MONTH
C              ODM      = HEIGHT OBS/FX         MAX OR MIN    OUTPUT
C              PDM      = HEIGHT PREDICTED(NOS) MAX OR MIN    OUTPUT
C              OTM      = TIME MARKER           MAX OR MIN    OUTPUT
C              K1       = BEGIN TIME OF MAXMIN                INPUT
C              K2       = END   TIME OF MAXMIN                INPUT
C              KM       = # OF MAX/MIN POINTS                 OUTPUT
C              BAL      = MAX/MIN BALANCES
C                           (ODM - PDM)
C
      K1=ITS
      K2=LOTS
      K3=LTS
      CALL MXMN59(ODEPTH,OTS,ODM,OTM,K1,K2,KM)
      CALL MXMN59(PDEPTH,OTS,PPDM,PTM,K1,K3,KPM)
      KPM=KPM+1
      PTM(KPM)=LTS
      PPDM(KPM)=PDEPTH(LTS)

C
C  ---   MATCH PREDICTED TIDE TO OBSERVED TIDE AT OBSERVED MAX/MIN
C
C  ---   COMPUTE BALANCES
C
C
      DO 200 I=1,KM
        PDM(I)=PDEPTH(INT(OTM(I)))
        IF(IBUG.EQ.1) WRITE(IODBUG,205) I,KM,PDM(I),OTM(I)
  205 FORMAT (' EX60: I,KM,PDM,OTM',2I4,F4.1,F4.1)
  200 CONTINUE

C************************************************************
C             READ USER INPUT  --- MOD (TSCHNGES)
C
C
C             READ IN BALANCES FROM DATABASE AND CREATE TIME SERIES
C
         IK=1
         ID=ITSDLY
      DO 510 I=ITS,LTS-1,24
         BAL(IK)=ASTID1(ID)
         BAL(IK+1)=ASTID2(ID)
         BAL(IK+2)=ASTID3(ID)
         BAL(IK+3)=ASTID4(ID)
         IF(IBUG.EQ.1) WRITE(IODBUG,505) IK,ID,BAL(IK),ASTID1(ID),
     +                 BAL(IK+1),ASTID2(ID),BAL(IK+2),ASTID3(ID),
     +                 BAL(IK+3),ASTID4(ID)
  505 FORMAT (/,'EX60: IK ID BAL ASTID1 BAL+1 ASTID2 BAL+2 ASTID3 BAL+3
     ? ASTID4',/
     ? I2,1X,I4,1X,F5.2,F5.2,4X,F5.2,F5.2,4X,F5.2,F5.2,4X,F5.2,F5.2)
         IK=IK+4
         ID=ID+1
  510 CONTINUE

  530 DO 540 I=1,KM-1
        ODM(I)=PDM(I)+BAL(I)
        IF(IBUG.EQ.1) WRITE(IODBG,535) I,KM,ODM(I),PDM(I),BAL(I),
     ?                OTM(I),JHR(INT(OTM(I))),JMONTH(INT(OTM(I))),
     ?                JDAY(INT(OTM(I)))
  535 FORMAT('EX60: I,KM,ODM,PDM,BAL,OTM,JHR,JMONTH,JDAY:',
     ?       2I5,4F7.1,I5,'00',I5,'/',I2)
  540 CONTINUE

      DO 550 I=KM,KPM
        ODM(I)=PPDM(I)+BAL(I)
        OTM(I)=PTM(I)
        IF(IBUG.EQ.1) WRITE(IODBUG,545) I,KM,KPM,ODM(I),PPDM(I),
     ?               BAL(I),OTM(I),JHR(INT(OTM(I))),
     ?               JMONTH(INT(OTM(I))),JDAY(INT(OTM(I)))
  545 FORMAT('EX60: I,KM,KPM,ODM,PPDM,BAL,OTM,JHR,JMONTH,JDAY:',
     ?       3I5,4F7.1,I5,'00',I5,'/',I2)
  550 CONTINUE
C
C      **********
C       FILL PAST OBS VALUES TO OUTPUT TIME SERIES
C      **********

      DO 700 I=ITS,LOTS
        DWTIDA(I)=ODEPTH(I)
        IF(IBUG.EQ.1) WRITE(IODBUG,705) ITS,LOTS,I,DWTIDA(I),ODEPTH(I)
  705 FORMAT (' EX60: ITS,LOTS,I,DWTIDA,ODEPTH',3I4,2F4.1)
  700 CONTINUE
C
C      **********
C       USE COS INTERPOLATION TO GET HOURLY TIDE VALUES
C       TIDE= HOURLY TIME OF INTERPOLATED TIDE
C       THETA= "ANGLE" IN RADIANS (SO COSINE FUNTION WORKS)
C       HRVALS= DEPTH OF INTREPOLATED TIDE AT TIME "TIDE"
C      **********
C

      I=KM
      IF(LOTS.LE.OTM(I+1)) THEN
       IHOUR=LOTS
       DO 800 I=KM,KPM-1

        TIDE=REAL(JHR(INT(OTM(I))))
        IF(IBUG.EQ.1) WRITE(IODBUG,610) KM,KPM,TIDE
  610   FORMAT('EX60: KM,KPM,TIDE', 8X,I2,1X,I2,3X,F4.1)

        DELTAT=REAL(JHR(INT(OTM(I+1)))-JHR(INT(OTM(I))))
        IF(DELTAT.LT.0) DELTAT=DELTAT+24.
        IF(LOTS.GT.OTM(I).AND.LOTS.LT.OTM(I+1)) THEN
           DELTAT=OTM(I+1)-LOTS
           ODM(I)=ODEPTH(LOTS)
        ENDIF
        IF(IBUG.EQ.1) WRITE(IODBUG,620) I,OTM(I+1),OTM(I),LOTS,
     +                JHR(INT(OTM(I+1))),JHR(INT(OTM(I))),DELTAT
  620   FORMAT('EX60: I,OTM(I+1),OTM(I),LOTS,JHR(OTM(I+1)),JHR(OTM(I)),
     +        DELTAT: ',I4,2F5.1,I6,2I5,F5.1)

        DLOWER=ODM(I)
        IF(ODM(I+1).LT.ODM(I)) DLOWER=ODM(I+1)
	IF(LOTS.EQ.OTM(I+1)) THEN
           DLOWER=ODM(I+1)
           DELTAT=0
	ENDIF
        IF(IBUG.EQ.1) WRITE(IODBUG,630) I,DLOWER,ODM(I),ODM(I+1),
     .        ODEPTH(LOTS)
  630   FORMAT('EX60: I DLOWER ODM ODM(I+1) ODEPTHLOTS',
     .         7X,I2,10X,F4.1,1X,F4.1,1X,F4.1,1X,F4.1)
C
C   ---  LOOP BETWEEN MAX/MIN HOURLY TIME MARKER,COS INTERPOLATION
C
        DO 635 J=1,DELTAT
          THETA=((TIDE-REAL(JHR(INT(OTM(I)))))/DELTAT)*PI
          IF(IBUG.EQ.1) WRITE(IODBUG,640) TIDE,JHR(INT(OTM(I))),
     .       JDAY(INT(OTM(I))),(TIDE-REAL(JHR(INT(OTM(I))))),
     .       DELTAT,PI,THETA
  640     FORMAT('EX60: TIDE JHR(OTM) JDAY TIDE-JHR(OTM(I)) DELTAT PI
     .      THETA',7X,F4.1,1X,2I2,2X,F4.1,1X,F4.1,10X,F6.4,1X,F6.2)

          IF(ODM(I).LT.ODM(I+1)) THETA=THETA+PI
          DWTIDA(IHOUR)=((COS(THETA)+1.)/2.)
     .                  *ABS(ODM(I+1)-ODM(I))+DLOWER
          IF(IBUG.EQ.1) WRITE(IODBUG,650) ((COS(THETA)+1.)/2.),I,
     .                  ODM(I+1),ODM(I),DLOWER,DWTIDA(IHOUR),IHOUR
  650     FORMAT('EX60: COS,I,ODM(I+1),ODM(I),DLOWER,DWTIDA,IHOUR',
     .            2X,F4.1,1X,I2,3X,F4.1,3X,F4.1,5X,F4.1,11X,F4.1,I5)

          IHOUR=IHOUR+1
          IF(IHOUR.GT.LTS+1) GO TO 999
          TIDE=TIDE+1.
  635   CONTINUE

  800  CONTINUE

      ELSE
       IHOUR=LOTS+1
       DO 810 I=KM+1,KPM-1

        TIDE=REAL(JHR(INT(OTM(I))))
        IF(IBUG.EQ.1) WRITE(IODBUG,710) KM+1,KPM,TIDE
  710   FORMAT('EX60E: KM+1,KPM,TIDE', 8X,I2,1X,I2,3X,F4.1)

        DELTAT=REAL(JHR(INT(OTM(I+1)))-JHR(INT(OTM(I))))
        IF(DELTAT.LT.0) DELTAT=DELTAT+24.
        IF(LOTS.GT.OTM(I).AND.LOTS.LT.OTM(I+1)) THEN
           DELTAT=OTM(I+1)-LOTS
           ODM(I)=ODEPTH(LOTS)
        ENDIF
        IF(IBUG.EQ.1) WRITE(IODBUG,720) I,OTM(I+1),OTM(I),LOTS,
     +                JHR(INT(OTM(I+1))),JHR(INT(OTM(I))),DELTAT
  720   FORMAT('EX60E: I,OTM(I+1),OTM(I),LOTS,JHR(OTM(I+1)),JHR(OTM(I)),
     +        DELTAT: ',I4,2F5.1,I6,2I5,F5.1)

        DLOWER=ODM(I)
        IF(ODM(I+1).LT.ODM(I)) DLOWER=ODM(I+1)
        IF(IBUG.EQ.1) WRITE(IODBUG,730) I,DLOWER,ODM(I)
  730   FORMAT('EX60E: I DLOWER ODM ',7X,I2,10X,F4.1,1X,F4.1)
C
C   ---  LOOP BETWEEN MAX/MIN HOURLY TIME MARKER,COS INTERPOLATION
C
        DO 735 J=1,DELTAT
          THETA=((TIDE-REAL(JHR(INT(OTM(I)))))/DELTAT)*PI
          IF(IBUG.EQ.1) WRITE(IODBUG,740) TIDE,JHR(INT(OTM(I))),
     .        JDAY(INT(OTM(I))),(TIDE-REAL(JHR(INT(OTM(I))))),
     .        DELTAT,PI,THETA
  740     FORMAT('EX60E:TIDE JHR(OTM) JDAY TIDE-JHR(OTM(I)) DELTAT PI
     .      THETA',7X,F4.1,1X,2I2,2X,F4.1,1X,F4.1,10X,F6.4,1X,F6.2)

          IF(ODM(I).LT.ODM(I+1)) THETA=THETA+PI
          DWTIDA(IHOUR)=((COS(THETA)+1.)/2.)
     .                  *ABS(ODM(I+1)-ODM(I))+DLOWER
          IF(IBUG.EQ.1) WRITE(IODBUG,750) ((COS(THETA)+1.)/2.),I,
     .                  ODM(I+1),ODM(I),DLOWER,DWTIDA(IHOUR),IHOUR
  750     FORMAT('EX60E: COS,I,ODM(I+1),ODM(I),DLOWER,DWTIDA,IHOUR',
     .            2X,F4.1,1X,I2,3X,F4.1,3X,F4.1,5X,F4.1,6X,F4.1,I5)

          IHOUR=IHOUR+1
          IF(IHOUR.GT.LTS+1) GO TO 999
          TIDE=TIDE+1.
  735   CONTINUE

  810  CONTINUE
       END IF


  999  DWTIDA(LTS)=DWTIDA(LTS-1) + (DWTIDA(LTS-1) - DWTIDA(LTS-2))
       KDA = IDA
       KHR = IHR
       DO 1000 I=ITS,LTS
        CALL MDYH1(KDA,KHR,ILM,ILD,ILY,ILH,NOUTZ,NOUTDS,NTZCD)
        KHR=KHR+1
        IF (KHR.GT.24) THEN
          KHR=1
          KDA=KDA+1
        ENDIF
       IF(IBUG.EQ.1) WRITE(IODBUG,780) DWTIDA(I)*3.28,I,ILH,ILM,ILD
  780     FORMAT('EX60: DWTIDA(I),I,ILH,ILM,ILD',
     .            2X,F4.1,4I6)
 1000  CONTINUE
       RETURN
       END
