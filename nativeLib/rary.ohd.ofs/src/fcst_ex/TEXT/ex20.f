C MEMBER EX20
C  (from old member FCEX20)
C
      SUBROUTINE EX20(PO,CO,QIN,QOUT,QTEMP,MISSG)
C                             LAST UPDATE: 01/06/94.11:41:22 BY $WC21DT
C
C .....................................................................
C
C     THIS IS THE EXECUTION SUBROUTINE FOR THE CHANGE THE TIME INTERVAL
C       OF A TIME SERIES OPERATION.  MISSING DATA ARE ALLOWED.
C       QIN = THE INPUT TIME SERIES, QOUT = THE OUTPUT TIME SERIES WITH
C       THE NEW TIME INTERVAL , AND QTEMP = WORKING SPACE.
C .....................................................................
C
C     SUBROUTINE INITIALLY WRIITEN BY
C       ED VANBLARGAN - HRL APRIL, 1981
C .....................................................................
C
C
C       UPDATED 12/20/88 BY M. KANE - HRL
C
C ......................................................................
C
      DIMENSION PO(1),QIN(1),QOUT(1),ISUBN(2),CO(1),
     *QTEMP(1),MISSG(1)
C
      INCLUDE 'common/ionum'
      INCLUDE 'common/fdbug'
      INCLUDE 'common/fctime'
      INCLUDE 'common/fcary'
C
C    ================================= RCS keyword statements ==========
      CHARACTER*68     RCSKW1,RCSKW2
      DATA             RCSKW1,RCSKW2 /                                 '
     .$Source: /fs/hseb/ob72/rfc/ofs/src/fcst_ex/RCS/ex20.f,v $
     . $',                                                             '
     .$Id: ex20.f,v 1.4 2003/03/14 17:35:30 dws Exp $
     . $' /
C    ===================================================================
C
C
      DATA ISUBN,LTRACE,NOP/4HEX20,4H    ,1,20/
C
C .....................................................................
C
C     UTILITY ROUTINE (FPRBUG) TO CHECK DEBUG AND TRACE LEVEL
C
      CALL FPRBUG(ISUBN,LTRACE,NOP,IBUG)
C .....................................................................
C
C ....GET CONTROL VALUES FROM PO ARRAY
C
      NEEDP=14
      ITA=PO(5)
      ITB=PO(9)
      ICASE=ABS(PO(12))
      NEEDC=PO(10)
C
C ....LOCQIN =LOCATION OF FIRST VALUE WE WANT IN THE QIN ARRAY
C ....LOCQOT=LOCATION OF FIRST VALUE WE WANT TO PUT IN QOUT ARRAY
C ....LASTIN=LOCATION OF LAST  VALUE WE WANT IN THE QIN ARRAY
C ....LASTOT=LOCATION OF LAST  VALUE WE WANT TO PUT IN QOUT ARRAY
C ....NUMLOC=NUMBER  OF VALUES OF QIN PER VALUE OF QOUT OR FOR DECREASIG
C            TIME INTERVAL, IT IS NUMBER OF VALUES OF QOUT PER QIN.
C
      Ihzerotemp=ihr-ITA
      ihrtemp=ihzerotemp+itb
      LOCQIN = (IDA-IDADAT)*24/ITA + (IHR-1)/ITA +1
      LOCQOT= (IDA-IDADAT)*24/ITB  + (IHRtemp-1)/ITB +1
cew  changed the lastin and lastot computations so they no
cew  longer added one because of trouble in ESP
cew   LASTIN= (LDA-IDADAT)*24/ITA + LHR/ITA + 1
cew   LASTOT= (LDA-IDADAT)*24/ITB + LHR/ITB +1
      LASTIN= (LDA-IDADAT)*24/ITA + (LHR)/ITA
      LASTOT= (LDA-IDADAT)*24/ITB + (LHR)/ITB 
      NUMLOC = ITA/ITB
C
      KDA = IDA
      KHR=IHR - ((ITA/ITB)-1)*ITB
      ILIN=LOCQIN
      ILOUT=LOCQOT
C
      IF (ITA.GT.ITB) GO TO 40
      NUMLOC=ITB/ITA
      LOCQOT= (IDA-IDADAT)*24/ITB + (IHR-1)/ITB + 1
      KHR = IHR
C
C ....SET VARIABLES USED TO WRITE OUT CARRYOVER LATER
C
C
C     FOR CASES THAT NEED CARRYOVER, CHECK THE INITIAL CARRYOVER.
C     OTHERWISE GO STRAIT TO APPROPRIATE STARTING POINT FOR THAT CASE.
C
C     IF CO IS MISSING, THEN SET THE MISSING FLAG (MISS) TO 1
C
40    IF (NEEDC.EQ.0) GO TO 50
      ICO=1
      ICHK=IFILLC*NCSTOR
      MISS = 0
      IF (IFMSNG(CO(1)).GE.1) MISS=1
C
C
C ...........................................................
C     DEBUG OUTPUT
C
50    IF (IBUG.LE.0) GO TO 120
C
      WRITE (IODBUG,55) (PO(I),I=2,4),PO(13),ITA,
     *(PO(I),I=6,8),PO(14),ITB
55    FORMAT(// 1X,4HTIME,14X,4HDATA,4X,4HTIME,4X,4HTIME
     */ 1X,6HSERIES,4X,4HI.D.,4X,4HTYPE,4X,5HSCALE,3X,8HINTERVAL
     */ 1X,6H------,4X,4H----,4X,4H----,4X,5H-----,3X,8H--------
     */ 1X,1X,3H1.),2X,2A4,4X,A4,5X,A4,4X,I4
     */ 1X,1X,3H2.),2X,2A4,4X,A4,5X,A4,4X,I4)
C
C
      WRITE (IODBUG,105) ITA,ITB,ICASE,NEEDC,LOCQIN,
     $LOCQOT,LASTIN,LASTOT,NUMLOC,KDA,KHR,(PO(I),I=1,NEEDP)
105   FORMAT(1H0,64HITA ITB ICASE NEEDC LOCQIN LOCQOT LASTIN LASTOT NUML
     $OC   KDA KHR / 1X,I3,I4,2I6,5I7,I6,I4 // 1X,10HPO ARRAY= ,
     *F4.0,1X,2A4,1X,A4,F4.0,1X,2A4,1X,A4,4F4.0,A4,1X,A4)
C
      IF (NEEDC.GE.1) GO TO 80
      WRITE (IODBUG,60)
60    FORMAT(1H0,20HCARRYOVER NOT NEEDED)
      GO TO 90
80    WRITE (IODBUG,85) (CO(I),I=1,NEEDC)
85    FORMAT(1H0,18HINITIAL CARRYOVER=,2F8.0)
C
90    WRITE (IODBUG,107) IDA,IHR,LDA,LHR
107   FORMAT(1H0,20H   IDA IHR   LDA LHR / 1X,2(I6,I4))
C ......................................................................
C
C
C ....CHECK WHICH CASE IT IS AND GO TO APPROPRIATE PLACE
C
 120  IF(ITA.NE.ITB) GO TO 190
      IST=LOCQIN
      IEND=LASTIN-LOCQIN+1
      DO 130 I=IST,IEND
 130  QOUT(LOCQOT+I-1)=QIN(LOCQIN+I-1)
C
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  FIRST THING WE DO IS TO LOOK FOR FIRST OBSERVATION OF RUN.
C
      DO 140 I=IST,IEND
C
C  SEE IF TIME-SERIES VALUE IS MISSING
C
      VAL = QIN(LOCQIN+I-1)
      IF (IFMSNG(VAL).EQ. 1) GO TO 140
C
C  WE'VE FOUND A DATA VALUE.
C
      JEND = I
      IST = JEND+1
      DO 135 J=1,JEND
      QOUT(LOCQOT+J-1) = VAL
 135  CONTINUE
      VAL1 = VAL
      GO TO 150
  140 CONTINUE
C
C  IF WE'VE MADE IT TO HERE, THEN WE HAVE NO OBSERVATIONS AND WE'RE
C  NOT ABLE TO DO ANY INTERPOLATION.
C
      GO TO 5000
C
C- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  HERE WE GO FROM THE FIRST OBSERVATION OUT TO THE LAST PERIOD OF
C  THE OBSERVED PERIOD OF THE RUN LOOKING FOR MORE OBSERVATIONS
C
 150  DO 180 I=IST,IEND
C
C  SEE IF TIME-SERIES VALUE IS MISSING
C
      VAL = QIN(LOCQIN+I-1)
      IF (IFMSNG(VAL) .EQ. 1) GO TO 180
C
C  WE'VE FOUND A DATA VALUE.
C
      JST = JEND+1
      JEND = I
      VAL2 = VAL
      VADD = (VAL2-VAL1)/(JEND-JST+1)
      VAL = VAL1
      DO 170 J=JST,JEND
      VAL = VAL+VADD
      QOUT(LOCQOT+J-1) = VAL
  170 CONTINUE
      VAL1 = VAL2
  180 CONTINUE
CC      IF(IBUG.LE.0) GO TO 5000
      WRITE(IODBUG,3400) (PO(II),II=2,4),ITA
 3400 FORMAT(1X,'INPUT TIME SERIES= ',2A4,2X,A4,
     & 5X,'TIME INTERVAL=',I4,' HR')
      WRITE(IODBUG,3410) (QIN(II),II=LOCQIN,LASTIN)
      WRITE(IODBUG,3401) (PO(II),II=6,8),ITB
 3401 FORMAT(1X,'OUTPUT TIME SERIES= ',2A4,2X,A4,
     & 5X,'TIME INTERVAL=',I4,' HR')
      WRITE(IODBUG,3410) (QOUT(II),II=LOCQOT,LASTOT)
 3410 FORMAT(1X,8F10.2)
      GO TO 5000
C
 190  GO TO (200,400,200,600,800,600,1000),ICASE
C
C
C ........CASE 1 OR 3  (MEAN OR ACCM, INCREASING TIME INTERVAL).........
C
C     PROCEDURE: SUM ALL THE QIN VALUES WITHIN EACH LONGER TIME INTERVAL
C                ,ITB,  THEN FOR MEAN ONLY-DIVIDE BY THE NUMBER OF
C                VALUES SUMMED (EXCEPT FOR CMSD UNITS, FOR WHICH THE
C                CASE WAS SET TO 3 IN PIN ROUTINE).
C
C
C     ALSO, NEED TO ACCOUNT FOR CARRYOVER AND OR MISSING VALUES.
C     ONE CARRYOVER VALUE IS NECESSARY
C
C     FOLLOWING LOOP GOES THRU ALL THE QIN VALUES WE ARE CONCERNED WITH
C     ALL QIN VALUES IN EACH QOUT INTERVAL ARE SUMMED. AT THE END OF AN
C     INTERVAL, THE SUM (OR MEAN) IS STORED IN A QOUT LOCATION.
C
C     THE END OF AN INTERVAL IS WHEN KHR IS EQUAL TO OR A MULTIPLE OF
C     ITB.
C     KHR IS THE TIME (HOUR) ASSOCIATED WITH THE CURRENR QIN VALUE.
C     KHR GETS INCREMENTED BY ITA ON EACH PASS THRU THE LOOP.
C     WHENEVER KHR GOES OVER 24 THEN KHR GETS RESET BACK TO ITA.
C
C     AT THE END OF AN INTERVAL, A VALUE (SUM OR MEAN) IS STORED IN QOUT
C     AND THE COUNTERS ARE RESET OR INCREMENTED.  MISS AND SUM GET RESET
C     INCREMENTED BY 1.
C
C     ALSO, EACH QIN IS CHECKED IF IT IS MISSING.  FOR MISSING QIN
C     SET SUM=-999 AND MISS GETS INCREMENTED BY 1.  IF MISS IS GREATER
C     THAN 0 AT END OF INTERVAL, THEN SET QOUT=-999
C
C     ALSO, ON EACH PASS THRU LOOP, CHECK IF CARRYOVER IS TO BE SAVED
C     FOR THAT DAY AND HOUR.  IF SO, CALL FCWTCO AND SAVE THE VALUE OF
C     SUM.  SUM IS SET TO CARRYOVER VALUE (CO) INITIALLY.
C
200   SUM=CO(1)
      DO 300 I=LOCQIN,LASTIN
        IF (IFMSNG(QIN(I)).EQ.0) GO TO 240
        MISS=MISS+1
240     IF (MOD(KHR,ITB).NE.0) GO TO 250
C
C     NOW AT END OF AN INTERVAL. THEREFORE, STORE THE SUM IN QOUT AND
C     DIVIDE BY NUMLOC FOR MEAN(CASE1, EXCEPT FOR UNITS OF CMSD).
C     ALSO, CHECK IF ANY QIN WERE
C     MISSING (MISS GE 1) AND THEN RESET OR INCREMENT COUNTERS.
C
        QOUT(LOCQOT) = SUM + QIN(I)
        IF (ICASE.EQ.1) QOUT(LOCQOT) = QOUT(LOCQOT)/NUMLOC
        SUM = 0.0
        IF (MISS.GE.1) QOUT(LOCQOT)=-999.0
        MISS=0
        LOCQOT = LOCQOT+1
        GO TO 260
C
C     SINCE WE ARE NOT AT END OF INTERVAL, JUST SUM IN THIS QIN AND
C     MOVE ON.
C
250     SUM = SUM+QIN(I)
        IF (MISS.GE.1) SUM = -999.0
C
C     CHECK IF CARRYOVER NEEDED FOR THIS TIME
C
260     IF (ICHK.EQ.0) GO TO 270
        IF (ICO.GT.NCSTOR) GO TO 270
        IF (KDA.NE.ICDAY(ICO) .OR. KHR.NE.ICHOUR(ICO)) GO TO 270
        CALL FCWTCO(KDA,KHR,SUM,1)
        ICO = ICO+1
C
C     INCREMENT KHR, THEN CHECK IF KHR AND KDA NEED TO BE RESET
C
270     KHR = KHR+ITA
        IF (KHR.LE.24) GO TO 300
        KHR = ITA
        KDA = KDA+1
300   CONTINUE
C
C ....NOW THAT COMPUTATIONS ARE FINISHED FOR THIS CASE, SET CARRYOVER
C ....AND RETURN
C
      IF (IFILLC.EQ.1) CO(1)=SUM
      GO TO 3000
C
C
C
C ........CASE 2 (INST, INCREASING TIME INTERVAL).......................
C
C     FOR THIS CASE, SIMPLY PICK OFF VALUES FROM QIN THAT ARE AT THE
C     SAME TIME AS THE LARGER INTERVAL QOUT
C
C     NO CARRYOVER NECESSARY.
C
C     IONE = FIRST LOCATION OF QIN THAT IS AT A QOUT INTERVAL.
C     NUMLOC = NUMBER OF QIN VALUES PER QOUT (DEFINED EARLIER)
C     LOCQOT = FIRST LOCATION IN QOUT WE WANT (DEFINED EARLIER).
C     LASTIN = LAST LOCATION WE WANT FROM QIN (DEFINED EARLIER)
C
400   IONE = (IDA-IDADAT)*24/ITA + (ITB-1)/ITA + 1
      DO 450 I=IONE,LASTIN,NUMLOC
        QOUT(LOCQOT) = QIN(I)
        LOCQOT = LOCQOT+1
450   CONTINUE
      GO TO 3000
C
C
C
C.........CASE 4 OR 6 (MEAN OR ACCM, DECREASING TIME INTERVAL).........
C
C     FOR THESE CASES, SIMPLY PICK VALUES FROM QIN AND PUT INTO
C     EVERY QOUT VALUE IN THE QIN INTERVAL.
C     FOR ACCM, MUST ALSO DIVIDE THE QOUT VALUES BY THE NUMBER OF
C     VALUES USED (NUMLOC). ALSO, DO THIS FOR MEAN WITH UNITS OF CMSD.
C     FOR CMSD, THE CASE WAS SET TO 6 IN PIN ROUTINE
C
C     WE WILL MOVE TO THE NEXT QIN VALUE WHEN AT THE END OF THE
C     CURRENT QIN INTERVAL ( WHEN KHR EQUALS OR IS A MULTIPLE OF ITA).
C     KHR IS A COUNTER THAT GETS INCREMENTED BY ITB ON EACH PASS THRU
C     LOOP.  KHR WAS INITIALLY SET = TO IHR EARLIER IN PROGRAM.
C
C     LOCQIN  = FIRST LOCATION IN QIN  WE WANT (DEFINED EARLIER).
C     LOCQOT = FIRST LOCATION IN QOUT WE WANT (DEFINED EARLIER).
C     LASTOT = LAST  LOCATION OF QOUT WE WANT (DEFINED EARLIER).
C     NUMLOC = NUMBER OF QOUT VALUES PER QIN VALUE  (DEFINED EARLIER).
C
C     NO CARRYOVER INVOLVED IN THESE CASES.
C
600   DO 700 I=LOCQOT,LASTOT
        QOUT(I)=QIN(LOCQIN)
        IF (ICASE.EQ.6) QOUT(I)=QOUT(I)/NUMLOC
        IF (IFMSNG(QIN(LOCQIN)).GE.1) QOUT(I)=-999.0
        IF (MOD(KHR,ITA).EQ.0) LOCQIN=LOCQIN+1
        KHR=KHR+ITB
700   CONTINUE
      GO TO 3000
C
C
C
C
C.........CASE 5  (INST, DECREASING TIME INTERVAL) .....................
C
C THIS CASE HAS 2 OPTIONS:
C    A. DO INTERPOLATION (INDICATED BY POSITIVE PO(12))
C    B. NO      "           "       "  NEGATIVE  "
C
800   IF (PO(12).LT.0.0) GO TO 910
C
C OPTION A
C
C     FOR THIS CASE...GO THRU EACH QIN VALUE AND INTERPOLATE FOR THE
C     QOUT VALUES.  THIS INTERPOLATION IS DONE INSIDE A NESTLED LOOP.
C
C     INTERPOLATION IS DONE USING FOLLOWING GENERAL EQTN...Y=MX+B
C     WHERE Y=CURRENT QOUT
C           M=(QIN(I)-CO)/ITA WHICH IS THE DIFFERENCE BETWEEN THE
C              CURRENT QIN(I) AND PREVIOUS QIN=CO DIVIDED BY THE
C              CHANGE IN TIME (ITA)
C           X=TIMOUT WHICH IS THE TIME FOR THE CURRENT QOUT RELATIVE
C              TO THE INTERVAL SIZE
C           B=CO WHICH IS THE PREVIOUS QIN
C
C     FOR ANY MISSING QIN OR CO VALUES,ALL QOUT'S ESTIMATED FROM IT
C     ARE SET TO MISSING (-999.0).
C
C     LOCQOT IS INITIALLY THE FIRST LOCATION IN QOUT AS DEFINED EARLIER.
C     LOCQOT GETS INCREMENTED BY 1 ON EACH PASS THRU NESTLED LOOP AND
C     THEREFORE KEEPS TRACK OF THE QOUT LOCATION.
C
C     AT THE END OF THE NESTLED LOOP, MISS GETS RESET TO 0 AND CO GETS
C     THE CURRENT VALUE OF QIN. ALSO LAST QOUT OF TIME STEP IS NOT
C     ESTIMATED, IT SIMPLY GETS CURRENT QIN VALUE.
C
C ALSO, CHECK IF CARRYOVER IS NEEDED AT THIS TIME.
C AND RESET KHR INITIALLY TO IHR.
C
C     LASTIN = LAST LOCATION OF QIN  WE WANT (DEFINED EARLIER).
C     LOCQIN  = FIRST LOCATION IN QIN  WE WANT (DEFINED EARLIER).
C     NUMLOC = NUMBER OF QOUT VALUES PER QIN VALUE  (DEFINED EARLIER).
C
      KHR=IHR
      NUMLOC=NUMLOC-1
      DO 900 I=LOCQIN,LASTIN
        IF (IFMSNG(QIN(I)).GE.1) MISS=MISS+1
        IF (IFMSNG(CO(1)).GE.1) MISS=MISS+1
        DO 850 N=1,NUMLOC
          TIMOUT=ITB*N
          QOUT(LOCQOT)=(QIN(I)-CO(1))/ITA * TIMOUT +CO(1)
          IF (MISS.GE.1) QOUT(LOCQOT) = -999.0
          LOCQOT=LOCQOT+1
850     CONTINUE
C
      QOUT(LOCQOT)=QIN(I)
      LOCQOT=LOCQOT+1
        CO(1)=QIN(I)
        MISS=0
C
C     CHECK IF CARRYOVER NEEDED AT THIS TIME
C
        IF (ICHK.EQ.0) GO TO 900
        IF (ICO.GT.NCSTOR) GO TO 900
        IF (KDA.NE.ICDAY(ICO) .OR. KHR.NE.ICHOUR(ICO)) GO TO 880
        CALL FCWTCO(KDA,KHR,CO,1)
        ICO = ICO+1
C
C     INCREMENT KHR, THEN CHECK IF KHR AND KDA NEED TO BE RESET
C
880     KHR = KHR+ITA
        IF (KHR.LE.24) GO TO 900
        KHR = ITA
        KDA = KDA+1
C
900   CONTINUE
      GO TO 3000
C
C OPTION B (CASE 5 - NO INTERPOLATION)
C   SIMPLY MOVE VALUES FROM QIN INTO QOUT WHEN BOTH OCCUR AT SAME TIME
C   STEP.  ALL OTHER VALUES OF QOUT (THE IN BETWEEN TIME STEPS) ARE
C   SET TO MISSING.
C   THIS IS SIMILAR TO CASE 4.
C   NO CARRYOVER IS NEEDED.
C
910   DO 920 I=LOCQOT,LASTOT
      QOUT(I)=-999.0
      IF (MOD(KHR,ITA).NE.0) GO TO 920
      QOUT(I)=QIN(LOCQIN)
      LOCQIN=LOCQIN+1
920   KHR=KHR+ITB
      GO TO 3000
C
C
C
C.........CASE 7 (MEAN TO INST, DECREASING TIME INTERVAL)...............
C
C     THREE POSSIBLE SCENARIOS ARE ACCOUNTED FOR UNDER THIS CASE AS
C     WE LOOP THRU ALL THE QIN VALUES FROM LOCQIN TO LASTIN:
C         1. NO RISE OR FALL.
C         2. A PEAK OR A TROUGH IS ENCOUNTERED.
C         3. RISING OR FALLING BUT NOT AT PEAK (OR TROUGH).
C     EACH SCENARIO IS TREATED AND DESCRIBED SEPARATELY.
C
C     AT THE END SUBROUTINE IS CALLED TO ADJUST QOUT SO AS TO CONSERVE
C     VOLUME.
C
C     MISSING VALUES ARE ACCOUNTED FOR
C
C     NEW VARIABLES (MANY VARIABLES USED HAVE BEEN DESCRBED EARLIER AND
C     ARE NOT DEFINED AGAIN) :
C     NEX=NEXT QIN LOCATION
C     ENDPT=POINT AT END OF INTERVAL WHICH IS SET AT 1/4 OF THE WAY
C           UP (OR 3/4 OF WAY DOWN) FROM NEXT QIN TO CURRENT QIN.
C     DIFMB=DIFFERENCE BETWEEN CURRENT QIN - NEXT QIN.
C     DIFMA=DIFFERENCE BETWEEN CURRENT QIN - PREVOIUS QIN.
C     ADIFMA AND ADIFMB REFER TO THE ABSOLUTE VALUES OF ABOVE.
C
C     CO(1)=PREVIOUS INST VALUE
C     CO(2)=PREVIOUS MEAN VALUE
C     SAVE INITIAL CO(1) IN TMPCO.
C
C      KHR IS RESET TO IHR INITIALLY FOR THIS CASE.
C
1000  KHR=IHR
      TMPCO=CO(1)
C
C MAJOR MODIFY 7/9/86 EJV MAINTENANCE 287
C BEFORE...IF YESTERDAY, TODAY OR TOMORROW QIN MISSING THEN,
C TODAYS QOUT SET = MSG.  CHANGE SO THAT QOUT SET = MSG ONLY
C IF TODAYS MEAN = MSG.  TO DO THIS FILL QTEMP WITH QIN BUT
C FILL IN FOR MISSING VALUES IF YESTERDAY OR TOMMORROW PRESENT.
C THEN USE QTEMP TO ESTIMATE
C QOUT.  HOWEVER STILL CHECK ORIGINAL VALUES IN QIN AND IF MSG
C SET QOUT=MSG FOR TODAY ONLY
C
C NEW VARIABLES
C QTODAY - TODAYS MEAN DAILY VALUE
C QINPRE - PREVIOUS INST VALUE (WILL NEVER BE MSG IF TODAY PRESENT)
C QMEPRE - PREVIOUS MEAN VALUE (WILL NEVER BE MSG IF TODAY PRESENT)
C
C SET PREVIOUS VALUES
      QINPRE=CO(1)
      QMEPRE=CO(2)
C CHECK IF 1ST MEAN VALUE IS MSG (IFMSNG=1 FOR MSG)
      QTEMP(LOCQIN)=QIN(LOCQIN)
      IF (IFMSNG(QTEMP(LOCQIN)).EQ.1) GO TO 1001
C 1ST VALUE PRESENT, IF CO IS MSG THEN SET CO=1ST QIN
      IF (IFMSNG(QMEPRE).EQ.0) GO TO 1004
      QMEPRE=QTEMP(LOCQIN)
      QINPRE=QMEPRE
      CO(1)=QMEPRE
      CO(2)=QMEPRE
      GO TO 1004
C 1ST MEAN DAILY VALUE IS MISSING SO
C CAN HAVE 4 CASES
C 1 - PREVIOUS AND NEXT MEANS ARE PRESENT SO INTERPOLATE
C 2 - PREVIOUS AND NEXT MEANS ARE MSG SO DO NOTHING
C 3 - PREVIOUS PRESENT,NEXT MSG SO SET = PREVIOUS
C 4 - PREVIOUS MSG,NEXT PRESENT SO SET = NEXT
1001  CONTINUE
      IF (IFMSNG(QMEPRE).NE.1.AND.IFMSNG(QIN(LOCQIN+1)).NE.1) GO TO 1003
      IF (IFMSNG(QMEPRE).NE.1.AND.IFMSNG(QIN(LOCQIN+1)).EQ.1)
     $ QTEMP(LOCQIN)=QMEPRE
      IF (IFMSNG(QMEPRE).EQ.1.AND.IFMSNG(QIN(LOCQIN+1)).NE.1)
     $ QTEMP(LOCQIN)=QIN(LOCQIN+1)
      GO TO 1004
C INTERPOLATE FO CASE 1
1003  CONTINUE
      QTEMP(LOCQIN)=(QMEPRE+QIN(LOCQIN+1))/2.
C 1ST VALUE ALL DONE
1004  CONTINUE
C LOOP THRU AND CHECK EACH MEAN VALUE
C CAN HAVE 4 CASES
C 1 - PREVIOUS AND NEXT MEANS ARE PRESENT SO INTERPOLATE
C 2 - PREVIOUS AND NEXT MEANS ARE MSG SO DO NOTHING
C 3 - PREVIOUS PRESENT,NEXT MSG SO SET = PREVIOUS
C 4 - PREVIOUS MSG,NEXT PRESENT SO SET = NEXT
      II=LOCQIN+1
      JJ=LASTIN-1
      DO 1010 I=II,JJ
      QTEMP(I)=QIN(I)
      IF (IFMSNG(QTEMP(I)).EQ.0) GO TO 1010
      IF (IFMSNG(QIN(I-1)).NE.1.AND.IFMSNG(QIN(I+1)).NE.1) GO TO 1005
      IF (IFMSNG(QIN(I-1)).NE.1.AND.IFMSNG(QIN(I+1)).EQ.1)
     $ QTEMP(I)=QIN(I-1)
      IF (IFMSNG(QIN(I-1)).EQ.1.AND.IFMSNG(QIN(I+1)).NE.1)
     $ QTEMP(I)=QIN(I+1)
      GO TO 1010
C INTERPOLATE FO CASE 1
1005  CONTINUE
      QTEMP(I)=(QIN(I-1)+QIN(I+1))/2.
1010  CONTINUE
C CHECK LAST MEAN VALUE
      QTEMP(LASTIN)=QIN(LASTIN)
      IF (IFMSNG(QTEMP(LASTIN)).EQ.1) QTEMP(LASTIN)=QIN(LASTIN-1)
C.......DEBUG...........................................................
      IF (IBUG.LE.0) GO TO 1014
      WRITE(IODBUG,1011) QMEPRE,QINPRE
1011  FORMAT(1H0,'       QIN      QTEMP  QMEPRE,QINPRE=',2F10.1)
      DO 1012 I=LOCQIN,LASTIN
      WRITE(IODBUG,1013) QIN(I),QTEMP(I)
1012  CONTINUE
1013  FORMAT(1X,2F10.1)
1014  CONTINUE
C.......................................................................
C
C LOOP THRU EACH MEAN DAILY VALUE
C
      DO 2000 I=LOCQIN,LASTIN

        QTODAY=QTEMP(I)
        NEX=I+1
C     CHECK IF NEXT QIN IS THERE. IF NOT, SET = TO CURRENT QIN
        IF (I.EQ.LASTIN) NEX=I
        QNEXT=QTEMP(NEX)
C
C     CHECK IF QIN (CURRENT) IS MISSING. IF SO
C     THEN SET ALL QOUT FOR THIS INTERVAL TO MISSING
C     NOTICE QMEPRE,QINPRE ARE UNCHANGED BUT CARRYOVER SET=MSG.
C
C     ALSO, SET MISSG(I)=1 IF CURRENT QIN IS MISSING.
C     THE MISSG ARRAY IS USED BY THE SUBROUTINE FAJMDQ.
C
        MISSG(I)=0
        IF (IFMSNG(QIN(I)).NE.1) GO TO 1050
C MEAN DAILY IS MISSING
        MISSG(I)=1
        DO 1040 N=1,NUMLOC
          QOUT(LOCQOT)=-999.0
          LOCQOT=LOCQOT+1
1040    CONTINUE
        CO(1)=QIN(I)
        CO(2)=QIN(I)
      QINPRE=QTEMP(I)
      QMEPRE=QTEMP(I)
        GO TO 1910
C
C     TO REACH HERE WE ARE NOT AT END NOR IS ANYTHING MISSING.
C     THEREFORE SET VARIABLE VALUES AND MOVE THRU THE SCENARIOS.
C
1050    ENDPT=QTODAY - 0.75 * (QTODAY-QNEXT)
        IF (QTODAY.LT.QNEXT) ENDPT=QTODAY+0.25*(QNEXT-QTODAY)
        DIFMA=QTODAY-QMEPRE
        DIFMB=QTODAY-QNEXT
        ADIFMA=ABS(DIFMA)
        ADIFMB=ABS(DIFMB)
        TOLER=0.0010*QTODAY
C
C     SCENARIO 1. NO RISE OR FALL
C
C     CHECK IF ABSOLUTE DIFFERENCE, ADIFMA(BETWEEN QIN AND PREVIOUS QIN)
C     AND ADIFMB(BETWEEN QIN AND NEXT QIN) ARE LESS THAN SOME TOLERANCE
C     LIMIT(TOLER).  IF SO, THEN THERE IS NO SIGNIFICANT RISE OR FALL.
C     THEREFORE, JUST SET ALL QOUT VALUES FOR THIS INTERVAL = TO QIN.
C     THEN RESET VALUES AND LOOP THRU TO NEXT QIN.
C     OTHERWISE MOVE ON AHEAD.
C
        IF (ADIFMA.GE.TOLER .OR. ADIFMB.GE.TOLER) GO TO 1200
        DO 1100 N=1,NUMLOC
          QOUT(LOCQOT)=QTODAY
          LOCQOT=LOCQOT+1
1100    CONTINUE
        GO TO 1900
C
C     SCENARIO 2. PEAK OR TROUGH
C
C     CHECK IF CURRENT QIN IS A PEAK OR ATROUGH. IF IT IS THEN DO THE
C     FOLLOWING (OTHERWISE MOVE AHEAD) :
C
C     -ESTIMATE THE MAGNITUDE OF THE INST PEAK OR TROUGH (PEAK) BY
C     ADDING TO QIN, 1/4*THE AVERAGE OF THE DIFFERENCES DIFMA AND DIFMB.
C
C     -ESTIMATE THE LOCATION (IPTIM) IN INTERVAL FOR THE TIME OF PEAK.
C     DO THIS BY SETTING IPTIM INITIALLY AT  THE MIDPOINT, THEN IF
C     DIFMB IS LT DIFMA SKEW IPTIM TOWARDS THE NEXT QIN. VICE VERSA,
C     IF DIFMA IS LT DIFMB, THEN SKEW IPTIM TOWARDS PREVIOUS QIN.
C
C     -ONCE PEAK IS ESTIMATED, THEN SIMPLY INTERPOLATE (LINEARLY)
C     BETWEEN CO AND PEAK AND THEN BETWEEN PEAK AND ENDPT(A POINT AT THE
C     END OF INTERVAL WHICH IS SET AT 1/4 OF THE WAY UP FROM NEXT QIN
C     AND CURRENT QIN).
C
1200    IF (QTODAY.GE.QMEPRE .AND. QTODAY.LE.QNEXT) GO TO 1400
        IF (QTODAY.LE.QMEPRE .AND. QTODAY.GE.QNEXT) GO TO 1400
C
C     ESTIMATE PEAK AND TIME OF PEAK LOCATION.
C     PEAK (TROUGH) CAN NOT BE LESS THAN 0 IF QIN IS POSITIVE
C
        PEAK=QTODAY+0.25*(DIFMA+DIFMB)/2
        IF (PEAK.LT.0.0 .AND. QTODAY.GE.0.0) PEAK=0.0001
        IPTIM=NUMLOC/2
        IF (ADIFMB.GT.ADIFMA) GO TO 1250
        IF (ADIFMB.GT.0.01) GO TO 1210
C  MAIN. #670
C  DETEERMINE IRATIO USING ADIFMA AND ADIFMB
C  INSTEAD OF DFIMA AND DIFMB
        IRATIO=ADIFMA
        GO TO 1220
1210    IRATIO=ADIFMA/ADIFMB
1220    IPTIM=IPTIM+IRATIO/2
        IF (IPTIM.GE.NUMLOC) IPTIM=NUMLOC-1
        GO TO 1260
C
1250    IF (ADIFMA.GT.0.01) GO TO 1255
        IRATIO=DIFMB
        GO TO 1258
1255    IRATIO=ADIFMB/ADIFMA
1258    IPTIM=IPTIM-IRATIO/2
        IF (IPTIM.LE.1) IPTIM=1
C
C     LOOP THRU TO GET QOUT VALUES BEFORE PEAK (OR TROUGH)
C
1260    TIMDIF=IPTIM*ITB
        DO 1270 N=1,IPTIM
          TIMOUT=ITB*N
          QOUT(LOCQOT)=(PEAK-QINPRE)/TIMDIF*TIMOUT+QINPRE
          LOCQOT=LOCQOT+1
1270    CONTINUE
C
C     LOOP THRU TO GET QOUT VALUES AFTER  PEAK (OR TROUGH)
C
        J=IPTIM+1
        TIMDIF=ITA-TIMDIF
        DO 1280 N=J,NUMLOC
          TIMOUT=ITB*(N-J+1)
          QOUT(LOCQOT)=(ENDPT-PEAK) / TIMDIF * TIMOUT + PEAK
          LOCQOT=LOCQOT+1
1280    CONTINUE
        GO TO 1900
C
C     SCENARIO 3. RISING OR FALLING
C
C     TWO SUB SCENARIOS HERE:
C        3A. WHERE THE CHANGE AT FRONT OF INTERVAL (ADIFMA) IS
C     LESS THAN CHANGE AT END OF INTERVAL (ADIFMB).
C        3B. WHEN ADIFMA IS GREATER THAN ADIFMB.
C     NOTE, IT DOES NOT MATTER WHETHER IT IS RISING OR FALLING.
C
C     FOR 3A, START AT CO AND ADD (OR SUBTRACT FOR FALLING) SMALL (BUT
C     INCREASING) INCREMENTS TO GET EACH QOUT VALUE.  THEN FOR THE LAST
C     QOUT OF INTERVAL JUMP UP (OR DOWN) AND SET IT = TO ENDPT.
C
C     FOR 3B, START AT ENDPT AND ADD (OR SUBTRACT) SMALL INCREMENTS TO
C     GET EACH QOUT, WHERE WE ARE STARTING AT THE LAST QOUT AND
C     WORKING BACKWARDS UNTIL WE GET TO THE FIRST QOUT OF INTERVAL.
C     AFTER LOOP, JUMP TO LAST QOUT LOCATION OF THE INTERVAL
C     AND SET IT = TO ENDPT.
C
1400    J=NUMLOC-1
        CHANG=ENDPT-QINPRE
        IF (ADIFMA.GT.ADIFMB) GO TO 1700
C
C     SCENARIO 3A.
C
        IF (ADIFMB.LT.0.0001) ADIFMB=0.01
        DO 1600 N=1,J
          QOUT(LOCQOT)=QINPRE + 1. / (NUMLOC-N) * CHANG * ADIFMA/ADIFMB
C
C
          LOCQOT=LOCQOT+1
1600    CONTINUE
        QOUT(LOCQOT)=ENDPT
        LOCQOT=LOCQOT+1
        GO TO 1900
C
C     SCENARIO 3B.
C
1700   LOCQOT=LOCQOT+NUMLOC-2
       IF (ADIFMA.LT.0.0001) ADIFMA=0.01
        DO 1800 N=1,J
          QOUT(LOCQOT)=ENDPT - 1. / (NUMLOC-N) * CHANG * ADIFMB/ADIFMA
          LOCQOT=LOCQOT-1
1800    CONTINUE
        LOCQOT=LOCQOT+NUMLOC
        QOUT(LOCQOT)=ENDPT
        LOCQOT=LOCQOT+1
C
C
C
C     NOW AT END OF INTERVAL, THEREFORE SET CARRYOVER.
C     SET CARRYOVER CO(1) = TO LAST INST VALUE.
C                   CO(2)=CURRENT MEAN VALUE.
C
1900    J=LOCQOT-1
        QINPRE=QOUT(J)
        QMEPRE=QTEMP(I)
        CO(1)=QOUT(J)
        CO(2)=QIN(I)
C
C
C
C     IT IS CARRYOVER TIME NOW THAT INTERVAL IS DONE FOR
C     WHICHEVER CASE IT WAS.
C     CHECK IF CARRYOVER NEEDED AT THIS TIME
C
1910    IF (ICHK.EQ.0) GO TO 2000
        IF (ICO.GT.NCSTOR) GO TO 2000
        IF (KDA.NE.ICDAY(ICO) .OR. KHR.NE.ICHOUR(ICO)) GO TO 1920
        CALL FCWTCO(KDA,KHR,CO,2)
        ICO = ICO+1
C
C     INCREMENT KHR, THEN CHECK IF KHR AND KDA NEED TO BE RESET
C
1920    KHR = KHR+ITA
        IF (KHR.LE.24) GO TO 2000
        KHR = ITA
        KDA = KDA+1
C
C
C
C
2000  CONTINUE
C
C  MAIN. #670
C  IF I DAY IS MISSING AND I+1 DAY IS NOT MISSING
C  AND INSTANTANEOUS DISCHARGE TIME SERIES IS DESIRED
C  THEN RESET THE LAST MISSING VALUE
C  BY LINEARLY EXTRAPOLATING FROM THE 1ST TWO VALUE
C  OF I+1 DAY
      IEND=LASTIN-1
      DO 2500 I=LOCQIN,IEND
      NEX=I+1
      IF(IFMSNG(QIN(I)).NE.1 .OR. IFMSNG(QIN(NEX)).EQ.1) GO TO 2500
      IDUM=I*NUMLOC
      IDUM1=IDUM+1
      IDUM2=IDUM+2
      QOUT(IDUM)=QOUT(IDUM1)-(QOUT(IDUM2)-QOUT(IDUM1))
      IF(QOUT(IDUM).LE.0.) QOUT(IDUM)=0.0
 2500 CONTINUE
C
C     PRINT QOUT ARRAY BEFORE IT GETS CHANGED BY FAJMDQ
C
      IF (IBUG.GE.1) WRITE(IODBUG,2050) (QOUT(J),J=ILOUT,LASTOT)
2050  FORMAT(1X,24HQOUT ARRAY BEFORE FAJMDQ / (1X,12F10.1 / ))
C
C
C
C     GET SUBROUTINE (FAJMDQ) TO ADJUST THE INST VALUES
C     SO THAT VOLOUME IS THE SAME AS IT WAS FOR THE MEAN VALUES.
C
      TOLER=0.025
      CO(1)=TMPCO
      CALL FAJMDQ(QOUT,MISSG,QTEMP,QIN,ILIN,LASTIN,ILOUT,
     *LASTOT,TOLER,CO,LASADJ,ITB,ITB,LHR)
      CO(1)=QOUT(LASTOT)
C
C
3000  CONTINUE
C .....................................................................
C
C      DEBUG OUTPUT TO WRITE OUT DATA
C
      IF (IBUG.LE.0) GO TO 5000
C
      WRITE (IODBUG,3100)
3100  FORMAT(// 1X,11H**RESULTS** /2X,4HHOUR,7X,3HQIN,6X,4HQOUT)
C
C     WRITE OUT QIN AND QOUT IN 2 LOOPS: 1 LOOP FOR WHEN ITA GE ITB
C      AND 1 FOR WHEN ITB IS LARGER.
C
C     ILIN WAS SET IN BEGINNING TO LOCQIN
C     ILOUT WAS SET TO LOCQOT
C
      IF (ITA.LT.ITB) GO TO 4000
      ITIME=IHR - ((ITA/ITB)-1) * ITB
      DO 3500 I=ILOUT,LASTOT
        IF (MOD(ITIME,ITA).NE.0) GO TO 3200
        WRITE (IODBUG,4500) ITIME,QIN(ILIN),QOUT(I)
        ITIME=ITB
        ILIN=ILIN+1
        GO TO 3500
3200    WRITE (IODBUG,3300) ITIME,QOUT(I)
3300    FORMAT(1X,I5,10X,F10.1)
        ITIME=ITIME+ITB
3500  CONTINUE
      GO TO 4850
C
C     LOOP 2
C
4000  ITIME=IHR
      DO 4800 I=ILIN,LASTIN
        IF (MOD(ITIME,ITB).NE.0) GO TO 4200
        WRITE (IODBUG,4500) ITIME,QIN(I),QOUT(ILOUT)
        ILOUT=ILOUT+1
        ITIME=ITA
        GO TO 4800
4200    WRITE (IODBUG,4600) ITIME,QIN(I)
        ITIME=ITIME+ITA
4500    FORMAT(1X,I5,2F10.1)
4600    FORMAT(1X,I5,F10.1)
4800  CONTINUE
C
4850  IF (NEEDC.EQ.1) WRITE (IODBUG,4900) CO(1)
4900  FORMAT(1H0,10HCARRYOVER=,F10.1)
      IF (NEEDC.EQ.2) WRITE(IODBUG,4950) CO(1),CO(2)
4950  FORMAT(1H0,10X,21HPREV INST   PREV MEAN
     */ 1X,10HCARRYOVER=,2F10.1)
C
C     END DEBUG
C
C ........................................................
C
5000  CONTINUE
C
      RETURN
      END
