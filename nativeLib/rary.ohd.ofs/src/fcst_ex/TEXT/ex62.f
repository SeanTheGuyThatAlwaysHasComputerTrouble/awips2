C MODULE EX62
C-----------------------------------------------------------------------
C
C
C
      SUBROUTINE EX62 (P,HF,RANGE,SBALR1,SBALR2,SBALR3,SBALR4,HFA)

C     THIS IS THE EXECUTION ROUTINE FOR DWOPER ADJUSTMENT

C     THIS ROUTINE WAS INITIALLY WRITTEN BY DAVE GAREN AND RICK KOEHLER
C     UPDATED AND ADAPTED TO RFS/OFS ENVIRONMENT BY
C                 JOANNE R.SALERNO, NWRFC  -  1998

C        1         2         3         4         5         6         7
C23456789012345678901234567890123456789012345678901234567890123456789012

C     POSITION     CONTENTS OF P ARRAY
C      1           VERSION NUMBER OF OPERATION
C      2-19        GENERAL NAME OR TITLE
C
C  INPUT
C     20-22        DW OBS/FCST STAGE (HF STGE)     - CSTAP (STGA)

C     TIDAL RANGE/SLICE DEFINITION
C     23-24        RANGE LIMIT SERIES IDENTIFIER   -  RANGE
C     25           RANGE LIMIT TYPE CODE           -  TIDB
C                  RANGE(1) R1 LOWER LIMIT 
C                  RANGE(2) R2 LOWER LIMIT 
C                  RANGE(3) R3 LOWER LIMIT 
C                  RANGE(4) R4 LOWER LIMIT 
C                  RANGE(5) R4 UPPER LIMIT 
C
C     OBSERVED CSTA  AVERAGE  BALANCE TIME SERIES PER RANGE
C     26-27        RANGE1 AVE TIDE BALANCE TIME SERIES ID  -  SBALR1
C     28           RANGE1 AVE TIDE BALANCE TYPE CODE       -  TIDB
C     29-30        RANGE2 AVE TIDE BALANCE TIME SERIES ID  -  SBALR2
C     31           RANGE2 AVE TIDE BALANCE TYPE CODE       -  TIDB
C     32-33        RANGE3 AVE TIDE BALANCE TIME SERIES ID  -  SBALR3
C     34           RANGE3 AVE TIDE BALANCE TYPE CODE       -  TIDB
C     35-36        RANGE4 AVE TIDE BALANCE TIME SERIES ID  -  SBALR4
C     37           RANGE4 AVE TIDE BALANCE TYPE CODE       -  TIDB

C  OUTPUT
C     ADJUSTED CSTA TIME SERIES
C     38-39        DWADJ  ADJUSTED CSTA TIME SERIES ID    -  DWADJ 
C     40           DWADJ  ADJUSTED DATE TYPE CODE         -  STGE
C

C**********************************************************************

C     THE NUMBER OF ELEMENTS REQUIRED IN THE P ARRAY IS  40

C     POSITION     CONTENTS OF C ARRAY

C     THE NUMBER OF ELEMENTS REQUIRED IN THE C ARRAY IS   0

C        1         2         3         4         5         6         7
C23456789012345678901234567890123456789012345678901234567890123456789012

C       FLOW CHART FOR DWOPER STAGE ADJUSTMENT  (POST-PROCESSOR)


C       1.  READ IN TIME SERIES
                        
C           HF(*)       -   DW SIMULATED OBS/FCST STAGE (STGE)
C           RANGE(*)    -   RANGE LIMIT DEFINITIONS
C           SBALR1(*)   -   ADJUSTED AVE TIDE BALANCES, RANGE1
C           SBALR2(*)   -   ADJUSTED AVE TIDE BALANCES, RANGE2
C           SBALR3(*)   -   ADJUSTED AVE TIDE BALANCES, RANGE3
C           SBALR4(*)   -   ADJUSTED AVE TIDE BALANCES, RANGE4

C       2.      IDENTIFY FIRST AND LAST HOURLY TIME SERIES
C               IDENTIFY LAST OBSERVED  HOURLY TIME SERIES

C                ITS            LOTS              LTS
C                  |______________|________________|
C                STARTRUN       T=0              ENDRUN

C       3.      DETERMINE FCST DAY AND PROPER RANGE FOR DWOPER DATA

C       4.      APPLY ADJUSTED AVE TIDE BALANCES TO DWOPER OUTPUT
C               TIME SERIES (LINEAR INTERP. BETW. RANGE MID POINTS)

C       5.      WRITE TO DATABASE

C        1         2         3         4         5         6         7
C23456789012345678901234567890123456789012345678901234567890123456789012
 
C     VARIABLE DEFINITIONS

C     HF(*)       - DW OBS/FCST TIME SERIES                  INPUT
C     IDAY        - DAY MARKER
C     JHR         - HOUR MARKER
C     SBAL(*)      - BALANCE ARRAY SEQUENCE FOR RUN PERIOD   INPUT
C     RANGE(*)     - TIDE RANGES/SLICES                      INPUT
C     HFA(*)       - ADJUSTED TIME SERIES                    OUTPUT
 
      REAL P(*),RANGE(*),SBALR1(*),SBALR2(*),SBALR3(*),
     +          SBALR4(*)
      REAL BMID(4)
      REAL HF(*),HFA(*),BALINT


C        1         2         3         4         5         6         7
C23456789012345678901234567890123456789012345678901234567890123456789012
 
C     COMMON BLOCKS


      INCLUDE 'common/fcary'
      INCLUDE 'common/ionum'
      INCLUDE 'common/fdbug'
      INCLUDE 'common/fctime'

C     DEBUG COMMON
C        IODBUG - UNIT NUMBER TO WRITE OUT ALL DEBUG OUTPUT


C     UNIT NUMBERS COMMON
C     ALWAYS USE THE VARIABLES IN IONUM TO SPECIFY UNIT NUMBER


C     TIMING INFORMATION COMMON


C     IDARUN - I* 4 - INITIAL JULIAN DAY OF THE ENTIRE RUN
C     IHRRUN - I* 4 - INITIAL HOUR OF THE ENTIRE RUN
C     LDARUN - I* 4 - JULIAN DAY OF LAST DAY OF THE ENTIRE RUN
C     LHRRUN - I* 4 - LAST HOUR OF ENTIRE RUN
C     LDACPD - I* 4 - JULIAN DAY OF LAST DAY WITH OBSERVED DATA
C     LHRCPD - I* 4 - LAST HOUR WITH OBSERVED DATA
C     NOW    - I* 4 - CURRENT TIME FROM THE COMPUTER'S CLOCK
C                     NOW(1) - MONTH
C                     NOW(2) - DAY
C                     NOW(3) - YEAR (4 DIGIT)
C     LOCAL  - I* 4 - HOUR OFFSET TO LOCAL TIME
C     NOUTZ  - I* 4 - DEFAULT TIME ZONE NUMBER FOR OUTPUT
C     NOUTDS - I* 4 - DEFAULT DAYLIGHT SAVING TIME SWITCH FOR OUTPUT
C                     =0, STANDARD TIME
C                     =1, DAYLIGHT SAVING TIME
C     NLSTZ  - I* 4 - TIME ZONE NUMBER OF LOCAL STANDARD TIME
C     IDA    - I* 4 - JULIAN DATE OF THE FIRST DAY TO BE COMPUTED
C     IHR    - I* 4 - FIRST HOUR TO BE COMPUTED IN THE CURRENT PASS
C     LDA    - I* 4 - JULIAN DATE OF THE LAST DAY TO BE COMPUTED
C     LHR    - I* 4 - LAST HOUR TO BE COMPUTED IN THE CURRENT PASS
C     IDADAT - I* 4 - JULIAN DATE OF THE FIRST DAY OF TIME SERIES DATA

C     CONTROL INFORMATION FOR SAVING CARRYOVER

 
C     IFILLC - I* 4 - CONTROLS UPDATE OF C ARRAY AND STORING CARRYOVER
C                     =0, NO OPERATION CAN MODIFY THE C ARRAY; NO
C                         CARRYOVER STORED
C                     =1, C ARRAY SHOULD BE MODIFIED
C     NCSTOR - I* 4 - NUMBER OF CARRYOVER DATES SAVED TO BE SAVED
C                     IGNORED IF IFILLC=0
C     ICDAY  - I* 4 - JULIAN DAYS TO STORE CARRYOVER
C     ICHOUR - I* 4 - HOURS TO STORE CARRYOVER

C    ================================= RCS keyword statements ==========
      CHARACTER*68     RCSKW1,RCSKW2
      DATA             RCSKW1,RCSKW2 /                                 '
     .$Source: /fs/hseb/ob72/rfc/ofs/src/fcst_ex/RCS/ex62.f,v $
     . $',                                                             '
     .$Id: ex62.f,v 1.2 1998/10/14 13:46:08 page Exp $
     . $' /
C    ===================================================================

C     CHECK THE TRACE LEVEL AND WHETHER DEBUG OUTPUT IS NEEDED
      CALL FPRBUG ('EX62    ',1,62,IBUG)

C        1         2         3         4         5         6         7
C23456789012345678901234567890123456789012345678901234567890123456789012

C  --- LOCATE FIRST DATA VALUE IN THE 'HOURLY' AND 'DAILY' 
C                   TIME SERIES DATA ARRAYS 
      KDA = IDA
      KHR = IHR
      ITS = (KDA-IDADAT) * 24 + KHR
      ITSDLY = (KDA-IDADAT) + KHR / 24

C
C  DEBUG OUTPUT FOR FIRST DATA VALUE LOCATION

      IF (IBUG.EQ.1) WRITE(IODBUG,1002) KDA,KHR,IDADAT,ITS,ITSDLY
 1002 FORMAT(' EX62: KDA,KHR,IDADAT,ITS,ITSDLY: ',5I6)

C  --- LOCATE LAST DATA VALUE IN THE 'HOURLY' TIME SERIES DATA ARRAYS
C
      LTS = (LDA-(IDADAT-1)) * 24 + KHR -1

C
C  --- LOCATE LATEST OBS  VALUE IN 'HOURLY' TIME SERIES DATA
C
      LOTS = (LDACPD-IDADAT) * 24 + LHR
      LOTSDLY = (LDACPD-IDADAT) + LHR / 24

C  DEBUG OUTPUT FOR LAST DATA VALUE LOCATION
      IBUG = 0

      IF (IBUG.EQ.1) WRITE(IODBUG,1003) ITS,LOTS,LTS
 1003 FORMAT(' EX62: ITS,LOTS,LTS: ',3I8)

C        1         2         3         4         5         6         7
C23456789012345678901234567890123456789012345678901234567890123456789012

      NDAY=(LTS-ITS-1) / 24
      KBAL=NDAY * 4

      DO 200 J=1,4
         BMID(J)=(RANGE(J)+RANGE(J+1))/2.
         IF (IBUG.EQ.1) WRITE(IODBUG,1004) J,BMID(J),RANGE(J),RANGE(J+1)
 1004    FORMAT(' EX62: J,BMID,RANGE(J),RANGE(J+1): ',I6,3F10.2)

  200 CONTINUE

C
C ---   DETERMINE FCST DAY, PROPER RANGE FOR DWOPER DATA.
C       APPLY DAILY RANGE BALANCE (LINEAR INTERP. BETW. RANGE MID POINTS) TO
C       DWOPER OUTPUT TO CREATE AN ADJUSTED DWOPER TIME SERIES 
C
C     IDAY=LOTSDLY
      IDAY=ITSDLY
      JHR=LHR
       IF (IBUG.EQ.1) WRITE(IODBUG,1000) LHR, ITSDLY
 1000  FORMAT(' EX62: LHR,ITSDLY: ',2I8)
  
      DO 210 J=ITS,LTS
        JHR=JHR+1
        IF (JHR.GT.24) THEN
          IDAY=IDAY+1
          JHR=1
        ENDIF

C       TAKE CARE OF BOUNDARY CONDITIONS WHEN
C       HF(J) <= BMID(1) AND HF(J) >= BMID(4)

        IF (HF(J).LE.BMID(1)) THEN
          HFA(J)=HF(J)+SBALR1(IDAY)
          IF (IBUG.EQ.1) WRITE(IODBUG,1010) J,IDAY,HF(J),
     +           SBALR1(IDAY),HFA(J),BMID(1)
 1010     FORMAT(' EX62: <= BMID(1): J,IDAY,HF,SBALR1,HFA,BMID1: ',
     +             2I8,4F10.2)

        ELSEIF (HF(J).GE.BMID(4)) THEN
          HFA(J)=HF(J)+SBALR4(IDAY)
          IF (IBUG.EQ.1) WRITE(IODBUG,1011) J,IDAY,HF(J),
     +                                       SBALR4(IDAY),HFA(J)
 1011     FORMAT(' EX62: >= BMID(4): J,IDAY,HF,SBALR4,HFA: ',2I8,3F10.2)

        ELSEIF (HF(J).GT.BMID(1) .AND. HF(J).LE.BMID(2)) THEN
          DELTA=BMID(2)-BMID(1)
          BALINT=(HF(J)-BMID(1))/(BMID(2)-BMID(1))*
     +           (SBALR2(IDAY)-SBALR1(IDAY)) + SBALR1(IDAY)
          HFA(J)=HF(J)+BALINT
          IF (IBUG.EQ.1) WRITE(IODBUG,1005) J,IDAY,HF(J),BMID(1),DELTA,
     +                   SBALR1(IDAY),SBALR2(IDAY),BALINT,HFA(J)
 1005     FORMAT(' EX62: BMID(1-2): J,HF,DELTA: ',2I6,7F10.2)

        ELSEIF ((HF(J).GE.BMID(2)) .AND. (HF(J).LT.BMID(3))) THEN
          DELTA=BMID(3)-BMID(2)
	  BALINT=(HF(J)-BMID(2))/(BMID(3)-BMID(2))*
     +           (SBALR3(IDAY)-SBALR2(IDAY)) + SBALR2(IDAY)
          HFA(J)=HF(J)+BALINT
          IF (IBUG.EQ.1) WRITE(IODBUG,1006) J,IDAY,HF(J),BMID(2),DELTA,
     +                   SBALR2(IDAY),SBALR3(IDAY),BALINT,HFA(J)
 1006     FORMAT(' EX62: BMID(2-3): J,HF,DELTA: ',2I6,7F10.2)

        ELSEIF (HF(J).GE.BMID(3).AND.HF(J).LT.BMID(4)) THEN
          DELTA=BMID(4)-BMID(3)
          BALINT=(HF(J)-BMID(3))/(BMID(4)-BMID(3))*
     +           (SBALR4(IDAY)-SBALR3(IDAY)) + SBALR3(IDAY)
          HFA(J)=HF(J)+BALINT
          IF (IBUG.EQ.1) WRITE(IODBUG,1007) J,IDAY,HF(J),BMID(3),DELTA,
     +                   SBALR3(IDAY),SBALR4(IDAY),BALINT,HFA(J)
 1007     FORMAT(' EX62: BMID(3-4): J,HF,DELTA: ',2I6,7F10.2)

        END IF

  210 CONTINUE
   

  999 RETURN
      END
