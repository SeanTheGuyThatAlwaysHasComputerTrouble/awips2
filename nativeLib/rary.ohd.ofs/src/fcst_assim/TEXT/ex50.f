C MEMBER EX50
C  (from old member FCEX50)
C
C                             LAST UPDATE: 07/06/95.14:58:38 BY $WC21DT
C
C @PROCESS LVL(77)
      SUBROUTINE EX50(P,MP,C,MC,T,MT,TS,MTS,D,MD,IHZERO,
     1 PO, IP_PR, IPR_IDT, WP_B, WP_B_PRD, WS_B, RKPMIN, RKPMAX,
     2 IST_OP, RKSMIN, RKSMAX, ISTNF, QS, QO, IP_KP, RKPKS,
     3 IX, XN, XV, RKPOLD, TEMPTS, TEMP2TS, IP_RRPO, IP_RRCO,
     4 ROPTY, ROPID, ARRAY, ITSIZE )
C
C    THIS IS THE EXECUTION ROUTINE FOR THE ASSIMILATOR
C    OPERATION. THIS ROUTINE HAS BEEN ADAPTED AFTER THE
C    ASSIMILATOR IN THE NILE FORECAST SYSTEM.
C
C    ROUTINE INITIALLY WRITTEN BY
C    ERIC MARKSTROM, RIVERSIDE TECHNOLOGY, INC. DECEMBER 1994 VERSION 1
C
C    PASSED ARGUMENTS
      INTEGER MP, MC, MT, MTS, MD, ITSIZE
      INTEGER T(MT)
      DIMENSION P(MP), C(MC), TS(MTS), D(MD),
     1 PO(*), IP_PR(*), IPR_IDT(*), WP_B(*), WP_B_PRD(*), WS_B(*),
     2 RKPMIN(*), RKPMAX(*), IST_OP(*), RKSMIN(*),  RKSMAX(*),
     3 ISTNF(*), QS(*), QO(*), IP_KP(*), RKPKS(*), IX(*), XN(*),
     4 XV(*), RKPOLD(*), TEMPTS(ITSIZE,ITSIZE), TEMP2TS(3,ITSIZE),
     5 IP_RRPO(*), IP_RRCO(*), ROPTY(*), ROPID(*)
      REAL*4 ARRAY(*)
      INCLUDE 'common/fcsgc1'
      INCLUDE 'common/ionum'
      INCLUDE 'common/fdbug'
      INCLUDE 'common/fctime'
      INCLUDE 'common/fcassm'
      INCLUDE 'common/fcary'
      INCLUDE 'common/where'

C    FCASSM - CONTAINS VARIABLES NEEDED FOR ASSIMILATOR OPERATION
C    INASSIM - 0 NOT CURRENTLY IN ASSIMILATOR - NEEDED FOR FDRIVE
C            - 1 CURRENTLY IN ASSIMILATOR - NEEDED FOR FDRIVE
C    ASSMRUN - 0 IGNORE THE ASSIMILATOR
C            - 1 RUN ASSIMILATOR, OPTIMIZING ON KP AND/OR KS
C            - 2 INCORPORATE RESULTS OF RUN ABOVE
C    ASSMPAR - 1 OPTIMIZE AND RUN USING KP'S ONLY
C            - 2 OPTIMIZE AND RUN USING KS'S ONLY
C            - 3 OPTIMIZE AND RUN USING KP'S AND KS'S
C    PRSEN   - 0 IGNORE PRECIP SENSITIVITY ANALYSIS
C            - 1 USE PRECIP SENSITIVITY ANALYSIS
C    KPTIME  - 0 USE KP'S VALUES OF PREVIOUS RUN
C            - 1 SET INITIAL VALUES OF KP'S TO 1
C    LWORKMX - TELLS LDRV50 IF IFILLC SHOULD EQUAL 0
C
C

C    LOCAL ARGUMENTS
      DIMENSION  ASSMID(2), SNAME(2), ANAME(2)
      CHARACTER*120 CLINE
      INTEGER NBASINS, NDP_PER_PRD, NDQ_PER_PRD, MOPT, IKS, ICSTNF,
     1 ISTART, IEND, NDAYS, NMISS_Q_DAYS, NQ_DAYS, NQ_PRDS,
     2 NPR_PRDS, IPR_EX_DAYS, NSIZE, ITER, IEX50, IAWARN

      REAL UZTWM, UZFWM, LZTWM, LZFSM, LZFPM

      REAL WQ, WP, WS, DELTF, VALUEF, QAVE
      
CHDH Added by Hank Herr to check on technique.
      CHARACTER*8 TECHNAME
      INTEGER IASSIM
C
C    ================================= RCS keyword statements ==========
      CHARACTER*68     RCSKW1,RCSKW2
      DATA             RCSKW1,RCSKW2 /                                 '
     .$Source: /fs/hseb/ob72/rfc/ofs/src/fcst_assim/RCS/ex50.f,v $
     . $',                                                             '
     .$Id: ex50.f,v 1.3 2004/06/23 13:44:03 hank Exp $
     . $' /
C    ===================================================================
C
      DATA ANAME /4HASSI,4HM   /
      DATA SNAME /4HEX50,4H    /
      DATA ASSM /4HASSM/

CCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCC  DEBUG INITIALIZATION
C
      CALL FOPCDE(ANAME, IEX50)
      CALL FPRBUG( SNAME, 1, IEX50, IBUG )


CHDH  Added by Hank Herr (2004-06-23).  
CHDH  The Assimilator cannot be used unless the ASSIM technique is 
CHDH  turned on.  This section handles it.
      TECHNAME='ASSIM'
      CALL HPAST (TECHNAME,IASSIM,ISTAT)
      IF (ISTAT.GT.0) CALL FPHPWN (ISTAT,TECHNAME)
      
      IF(IASSIM.EQ.0) THEN
        WRITE(IPR,7001) TECHNAME
7001    FORMAT('0**ERROR**  TECHNIQUE ',A,' IS NOT TURNED ON.')
        CALL ERROR
        GOTO 999
      ENDIF
      

C    IGNORE ASSIMILATOR
      IF (ASSMRUN.EQ.0) RETURN
C    CURRENTLY IN THE ASSIMILATOR
      INASSIM = 1
      LWORKMX = 0
      IAWARN = 0
C    RUN OUTPUT
      WRITE(IPR,701)
  701 FORMAT( /, 50X, 7HOPTIONS,
     1 /, 50X, 7H------- )

C    PRINT TYPE OF RUN
      IF (ASSMRUN.EQ.1) THEN
           WRITE(IPR,702)
  702      FORMAT( /, 50X, 16HOPTIMIZATION RUN )
      ELSE
           WRITE(IPR,703)
  703      FORMAT (/, 50X, 17HINCORPORATION RUN )
      END IF

C    PRINT PARAMETERS TO BE USED
      IF (ASSMPAR.EQ.1) THEN
          WRITE(IPR,704)
  704     FORMAT( /, 50X,
     1 40HUSING ONLY PRECIPITATION ANALYSIS IN RUN )

C        PRINTING OPTION ON SENSITIVITY ANALYSIS
          IF (PRSEN.EQ.1) THEN
              WRITE(IPR, 705)
  705         FORMAT(/,50X,
     1 37HPRECIPITATION SENSITIVITY ANAYLSIS ON )
          ELSE
              WRITE(IPR, 706)
  706         FORMAT(/,50X,
     1 38HPRECIPITATION SENSITIVITY ANALYSIS OFF )
          END IF

      ELSE IF (ASSMPAR.EQ.2) THEN
          WRITE(IPR,707)
  707     FORMAT( /, 50X,
     1 33HONLY USING STATES ANALYSIS IN RUN )
      ELSE
          WRITE(IPR,708)
  708     FORMAT( /, 50X,
     1  46HUSING PRECIPITATION AND STATES ANALYSIS IN RUN )

C         PRINTING OPTION ON SENSITIVITY ANALYSIS
           IF (PRSEN.EQ.1) THEN
               WRITE(IPR, 705)
           ELSE
               WRITE(IPR, 706)
           END IF
      END IF

C    PRINT KPTIME OPTION
      IF ((ASSMPAR.EQ.1).OR.(ASSMPAR.EQ.3)) THEN
         IF (KPTIME.EQ.1) THEN
            WRITE(IPR, 709)
  709       FORMAT( /, 50X,
     1 30HSETTING INITIAL KP VALUES TO 1 )
         ELSE
            WRITE(IPR, 710)
  710       FORMAT( /, 50X,
     1 39HUSING INITIAL KP VALUES OF PREVIOUS RUN )
         END IF
      END IF

C    INITIALIZE LOCAL VARIABLES WITH ASSIMILATOR PARAMETERS
C    FROM THE PO ARRAY
      ASSMID(1)  = PO(7)
      ASSMID(2)  = PO(8)
      NBASINS     = INT(PO(9))
      NDQ_PER_PRD = INT(PO(10))
      NDP_PER_PRD = INT(PO(11))
      WQ          = PO(12)
      WP          = PO(13)
      WS          = PO(14)
      MOPT        = INT(PO(21))
      DELTF       = PO(22)
      VALUEF      = PO(23)
      IF (IBUG.GE.1) THEN
        WRITE(IODBUG,732) ASSMID, NBASINS, NDQ_PER_PRD, NDP_PER_PRD
        WRITE(IODBUG,731) WQ, WP, WS
        WRITE(IODBUG,733)MOPT, DELTF, VALUEF
      END IF

      IKS = 0
      ICSTNF = 0
      DO I = 1, NBASINS
          WP_B(I)    =  PO(INT(PO(29)) + I-1)
          WS_B(I)    =  PO(INT(PO(30)) + I-1)
          RKPMIN(I)  =  PO(INT(PO(31)) + I-1)
          RKPMAX(I)  =  PO(INT(PO(32)) + I-1)
          IST_OP(I)  =  INT(PO(INT(PO(33)) + I-1))

           IF (IBUG.GE.1) THEN
             WRITE(IODBUG,*)
             WRITE(IODBUG,*)
             WRITE(IODBUG, *) 'BASIN #', I
             WRITE(IODBUG, 898)IP_RRPO(I), IP_RRCO(I),
     1  RKPMIN(I), RKPMAX(I), IST_OP(I)
  898        FORMAT(/,'POINTER TO PO OF RR MODEL ',I4,/,
     1 'POINTER TO CO OF RR MODEL ',I3, /,
     2 'KP MINIMUM VALUE ',F4.2,/,
     3 'KP MAXIMUM VALUE ',F4.2,/,
     4 'STATE OPTION ',I2,/ )
           END IF

C         SAC-SMA MULTIPLIER OPTION
          IF (IST_OP(I).EQ.1) THEN
              IKS = IKS + 1
              RKSMIN(IKS) = PO(INT(PO(34)) + IKS-1)
              RKSMAX(IKS) = PO(INT(PO(35)) + IKS-1)
C     SET KS MAX
        RKSTEMP = 99999.9
        UZTWM = P(INT(P(IP_RRPO(I)+19))+IP_RRPO(I)+1)
        IF ((C(IP_RRCO(I)+0)*RKSMAX(IKS)).GT.UZTWM)
     1 RKSTEMP = (UZTWM-0.01)/(C(IP_RRCO(I)+0))
        IF (RKSTEMP.LT.RKSMAX(IKS))RKSMAX(IKS)=RKSTEMP

        UZFWM = P(INT(P(IP_RRPO(I)+19))+IP_RRPO(I)+ 2)
        IF ((C(IP_RRCO(I)+1)*RKSMAX(IKS)).GT.UZFWM)
     1 RKSTEMP = (UZFWM-0.01)/C(IP_RRCO(I)+1)
        IF (RKSTEMP.LT.RKSMAX(IKS))RKSMAX(IKS)=RKSTEMP

        LZTWM = P(INT(P(IP_RRPO(I)+19))+IP_RRPO(I)+9)
        IF ((C(IP_RRCO(I)+2)*RKSMAX(IKS)).GT.LZTWM)
     1 RKSTEMP = (LZTWM-0.01)/C(IP_RRCO(I)+2)
        IF (RKSTEMP.LT.RKSMAX(IKS))RKSMAX(IKS)=RKSTEMP

        LZFSM = P(INT(P(IP_RRPO(I)+19))+IP_RRPO(I)+10)
        IF ((C(IP_RRCO(I)+3)*RKSMAX(IKS)).GT.LZFSM)
     1 RKSTEMP = (LZFSM-0.01)/C(IP_RRCO(I)+3)
        IF (RKSTEMP.LT.RKSMAX(IKS))RKSMAX(IKS)=RKSTEMP

        LZFPM = P(INT(P(IP_RRPO(I)+19))+IP_RRPO(I)+11)
        IF ((C(IP_RRCO(I)+4)*RKSMAX(IKS)).GT.LZFPM)
     1 RKSTEMP = (LZFPM-0.01)/C(IP_RRCO(I)+4)
        IF (RKSTEMP.LT.RKSMAX(IKS))RKSMAX(IKS)=RKSTEMP

        IF ((C(IP_RRCO(I)+5)*RKSMAX(IKS)).GT.(LZTWM+UZTWM))
     1 RKSTEMP = (LZTWM + UZTWM-0.01)/C(IP_RRCO(I)+5)
        IF (RKSTEMP.LT.RKSMAX(IKS))RKSMAX(IKS)=RKSTEMP

       IF (IBUG.GE.1) THEN
          WRITE(IODBUG,*) 'UZTWC MAX',C(IP_RRCO(I)+0),
     1 P(INT(P(IP_RRPO(I)+19))+IP_RRPO(I)+1)

          WRITE(IODBUG,*) 'UZFWC MAX',C(IP_RRCO(I)+1),
     1 P(INT(P(IP_RRPO(I)+19))+IP_RRPO(I)+ 2)

          WRITE(IODBUG,*) 'LZTWC MAX',C(IP_RRCO(I)+2),
     1 P(INT(P(IP_RRPO(I)+19))+IP_RRPO(I)+9)

          WRITE(IODBUG,*) 'LZFSM MAX',C(IP_RRCO(I)+3),
     1 P(INT(P(IP_RRPO(I)+19))+IP_RRPO(I)+10)

          WRITE(IODBUG,*) 'LZFPM MAX',C(IP_RRCO(I)+4),
     1 P(INT(P(IP_RRPO(I)+19))+IP_RRPO(I)+11)

          WRITE(IPR,*) 'ADIMC MAX',C(IP_RRCO(I)+5),
     1 P(INT(P(IP_RRPO(I)+19))+IP_RRPO(I)+9) +
     2 P(INT(P(IP_RRPO(I)+19))+IP_RRPO(I)+1)
        END IF

              IF (IBUG.GE.1) THEN
                 WRITE(IODBUG,897) RKSMIN(IKS), RKSMAX(IKS)
  897            FORMAT(/,'KS MINIMUM VALUE ', F4.2, /,
     1 'KS MAXIMUM VALUE ',F4.2,/)
              END IF
              DO J = 1, 6
                  ICSTNF = ICSTNF + 1
                  ISTNF(ICSTNF)  = PO(INT(PO(36)) + ICSTNF-1)
              END DO
              IF (IBUG.GE.1) THEN
                 WRITE(IODBUG,896) (ISTNF(II),II=ICSTNF-5,ICSTNF)
  896            FORMAT(/,6(/,'STATE ON/OFF SWITCH ',I2))
              END IF
          END IF

C         OTHER RAINFALL/RUNOFF OPTIONS GO HERE

      END DO

C    GET TIMING INFORMATION AND KS INFORMATION
C    ERROR CHECKING

      LARRAY = 100
      IPTR = 0
      CALL RPPREC( ASSMID, ASSM, IPTR, LARRAY, ARRAY,
     1 NFILL, IPTRNX, ISTAT )
      IF (IBUG.GE.1) THEN
        WRITE(IODBUG,*) 'STATUS OF RPPREC', ISTAT
      END IF

      IF (ISTAT.NE.0) THEN
          WRITE(IPR,901)
  901     FORMAT( /, 10X, 10H**ERROR** ,
     1 38HPROBLEMS READING ASSM PARAMETER RECORD )
          CALL ERROR
          DO I = 1, NBASINS
              ARRAY(18 + (I-1)*6 ) = 1.0
          END DO
      END IF

C    OPTIMIZE RUN - CHECK IF KS NOT MISSING
      IF (ASSMRUN.EQ.1) THEN
        ITEST = IFMSNG(ARRAY(18))
        IF (ITEST.EQ.0) THEN            !! KS NOT MISSING
          WRITE(IPR,910)
  910     FORMAT(/, 10X, 12H**WARNING** ,
     1 'THIS IS AN OPTIMIZATION RUN AND KS ',
     2 'VALUES ARE NOT MISSING - SETTING ALL ',
     3 'PREVIOUS, KP VALUES TO 1 ',
     4 'KS VALUES TO 1' )
          DO I = 1, NBASINS
              ARRAY(18 + (I-1)*6 ) = 1.0
          END DO
          KPTIME = 1
          CALL WARN
        END IF
      END IF

C    INCORPORATE RUN  - CHECKS
      IF (ASSMRUN.EQ.2) THEN

C      CHECK IF KS IS MISSING
        ITEST = IFMSNG(ARRAY(18))
        IF (ITEST.EQ.1) THEN            !! KS MISSING
          WRITE(IPR,913)
  913     FORMAT(/, 10X, 12H**WARNING** ,
     1 'THIS IS AN INCORPORATION RUN AND KS ',
     2 'VALUES ARE MISSING - SETTING ALL ',
     3 'KS VALUES TO 1' )
          DO I = 1, NBASINS
              ARRAY(18 + (I-1)*6 ) = 1.0
          END DO
          IAWARN = 1
          CALL WARN
        END IF




C      CHECK IF CO IS BEING SAVED
        IF (NCSTOR.EQ.0) THEN
          WRITE(IPR,911)
  911     FORMAT(/, 10X, 12H**WARNING** ,
     1 'THIS IS AN INCORPORATION RUN AND ',
     2 'CARRYOVER IS NOT BEING SAVED' )
          IAWARN = 1
          CALL WARN
        END IF

        ITEMP = INT(ARRAY(11))
        IF (ITEMP.NE.IDARUN) THEN
          WRITE(IPR,912)
  912     FORMAT(1H0, 10X, 12H**WARNING** ,
     1 'THIS IS AN INCORPORATION RUN AND ',
     2 'IDARUN IS NOT THE SAME AS IDARUN ',
     3 'ON THE PARAMETER RECORD, KS VALUES ',
     4 'SET TO 1'  )
          IAWARN = 1
          DO I = 1, NBASINS
              ARRAY(18 + (I-1)*6 ) = 1.0
          END DO
          CALL WARN
        END IF

        IF (INT(ARRAY(8)).LT.ICOWCT(3)) THEN !!! YEAR ERROR
          WRITE(IPR,904)
  904     FORMAT( 1H0, 10X, 12H**WARNING** ,
     1 ' INCORPORATE RUN AND CARRYOVER YEAR MORE ',
     2 ' HRECENT THAN ASSM RECORDS YEAR TIME' )
          CALL WARN
          IAWARN = 1
          DO I = 1, NBASINS
              ARRAY(18 + (I-1)*6 ) = 1.0
          END DO
        ELSE IF (INT(ARRAY(8)).EQ.ICOWCT(3)) THEN !!! YEAR EQUAL
          IF (INT(ARRAY(6)).LT.ICOWCT(1)) THEN !!! MONTH ERROR
            WRITE(IPR,905)
  905       FORMAT( 1H0, 10X, 12H**WARNING** ,
     1 'INCORPORATE RUN, CARRYOVER MONTH MORE ',
     2 ' RECENT THAN ASSM RECORDS MONTH TIME' )
            CALL WARN
            IAWARN = 1
            DO I = 1, NBASINS
              ARRAY(18 + (I-1)*6 ) = 1.0
            END DO
          ELSE IF (INT(ARRAY(6)).EQ.ICOWCT(1)) THEN !!! MONTH EQUAL
            IF (INT(ARRAY(7)).LT.ICOWCT(2)) THEN !!! DAY ERROR
              WRITE(IPR,906)
  906         FORMAT( 1H0, 10X, 12H**WARNING** ,
     1 'INCORPORATE RUN, CARRYOVER DAY MORE ' ,
     2 'RECENT THAN ASSM RECORDS DAY TIME' )
              CALL WARN
              IAWARN = 1
              DO I = 1, NBASINS
                ARRAY(18 + (I-1)*6 ) = 1.0
              END DO
            ELSE IF (INT(ARRAY(7)).EQ.ICOWCT(2)) THEN !!! DAY EQUAL
              IF (INT(ARRAY(9)).LT.ICOWCT(4)) THEN !!! HR/MIN ERROR
                WRITE(IPR,907)
  907           FORMAT( 1H0, 10X, 12H**WARNING** ,
     1 'INCORPORATE RUN, CARRYOVER HR/MIN MORE ',
     2 'RECENT THAN ASSM RECORDS HR/MIN TIME' )
                CALL WARN
                IAWARN = 1
                DO I = 1, NBASINS
                  ARRAY(18 + (I-1)*6 ) = 1.0
                END DO
              ELSE IF (INT(ARRAY(9)).EQ.ICOWCT(4)) THEN !HR/MIN EQUAL
                IF (INT(ARRAY(10)).LE.ICOWCT(5)) THEN !SEC/MSEC ERROR
                  WRITE(IPR,908)
  908             FORMAT( 1H0, 10X, 12H**WARNING** ,
     1 'INCORPORATE RUN, CARRYOVER SEC/MSEC MORE ',
     2 'RECENT THAN ASSM RECORDS SEC/MSEC TIME' )
                  CALL WARN
                  IAWARN = 1
                  DO I = 1, NBASINS
                    ARRAY(18 + (I-1)*6 ) = 1.0
                 END DO
                END IF
              END IF
            END IF
          END IF
        END IF
      END IF


C    NORMALIZE THE WEIGHTS OF THE BASIN PRECIPITATION TERMS
      IF ((ASSMPAR.EQ.1).OR.(ASSMPAR.EQ.3)) THEN
          CALL NMZE50( NBASINS, WP_B )
      END IF

C    NORMALIZE THE WEIGHTS OF THE BASIN STATE TERMS
      IF ((ASSMPAR.EQ.2).OR.(ASSMPAR.EQ.3)) THEN
          CALL NMZE50( NBASINS, WS_B )
      END IF

C
C    CALCULATE VARIABLES TO BE TO BE USED THROUGHOUT
C    AND NEED BE CALCULATED ONLY ONCE
C

C    START AND END INDEXES
      ISTART = IDA - IDADAT + 1
      IEND   = LDA - IDADAT + 1

C    TOTAL NUMBER OF DAYS
      NDAYS = LDA - IDA + 1

      IF (IBUG.GE.1) THEN
          WRITE(IODBUG, 803) ISTART, IEND, NDAYS
  803 FORMAT(/, 'STARTING INDEX ',I5, /,
     1 'ENDING INDEX ',I5, /,
     2 'NUMBER OF DAYS ', I3)
      END IF


C    CALCULATE NUMBER OF MISSING DAYS IN OBS Q T.S.
      CALL NMSQ50( QO, ISTART, IEND, NMISS_Q_DAYS, QAVE )

      IF (IBUG.GE.1) THEN
          WRITE(IODBUG, 804) NMISS_Q_DAYS, QAVE
  804 FORMAT(/,
     1 'NUMBER OF MISSING DAYS IN OBSERVED Q TIME SERIES ',
     2 I5, /, 'AVERAGE VALUE OF OBSERVED Q TIME SERIES ',
     3 F6.2 )
      END IF

C    CHECK TO MAKE SURE AT LEAST 70% OF OBSERVED DISCHARGE
C    DATA IS AVAILABLE
      IF ((NMISS_Q_DAYS/REAL(NDAYS)).GT.(0.30)) THEN
         WRITE( IPR, 909 )
  909    FORMAT( 1H0, 10X, 12H**WARNING** ,
     1 48HTHERE MUST BE AT LEAST 70% OF OBSERVED DISCHARGE,
     2 42HDATA FOR THE ASSIMILATOR TO BE OPERATIONAL )
         CALL WARN
         IAWARN = 1
         RETURN
      END IF

C    CALCULATE NUMBER OF DAYS OBSERVED DISCHARGE OF DATA
      NQ_DAYS = NDAYS - NMISS_Q_DAYS

C    CALCULATE NUMBER OF DISCHARGE PERIODS TO SUM OVER
      NQ_PRDS = NQ_DAYS / NDQ_PER_PRD

      IF (IBUG.GE.1) THEN
         WRITE(IODBUG, 805) NQ_DAYS, NQ_PRDS
  805 FORMAT(/,
     1 'NUMBER OF DAYS WE HAVE DATA IN OBSERVED Q TS ', I3,
     2 /,'NUMBER OF CALCULATED DISCHARGE PERIODS ', I3 )
      END IF

      IF ((ASSMPAR.EQ.1).OR.(ASSMPAR.EQ.3)) THEN
C        CALCULATE NUMBER PRECIPITATION PERIODS TO SUM OVER
          NPR_PRDS = NDAYS / NDP_PER_PRD

C        CALCULATE NUMBER OF EXTRA DAYS OF PRECIP TO BE
C        ADDED TO LAST PRECIP PERIOD
          IPR_EX_DAYS = MOD( NDAYS, NDP_PER_PRD )

C        RUN SENSITIVITY ANALYSIS TO CALCULATE WP_B_PRD'S
          IF (PRSEN.EQ.1) THEN
            CALL PRSN50( P,MP,C,MC,T,MT,TS,MTS,D,MD,IHZERO,
     1 QS, QO, NDAYS, WQ, NDQ_PER_PRD, NQ_PRDS, ISTART,
     2 NBASINS, NPR_PRDS, IP_PR, IPR_IDT, NDP_PER_PRD,
     3 WP_B, WP_B_PRD, QAVE )
          ELSE
           CALL NPRS50(WP_B, WP_B_PRD, NBASINS, NPR_PRDS )
          END IF
      ELSE
          NPR_PRDS = 0
      END IF

      IF (IBUG.GE.1) THEN
         WRITE(IODBUG, 806) NPR_PRDS, IPR_EX_DAYS
  806    FORMAT(/,
     1 'NUMBER OF CALCULATED PRECIPITATION PERIODS ', I3, /,
     2 'NUMBER OF EXTRA DAYS FOR LAST PERIOD ', I3 )
      END IF

      IF (IBUG.GE.1) THEN
         WRITE(IODBUG, 807) (WP_B_PRD(I),I=1,(NPR_PRDS*NBASINS))
  807    FORMAT(/, 9H WP_B_PRD,50(1X,F4.2))
      END IF

C    BUNDLE KP + KS ARRAYS INTO ONE ARRAY KPKS
C    AND RETURN IT'S SIZE
      CALL BKPS50( NBASINS, ISTART, NPR_PRDS,
     1 NDP_PER_PRD, D, IP_KP, RKPKS, IPR_EX_DAYS, RKPMIN,
     2 RKPMAX, RKSMIN, RKSMAX, NSIZE, IST_OP, IX, XN, XV,
     3 RKPOLD, ARRAY )

      IF (IBUG.GE.1) THEN
        WRITE(IODBUG, 808) NSIZE
  808    FORMAT(/, 6H NSIZE,I3)
        WRITE(IODBUG, 809) (RKPKS(I),I=1,NSIZE)
  809    FORMAT(/, 6H RKPKS,50(1X,F4.2))
        WRITE(IODBUG, 810) (IX(I),I=1,NSIZE)
  810    FORMAT(/, 3H IX,50(1X,I2))
        WRITE(IODBUG, 811) (XN(I),I=1,NSIZE)
  811    FORMAT(/, 3H XN,50(1X,F4.2))
        WRITE(IODBUG, 812) (XV(I),I=1,NSIZE)
  812    FORMAT(/, 3H XV,50(1X,F4.2))
        WRITE(IODBUG, 813) (RKPOLD(I),I=1,NSIZE-NBASINS)
  813    FORMAT(/, 7H RKPOLD,50(1X,F4.2))
      END IF



C    RUN OPTIMIZER AND UPDATE KP AND KS VALUES
      IF (ASSMRUN.EQ.1) THEN

      CALL LDRV50(P,MP,C,MC,T,MT,TS,MTS,D,MD,IHZERO)

      VALUE = FCAL50(  QS, QO, NDAYS, WQ, NDQ_PER_PRD,
     1 NQ_PRDS, ISTART, QAVE, RKPKS, NBASINS, NPR_PRDS,
     2 RKPOLD, WP_B_PRD, WP, WS_B, WS, IST_OP, FQ, FP, FS )

      WRITE(IPR,*) 'BEFORE ASSIMILATOR RUN'
      WRITE(IPR,800) VALUE, FQ, FP, FS
  800 FORMAT (1X,'OBJECTIVE VALUE ', F9.6, 5X,
     1 'DISCHARGE CONTRIBUTION ', F9.6, 5X,
     2 'PRECIPITATION CONTRIBUTION ', F9.6, 5X,
     3 'STATES CONTRIBUTION ', F9.6, /, /, / )

         CALL OPMK50( NSIZE, RKPKS, TEMPTS, TEMP2TS, ITER, MOPT,
     1 DELTF, VALUEF, IX, XN, XV,
     2 NBASINS, NPR_PRDS, NDP_PER_PRD, IP_PR, IPR_IDT, D, IST_OP,
     3 ISTNF, C, IP_RRCO, QS, QO, NDAYS, WQ, NDQ_PER_PRD, NQ_PRDS,
     4 ISTART, QAVE, RKPOLD, WP_B_PRD, WP, WS_B, WS, P,
     5 MP, MC, T, MT, TS, MTS, MD, IHZERO, IP_RRPO, ITSIZE )

      INV = 0

      IF ((ASSMPAR.EQ.1).OR.(ASSMPAR.EQ.3)) THEN
         CALL MDPR50( NBASINS, NPR_PRDS, NDP_PER_PRD,
     1 IP_PR, IPR_IDT, D, RKPKS, INV )
      END IF

      IF ((ASSMPAR.EQ.2).OR.(ASSMPAR.EQ.3)) THEN
         CALL MDST50( NBASINS, IST_OP, ISTNF, C, IP_RRCO,
     1 NPR_PRDS, RKPKS, IP_RRPO, P, INV )
      END IF

      LWORKMX=1
      CALL LDRV50(P,MP,C,MC,T,MT,TS,MTS,D,MD,IHZERO)

      VALUE = FCAL50(  QS, QO, NDAYS, WQ, NDQ_PER_PRD,
     1 NQ_PRDS, ISTART, QAVE, RKPKS, NBASINS, NPR_PRDS,
     2 RKPOLD, WP_B_PRD, WP, WS_B, WS, IST_OP, FQ, FP, FS )

      WRITE(IPR,*) 'AFTER ASSIMILATOR RUN'
      WRITE(IPR,800) VALUE, FQ, FP, FS

          IF (IBUG.GE.1) THEN
             WRITE(IODBUG, 814) (RKPKS(I),I=1,NSIZE)
  814        FORMAT(/, 15HRKPKS AFTER OPT,50(1X,F4.2))
          END IF

         IF ((ASSMPAR.EQ.1).OR.(ASSMPAR.EQ.3)) THEN
           CALL UPKP50( ISTART, NBASINS, NPR_PRDS,
     1 NDP_PER_PRD, D, IP_KP, RKPKS, IPR_EX_DAYS )
         END IF

        CALL UPKS50( ASSMID, NBASINS, ROPTY, ROPID,
     1 IST_OP, RKPKS, NPR_PRDS, ARRAY )

      ELSE
C         SAVE RUN
           CALL SVRN50( VALUE, NBASINS, NPR_PRDS, NDP_PER_PRD,
     1 IP_PR, IPR_IDT, D, RKPKS, IST_OP, ISTNF, C, IP_RRCO, QS, QO,
     2 NDAYS, WQ, NDQ_PER_PRD,  NQ_PRDS, ISTART, QAVE, RKPOLD,
     3 WP_B_PRD, WP, WS_B, WS, P, MP, MC, T, MT, TS, MTS,
     4 MD, IHZERO, IP_RRPO, IAWARN, ARRAY, ASSMID )

      END IF

C    WE ARE LEAVING THE ASSIMILATOR
      INASSIM = 0

C    PRINT GENERAL INFO
      WRITE(IPR,732) ASSMID, NBASINS, NDQ_PER_PRD, NDP_PER_PRD
  732 FORMAT(/,
     1 'ASSIMILATOR PARAMETRIC ID ', 2A4, /,
     2 'NUMBER OF SUB BASINS ', I2, /,
     3 'NUMBER OF DAYS PER DISCHARGE PERIOD ', I2, /,
     4 'NUMBER OF DAYS PER PRECIPITATION PERIOD ',I2 ,/)

      WRITE(IPR,733)MOPT, DELTF, VALUEF
  733 FORMAT( /, 'OPTIMIZER PARAMETERS ',
     1 'STOPPING CONDITIONS',/ ,
     1 'MAXIMUM NUMBER OF ITERATIONS ',I4,/,
     2 'MINIMUM PERCENTAGE OF CHANGE IN OBJECTIVE FUNCTION ',
     3 F8.6, /'MINIMUM CRITERIA VALUE ',F6.4 )

C    PRINT GENERAL WEIGHTS
      WRITE(IPR,731) WQ, WP, WS
  731 FORMAT( /, 'GENERAL WEIGHTS',/,
     1 'WQ WEIGHT ',F4.2, /
     2 'WP WEIGHT ',F4.2, /
     3 'WS WEIGHT ',F4.2/)

C    PRINT BASIN WEIGHTS AFTER NORMALIZATION

      WRITE(IPR,711)
  711 FORMAT(/, 33HBASIN WEIGHTS AFTER NORMALIZATION )

      IF (ASSMPAR.EQ.1) THEN
         WRITE(IPR,712)'WP_B AFTER NORMALIZATION |'
      ELSE IF (ASSMPAR.EQ.2) THEN
         WRITE(IPR,712)'WS_B AFTER NORMALIZATION |'
      ELSE
         WRITE(IPR,712) 'WP_B AFTER NORMALIZATION |',
     1 'WS_B AFTER NORMALIZATION |'
      END IF
  712 FORMAT(/, 7HBASIN |, 2(1X,A26))


      IF ((ASSMPAR.EQ.1).OR.(ASSMPAR.EQ.2)) THEN
         WRITE(IPR,713)
      ELSE
        WRITE(IPR,713) '-------------------------------'
      END IF
  713 FORMAT(31H-------------------------------, A31 )

      DO I=1, NBASINS
       IF (ASSMPAR.EQ.1) THEN
          WRITE(IPR,714) I, WP_B(I)
        ELSE IF (ASSMPAR.EQ.2) THEN
          WRITE(IPR,714) I, WS_B(I)
        ELSE
          WRITE(IPR,714) I, WP_B(I), WS_B(I)
        END IF
      END DO
  714 FORMAT(2X,I2,3H  |,2(11X,F4.2,11X,1H|))


C    PRINT BASIN WEIGHTS AFTER PRECIPITATION SENSITIVITY ANALYSIS
      IF (PRSEN.EQ.1) THEN
        WRITE(IPR,715)
        WRITE(IPR,716) (I,I=1,NPR_PRDS)
        DO I=1,NBASINS
            WRITE(IPR,717) '---------------',('---------',
     1 J=1,NPR_PRDS)
            WRITE(IPR,718) I, (WP_B_PRD(J+(I-1)*NPR_PRDS),
     1 J=1,NPR_PRDS)
        END DO
      END IF
  715 FORMAT(/, 20HBASIN WEIGHTS AFTER ,
     1 34HPRECIPITATION SENSITIVITY ANALYSIS )
  716 FORMAT(/,' BASIN/PERIOD |', 15(3X,I2,'   |'))
  717 FORMAT(A15,10(9A))
  718 FORMAT(6X,I2,6X,'|',10(2X,F4.2,2X,'|'))
C   PRINT KP AND KS INFORMATION

         WRITE(IPR,719)
  719 FORMAT(/,/,36HKP AND KS INFORMATION FOR EACH BASIN )

C    PRINT KP AND KS INFORMATION IF ASSMRUN = 1
      IF (ASSMRUN.EQ.1) THEN
         DO I = 1,NBASINS
            WRITE(IPR,720) I
  720 FORMAT(/,40H----------------------------------------,/
     1 7HBASIN #,I2 )

           IF ((ASSMPAR.EQ.2).OR.(ASSMPAR.EQ.3)) THEN
              WRITE(IPR,721) RKPKS(NPR_PRDS*NBASINS + I)
  721          FORMAT(/,13HKS AFTER RUN , F4.2, /)
           END IF

           IF ((ASSMPAR.EQ.1).OR.(ASSMPAR.EQ.3)) THEN
              WRITE(IPR,722) (J,J=1,NPR_PRDS)
  722 FORMAT('PERIOD',8X, '|', 15(3X,I2,'   |'))

              WRITE(IPR,723) '---------------',
     1 ('---------',J=1,NPR_PRDS)
  723 FORMAT(A15,10(A9))

              WRITE(IPR,724) (RKPOLD(J+(I-1)*NPR_PRDS),J=1,NPR_PRDS)
  724 FORMAT('KP BEFORE RUN',1X,'|',10(2X,F4.2,2X,'|'))

              WRITE(IPR,725) '---------------',
     1 ('---------',J=1,NPR_PRDS)
  725 FORMAT(A15,10(A9))

              WRITE(IPR,726) (RKPKS(J+(I-1)*NPR_PRDS),J=1,NPR_PRDS)
  726 FORMAT('KP AFTER  RUN',1X,'|',10(2X,F4.2,2X,'|'))
           END IF
         END DO
      END IF



C    PRINT KP AND KS INFORMATION IF ASSMRUN = 2
      IF (ASSMRUN.EQ.2) THEN

         DO I = 1, NBASINS
             WRITE(IPR,720) I
             IF ((ASSMPAR.EQ.2).OR.(ASSMPAR.EQ.3)) THEN
               WRITE(IPR,727) RKPKS(NBASINS*NPR_PRDS + I)
  727          FORMAT(/,9HKS VALUE , F4.2,/)
             END IF

             IF ((ASSMPAR.EQ.1).OR.(ASSMPAR.EQ.3)) THEN
               WRITE(IPR,728) (J,J=1,NPR_PRDS)
  728          FORMAT('PERIOD',4X, '|', 15(3X,I2,'   |'))

               WRITE(IPR,729) '-----------',
     1 ('---------',J=1,NPR_PRDS)
  729 FORMAT(A11,10(A9))

               WRITE(IPR,730) (RKPKS(J+(I-1)*NPR_PRDS),
     1 J=1,NPR_PRDS)
  730          FORMAT('KP VALUES',1X,'|',
     1 10(2X,F4.2,2X,'|'))
            END IF

         END DO
      END IF

999    RETURN
       END
