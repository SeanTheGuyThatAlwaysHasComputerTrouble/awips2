C MODULE QINSTM
C-----------------------------------------------------------------------
C
C  ROUTINE QINSTM CONVERTS OBSERVED INSTANTANEOUS DATA INTO
C  A TIME SERIES FOR DATA TYPES THAT DO NOT ALLOW MISSING DATA
C
C- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C
C  INPUT ARGUMENTS:
C        STAID  - STATION IDENTIFIER
C        DTYPE  - DATA TYPE CODE
C        UNITOT - DATA OUTPUT UNITS
C        NCOUNT - NUMBER OF OBS TIMES THE NUMBER OF VALUES PER OBS
C        LOBS   - LENGTH OF OBSERVED DATA ARRAY
C        OBS    - OBSERVED DATA ARRAY
C        FHOUR  - FIRST HOUR OF OBS DATA
C        LHOUR  - LAST HOUR OF OBS DATA
C        IOBS   - INTEGER PORTION OF OBS ARRAY
C        LWORK  - LENGTH OF WORK ARRAY
C        WORK   - WORK ARRAY
C        LWKBUF - LENGTH OF IWKBUF ARRAY
C        IWKBUF - WORK ARRAY USED IN WRITING TO THE PDB
C        INTVAL - TIME INTERVAL
C        INTERP - INTERPOLATION OPTION:
C                  0 = RETAIN PREVIOUS OBSERVATION
C                  1 = LINEAR INTERPOLATE
C        EXTRP  - RECESSION CONSTANT
C        LTSDAT - LENGTH OF TSDAT ARRAY
C        IREC   - RECORD NUMBER OF TIME SERIES IN PROCESSED DATA BASE
C        AINIT  - VALUE USED TO INITIALIZE TIME SERIES AND WORK ARRAYS
C        LERDTP - LENGTH OF ARRAY ERDTP
C         ERDTP - ARRAY OF DATA TYPES WITH ERRORS
C        NERDTP - NUMBER OF DATA TYPES IN ARRAY ERDTP
C
C  OUTPUT ARGUMENTS:
C        JHOUR  - FIRST HOUR OF DATA IN TSDAT
C        TSDAT  - TIME SERIES DATA ARRAY
C        NSTEP  - NUMBER OF TIME STEPS
C        IERR   - LENGTH OF WORK ARRAY EXCEEDED
C
C- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C
      SUBROUTINE QINSTM (STAID,DTYPE,INTVAL,
     *   UNITOT,NCOUNT,LOBS,OBS,IOBS,FHOUR,LHOUR,
     *   LWORK,WORK,LWKBUF,IWKBUF,
     *   INTERP,EXTRP,LTSDAT,TSDAT,JHOUR,NSTEP,IREC,
     *   AINIT,LERDTP,ERDTP,NERDTP,IERR)
C
      CHARACTER*4 DTYPE
      CHARACTER*8 STAID
      CHARACTER*20 STRING
      INTEGER FHOUR
C
      DIMENSION OBS(LOBS),IOBS(LOBS)
      DIMENSION WORK(LWORK),TSDAT(LTSDAT),IWKBUF(LWKBUF),ERDTP(LERDTP)
      DIMENSION OLDOPN(2)
C
      INCLUDE 'common/ionum'
      INCLUDE 'common/fctim2'
      INCLUDE 'common/pudbug'
      INCLUDE 'common/pptime'
      INCLUDE 'prdcommon/pdatas'
C
C    ================================= RCS keyword statements ==========
      CHARACTER*68     RCSKW1,RCSKW2
      DATA             RCSKW1,RCSKW2 /                                 '
     .$Source: /fs/hseb/ob72/rfc/ofs/src/fcst_rrs/RCS/qinstm.f,v $
     . $',                                                             '
     .$Id: qinstm.f,v 1.8 1999/07/06 15:55:38 page Exp $
     . $' /
C    ===================================================================
C
C
      IERR=0
      RMISS=-999.
      NUM=1
      IRPRD=0
C
      IOPNUM=-3
      CALL FSTWHR ('QINSTM  ',IOPNUM,OLDOPN,IOLDOP)
C
      IF (IPTRCE.GT.0) WRITE (IOPDBG,200)
C
C  CHECK DEBUG CODES
      IBUG=IPBUG('QINM')
C
      IF (STAID.EQ.' ') THEN
         IBUG=1
         ENDIF      
C
      IF (IBUG.GT.0) THEN
         WRITE (IOPDBG,*) 'NCOUNT=',NCOUNT
         IF (NCOUNT.GT.0) THEN
            WRITE (IOPDBG,250)
            WRITE (IOPDBG,260) (IOBS(I),OBS(I+1),I=1,NCOUNT,2)
            ENDIF
         WRITE (IOPDBG,*) 'INTERP=',INTERP         
         ENDIF
C
C  DETERMINE THE NUMBER OF TIME STEPS TO PROCESS
      NSTEP=((IDERUN-IDSRUN)+1)/INTVAL
      IF (IBUG.GT.0) WRITE (IOPDBG,*) 'NSTEP=',NSTEP
C
C  IF NO DATA WERE RETURNED AND MISSING DATA ARE NOT ALLOWED - READ
C  THE PDB AND EXTRAPOLATE THE PREVIOUS VALUE
C  (ALSO HERE IF SOME OBS WERE READ FROM THE PPDB BUT WERE SET TO
C  MISSING BY MODS AND NOW NO NON-MISSING VALUES WERE FOUND)
      IF (NCOUNT.GT.0) GO TO 50
C
20    JHOUR=IDSRUN+NHOPDB
      IDATIM=(IDSRUN)/24+1
      IHRTIM=MOD(IDSRUN,24)
C
      LPREOBS=1
      CALL RPRDD (STAID,DTYPE,JHOUR,INTVAL,NUM,UNITOT,RMISS,
     *   LPREOBS,PREOBS,IFUT,LWKBUF,IWKBUF,ISTAT)
C
      IF (ISTAT.EQ.0.OR.ISTAT.EQ.2) GO TO 30
C
C  ERROR IN READING THAT ONE TIME PERIOD OF DATA
      CALL QSRPRD (ISTAT,STAID,DTYPE,IDSRUN,INTVAL,
     *   NUM,UNITOT,RMISS,LWKBUF,LPREOBS)
      CALL MDYH2 (IDATIM,IHRTIM,IM,ID,IY,IH,NZXXX,NDXXX,INPTZC)
      WRITE (IPR,300) STAID,DTYPE,IM,ID,IY,IH,INPTZC
      GO TO 190
C
C  DATA IN FIRST TIME PERIOD OF RUN IS MISSING. PRINT ERROR AND EXIT.
30    IF (IFMSNG(PREOBS).EQ.0) GO TO 40
      CALL MDYH2 (IDATIM,IHRTIM,IM,ID,IY,IH,NZXXX,NDXXX,INPTZC)
      WRITE (IPR,310) STAID,DTYPE,IM,ID,IY,IH,INPTZC
      CALL ERROR
      GO TO 190
C
C  EXTRAPOLATE VALUE FROM TIME-SERIES FOR ENTIRE RUN PERIOD
40    NTIMES=(IDERUN-IDSRUN)/INTVAL
      CALL QEXTRP (PREOBS,EXTRP,INTVAL,TSDAT(1),NTIMES)
      GO TO 170
C
C- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C
C  IN THIS PART WE HAVE OBSERVED DATA SOMEWHERE IN THE PERIOD OF
C  OBSERVED DATA REQUESTED FROM THE PREPROCESSOR DATABASE.  IT'S
C  JUST A MATTER OF USING THOSE VALUES (AND POSSIBLY ONE FROM THE
C  PROCESSED DATA BASE) TO FILL IN ANY MISSING VALUES AT THE
C  TIME INTERVALS TO BE OUTPUT TO THE PROCESSED DATA BASE.
C
C  FIRST STEP - LOAD THE WORK ARRAY WITH ALL THE OBSERVATIONS AT THEIR
C  PROPER LOCATIONS.  PLEASE NOTE THAT THE WORK ARRAY IS FILLED
C  RELATIVE TO THE FIRST PERIOD OF OBSERVED DATA OR THE START OF
C  THE RUN, WHICHEVER IS EARLIER.  THE ARRAY HOLDING THE TIME-SERIES
C  VALUES TO BE OUTPUT STARTS AT THE FIRST PERIOD AFTER THE START
C  OF THE RUN.  TO MAKE THESE TWO ARRAYS COMPATIBLE, WE HAVE TO
C  DETERMINE THE OFFSET BETWEEN THE TWO TIMES FOR LATER USE.
C
C  ALSO NOTE THAT THE WORK ARRAY IS HOURLY AND THE TIME-SERIES ARRAY
C  IS BASED ON THE TIME-SERIES TIME INTERVAL.
C
50    ISTART=IDSRUN
      IF (IDSRUN.GT.FHOUR) ISTART=FHOUR
C
      NONMSG=0
      DO 70 L=1,NCOUNT,2
         ITIME=IOBS(L)-NHOPDB
         DATA=OBS(L+1)
C     DETERMINE WHERE IN THE WORK ARRAY TO WRITE THE VALUES
         IWRITE=ITIME-ISTART+1
C     CHECK IF WRITE LOCATION IS WITHIN BOUNDS OF WORK ARRAY.
         IF (IWRITE.LE.LWORK) GO TO 60
            WRITE (IPR,240) DTYPE,STAID,IWRITE,LWORK
            CALL ERROR
            IERR=1
            GO TO 190
C     IF THE VALUE IN THE WORK ARRAY HAS NOT BEEN SET TO MISSING,
C     WRITE THE OBSERVED VALUE TO THE WORK ARRAY
C     CHECK IF OBS FOR PERIOD WAS SET TO MISSING BY MODS
60       IF (IFMSNG(WORK(IWRITE)).EQ.1) GO TO 70
            WORK(IWRITE)=DATA
            NONMSG=NONMSG+1
            IF (IBUG.GT.0) WRITE (IOPDBG,230) IWRITE,WORK(IWRITE)
70       CONTINUE
C
C  IF NO NON-MISSING OBSERVATIONS FOUND, TREAT IT AS IF NO OBS
C  WERE FOUND IN PPDB READ
      IF (NONMSG.EQ.0) GO TO 20
C
      ILAST=IWRITE
C
C- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C
C  ALL OBSERVED DATA HAS NOW BEEN LOADED INTO THE WORK ARRAY AT THE
C  PROPER TIME PERIOD LOCATIONS (WORK IS AN HOURLY ARRAY).  HERE
C  WE LOOP THROUGH ALL THE TIME-SERIES TIME STEPS (TSDAT IS ON
C  THE TIME-SERIES TIME INTERVAL BASIS), LOADING A VALUE INTO
C  THE TIME-SERIES ARRAY.  SINCE NO MISSING IS ALLOWED, WHENEVER
C  NO OBSERVATION OCCURS AT THE TIME-SERIES TIME INTERVAL, STEPS
C  MUST BE TAKEN TO FILL IN THOSE MISSING GAPS.  IF THE OBS IS
C  MISSING AT THE TIME-SERIES TIME PERIOD, THESE STEPS ARE
C  TAKEN (PLEASE NOTE THAT ONE OF THESE SITUATIONS MUST OCCUR AS AT
C  LEAST ONE OBSERVATION EXISTS IN THE PERIOD IN QUESTION AND THAT
C  WHEN NO OBS ARE FOUND BEFORE THE PERIOD IN QUESTION, THE
C  TIME-SERIES CAN BE READ FOR THE PERIOD AT THE START OF THE RUN
C  FOR USE IN FILLING THE GAPS) :
C
C   1. OBS OCCURS BEFORE TIME INTERVAL BUT NOT AFTER,
C      ACTION - EXTRAPOLATE VALUE OUT TO END OF RUN AND KICK OUT
C               OF TIME PERIOD LOOP.
C   2. OBS OCCURS AFTER TIME INTERVAL BUT NOT BEFORE,
C      ACTION - BACK EXTRAPOLATE TO THE MISSING TIME PERIOD.
C   3. OBS OCCURS BOTH BEFORE AND AFTER TIME PERIOD.
C      ACTION - INTERPOLATE, EITHER BY RETAINING PREVIOUS VALUE OR
C               BY LINEAR INTERPOLATION.
C
C  LOOP TO PROCESS DATA FOR A DATA TYPE
C
      DO 160 I=1,NSTEP
         ISTEP=INTVAL*I+IDSRUN-ISTART
         IWORK=ISTEP+1
C     IF THERE IS A VALID OBSERVATION AT THE TIME STEP WRITE IT
C     TO THE TSDAT ARRAY
         IF (WORK(IWORK).GT.-999.) THEN
C        OBSERVATION FOUND AT TIME INTERVAL
            TSDAT(I)=WORK(IWORK)
            IF (IBUG.GT.0) WRITE (IOPDBG,220) WORK(IWORK),ISTEP
            GO TO 160
            ENDIF
C     HERE NO OBS WAS FOUND AT THE OPEN TIME PERIOD -
C     CHECK THE OBS TO FIND ONE BEFORE AND ONE AFTER (IF POSSIBLE)
         PREOBS=-999.
         XTOBS=-999.
         IPREVT=0
         INEXT=0
C     CHECK FOR CLOSEST OBS AFTER OPEN TIME PERIOD
         IFIRST=IWORK+1
         DO 80 J=IFIRST,ILAST
            IF (WORK(J).LT.-998.) GO TO 80
C           OBS FOUND - THIS IS CLOSEST AFTER OPEN TIME PERIOD
               INEXT=J-1
               XTOBS=WORK(J)
               GO TO 90
80          CONTINUE
C     CHECK FOR CLOSEST OBS BEFORE OPEN TIME PERIOD
90       ISTOP=IWORK-1
         DO 100 J=1,ISTOP
            IF (WORK(ISTOP-J+1).LT.-998.) GO TO 100
C           OBS FOUND - THIS IS CLOSEST BEFORE OPEN TIME PERIOD
               IPREVT=ISTOP-J
               PREOBS=WORK(ISTOP-J+1)
               GO TO 110
100         CONTINUE
C     IF A NON-MISSING OBSERVATION CAN NOT BE FOUND BEFORE THE TIME
C     STEP, THE PDB MUST BE READ FOR THE FIRST PERIOD PRIOR TO RUN 
C     START
         JHOUR=IDSRUN+NHOPDB
         ISTAT=0
         IF (IRPRD.EQ.0) THEN
            LPRERUN=1
            CALL RPRDD (STAID,DTYPE,JHOUR,INTVAL,NUM,
     *         UNITOT,RMISS,LPRERUN,PRERUN,IFUT,LWKBUF,IWKBUF,ISTAT)
            ENDIF
         PREOBS=PRERUN
         IPREVT=IDSRUN-ISTART
         IRPRD=1
         IF (ISTAT.EQ.0.OR.ISTAT.EQ.2) GO TO 110
C        ERROR IN READING THAT ONE TIME PERIOD OF DATA
            CALL QSRPRD (ISTAT,STAID,DTYPE,IDSRUN,INTVAL,
     *         NUM,UNITOT,RMISS,LWKBUF,LPRERUN)
            IDATIM=(IDSRUN)/24+1
            IHRTIM=MOD(IDSRUN,24)
            CALL MDYH2 (IDATIM,IHRTIM,IM,ID,IY,IH,NZXXX,NDXXX,INPTZC)
            WRITE (IPR,300) STAID,DTYPE,IM,ID,IY,IH,INPTZC
            GO TO 190
C     CHECK WHAT SITUATION WE HAVE TO DETERMINE WHAT ACTION TO TAKE
110      IF (IBUG.GT.0) WRITE (IOPDBG,270) I,IPREVT,PREOBS,INEXT,XTOBS
         IF (IFMSNG(PREOBS).EQ.0) GO TO 120
C        NO DATA OR TIME-SERIES VALUE FOUND BEFORE OPEN TIME PERIOD.
C        BACK EXTRAPOLATE FROM FIRST OBS BEYOND TIME PERIOD
            HOUR=FLOAT(INEXT-ISTEP)
            TSDAT(I)=XTOBS/EXTRP**(HOUR/24.)
            IF (IBUG.GT.0) WRITE (IOPDBG,*) 'BACK EXTRAPOLATION'
            GO TO 160
120      IF (IFMSNG(XTOBS).EQ.0) GO TO 130
C        EXTRAPOLATE PREVIOUS VALUE OUT TO END OF RUN
CCC            NTIMES=(IDERUN-IDSRUN-IPREVT)/INTVAL
            IDIFF=IDERUN-IDSRUN-IPREVT
            NTIMES=IDIFF/INTVAL
            IMULT=NTIMES*INTVAL
            IF (IMULT.NE.IDIFF) NTIMES=NTIMES+1
            IF (INTVAL.EQ.1) NTIMES=NTIMES+1
            NVAL=I+NTIMES-1
            IF (IBUG.GT.0) WRITE (IOPDBG,*)
     *         ' STAID=',STAID,
     *         ' IDERUN=',IDERUN,
     *         ' IDSRUN=',IDSRUN,
     *         ' IPREVT=',IPREVT,
     *         ' INTVAL=',INTVAL,
     *         ' IDIFF=',IDIFF,
     *         ' IMULT=',IMULT,
     *         ' I=',I,
     *         ' NTIMES=',NTIMES,
     *         ' NVAL=',NVAL,
     *         ' NSTEP=',NSTEP,
     *         ' '
            STRING=' '
            IF (NVAL.LT.NSTEP) STRING='UNDERFILLS'
            IF (NVAL.GT.NSTEP) STRING='OVERFILLS'
            IF (STRING.NE.' ') THEN
               WRITE (IPR,315) NTIMES,DTYPE,STAID,
     *            STRING(1:LENSTR(STRING)),NSTEP
               CALL ERROR
               ENDIF
            IF (IBUG.GT.0) WRITE (IOPDBG,*) 'EXTRAPOLATE OUT'
            CALL QEXTRP (PREOBS,EXTRP,INTVAL,TSDAT(I),NTIMES)
            GO TO 170
C     HERE WE HAVE BOTH AN OBS BEFORE AND ONE AFTER - CHECK INTERP TYPE
130      IF (INTERP.EQ.0) GO TO 140
C        RETAIN THE PREVIOUS VALUE
            TSDAT(I)=PREOBS
            IF (IBUG.GT.0) WRITE (IOPDBG,*) 'RETAIN PRIOR OBS'      
            GO TO 160
C     USE LINEAR INTERPOLATION
140      DIFF=INEXT-IPREVT
         PREWGT=1-((ISTEP-IPREVT)/DIFF)
         XTWGT=1-((INEXT-ISTEP)/DIFF)
         TSDAT(I)=PREOBS*PREWGT+XTOBS*XTWGT
         IF (IBUG.GT.0) WRITE (IOPDBG,290) PREOBS,XTOBS,IPREVT,INEXT,
     *      ISTEP,DIFF,TSDAT(I)
         GO TO 160
160      CONTINUE
C
C  END OF TIME PERIOD LOOP
C
C- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C
C  NX IS THE AMOUNT OF EXTRA SPACE NEEDED IN THE TIME SERIES HEADER
C  NPDTX IS THE NUMBER OF VALUES PER TIME STEP
C
170   NX=0
      NPDTX=1
      MAXDAY=IPRDMD(DTYPE)
      LWBUFF=((((24/INTVAL)*NPDTX*MAXDAY+22+NX-1)/LRECLT)+1)*
     *   LRECLT
C
C  CHECK IF AMOUNT OF SPACE TO WRITE TIME SERIES IS AVAILABLE
      IF (LWBUFF.LT.LWKBUF) GO TO 180
         WRITE (IPR,280) LWKBUF,STAID,DTYPE,LWBUFF
         CALL WARN
         GO TO 190
C
180   IF (IBUG.GT.0) THEN
         WRITE (IOPDBG,320)
         WRITE (IOPDBG,330) (TSDAT(I),I=1,NSTEP)
         ENDIF
C
C  CHECK IF ALL TIME SERIES DATA VALUES FILLED
      DO 185 I=1,NSTEP
         IF (TSDAT(I).EQ.AINIT) THEN
            WRITE (IPR,317) I,DTYPE,STAID
            CALL ERROR
            ENDIF
185      CONTINUE                  
C
C  DETERMINE THE FIRST HOUR OF DATA TO WRITE TO THE PDB
      JHOUR=IDSRUN+INTVAL+NHOPDB
C
C  DETERMINE THE FIRST HOUR OF FUTURE DATA
      IF (IFPTR.LT.ISTRUN+NHOPDB) IFPTR=JHOUR
      IF (IFPTR.GT.IDERUN+NHOPDB) IFPTR=0
C
C  WRITE TIME SERIES TO PROCESSED DATA BASE
      CALL QXWPRD (STAID,DTYPE,JHOUR,INTVAL,UNITOT,NSTEP,
     *   LTSDAT,TSDAT,IFPTR,LWKBUF,IWKBUF,IREC,LERDTP,ERDTP,NERDTP)
C
190   CALL FSTWHR (OLDOPN,IOLDOP,OLDOPN,IOLDOP)
      IF (IPTRCE.GT.0) WRITE (IOPDBG,380)
C
      RETURN
C
C- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C
200   FORMAT (' *** ENTER QINSTM')
250   FORMAT (' THE TIMES AND OBSERVATIONS OF THE OBSERVED DATA:')
260   FORMAT (' ',I6,1X,G15.7)
220   FORMAT (' THERE WAS A VALUE ',G15.7,' AT TIME STEP ',I6)
230   FORMAT (' WORK(',I4,') IS ',G15.7)
240   FORMAT ('0**ERROR** COUNTER FOR WRITING DATA TYPE ',A,
     *      ' FOR STATION ',A,' INTO WORK ARRAY IS ',I6,
     *      ' AND EXCEEDS THE ARRAY SIZE (',I6,').' /
     *   11X,'PROCESSING WILL CONTINUE WITH THE NEXT DATA TYPE.')
270   FORMAT (' TIME-SERIES INTERVAL=',I5 /
     *   ' PRIOR OBS AT HRLY PD - ',I5,'. OBS=',G15.7 /
     *   ' NEXT OBS AT HRLY PD - ',I5,'. OBS=',G15.7)
280   FORMAT ('0**WARNING** SIZE OF WORK ARRAY (',I5,') TOO SMALL FOR ',
     *   'STATION ',A,' AND DATA TYPE ',A,'. ',I5,' WORDS NEEDED.' /
     *   11X,'PROCESSING WILL CONTINUE WITH THE NEXT DATA TYPE.')
290   FORMAT (' PREOBS=',G15.7,' XTOBS=',G15.7,' IPREVT=',I6,
     *      ' INEXT=',I6,' ISTEP=',I6 /
     *   'DIFF= ',F5.1,' THE INTERPOLATED VALUE=',G15.7)
300   FORMAT (' DATA FOR STATION ',A,' AND DATA TYPE ',A,
     *   ' WAS NOT RETURNED FROM THE PDB FOR ',
     *   I2.2,'/',I2.2,'/',I4,'-',I2.2,' ',A4 /
     * '0THE TIME SERIES IS NOT ALLOWED TO HAVE GAPS IN THE',
     * ' DATA. PROCESSING WILL CONTINUE WITH THE NEXT DATA TYPE' /
     * '0CHECK THE TIME SERIES IN THE PDB IT SHOULD NOT HAVE',
     * ' GAPS IN THE RECORD OR CONTAIN MISSING DATA.')
310   FORMAT ('0**ERROR** DATA FOR STATION ',A,' AND DATA TYPE ',A,
     *      ' WERE MISSING FOR ENTIRE RUN PERIOD AS WAS THE PREVIOUS' /
     *   11X,'TIME SERIES VALUE FOR ',
     *       I2.2,'/',I2.2,'/',I4,'-',I2.2,' ',A4,
     *       '. TIME SERIES CANNOT BE GENERATED.' /
     *   11X,'PROCESSING WILL CONTINUE WITH THE NEXT DATA TYPE.')
315   FORMAT ('0**ERROR** NUMBER OF EXTRAPOLATED VALUES (',I3,') ',
     *   'FOR DATA TYPE ',A,' FOR STATION ',A,' ',
     *   A,' THE ',I3,' TIME STEPS.')
317   FORMAT ('0**ERROR** TIME SERIES DATA VALUE NOT FILLED ',
     *   'IN POSITION ',I3,' OF TIME SERIES ARRAY ',
     *   'FOR DATA TYPE ',A,' FOR STATION ',A,'.')
320   FORMAT (' TSDAT ARRAY:')
330   FORMAT (' ',5G15.7)
380   FORMAT (' *** EXIT QINSTM')
C
      END
