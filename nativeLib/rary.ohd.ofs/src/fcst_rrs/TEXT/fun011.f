C MODULE FUN011
C-----------------------------------------------------------------------
C
C  DRIVER ROUTINE FOR THE RRS PREPROCESSOR FUNCTION.
C
      SUBROUTINE FUN011
C
      CHARACTER*4 DTYPE,ODTYPE
      CHARACTER*8 OLDOPN,PARMID,STAID,CSTAID
      CHARACTER*20 DESC
C 
      DIMENSION QDIST(24)
      DIMENSION UNUSED(2)
C      
      PARAMETER (LWORK=1000)
      DIMENSION WORK(LWORK)
      PARAMETER (LPOINT=1000)
      DIMENSION IPOINT(LPOINT)
      PARAMETER (LTSDAT=1000)
      DIMENSION TSDAT(LTSDAT)
      PARAMETER (LARRAY=2500)
      DIMENSION ARRAY(LARRAY)
      PARAMETER (LWKBUF=2500)
      DIMENSION IWKBUF(LWKBUF)
      PARAMETER (LMIN=750)
      DIMENSION MIN(LMIN)
      PARAMETER (LOBS=LMIN*2)
      DIMENSION OBS(LOBS)
      PARAMETER (MAXMOD=100)
      CHARACTER IMGMOD(MAXMOD)*80,MSTAID(MAXMOD)*8,MDTYPE(MAXMOD)*4
      CHARACTER MISTRT(MAXMOD)*12,MIEND(MAXMOD)*12
      DIMENSION MSCHAR(MAXMOD),MECHAR(MAXMOD)
      PARAMETER (MXTYPE=30)
      DIMENSION TYPES(MXTYPE),IPRTYP(MXTYPE),JMEAN(MXTYPE),
     $   JMISS(MXTYPE),AUNITI(MXTYPE),AUNITO(MXTYPE),DISTRB(MXTYPE),
     $   LFIELD(MXTYPE),NUMDEC(MXTYPE),CHKMIN(MXTYPE),CHKMAX(MXTYPE)
      CHARACTER*4 PRNTOB(MXTYPE),PRNTTS(MXTYPE),PRSOB(MXTYPE)
      CHARACTER XPRTOB(MXTYPE)*4
      PARAMETER (NUMHRS=480)
      DIMENSION PRINT(NUMHRS,7)
      PARAMETER (MUNIT=10)
      DIMENSION NUNIT(MUNIT),IWROTE(MUNIT)
      PARAMETER (LERDTP=1500)
      DIMENSION ERDTP(LERDTP)
      CHARACTER ERRDTY(LERDTP)*4
      PARAMETER (MORRS2=5000)
      INTEGER*2 IORRS1(1),IORRS2(MORRS2)
C
      INCLUDE 'common/ionum'
      INCLUDE 'common/errdat'
      INCLUDE 'common/where'
      INCLUDE 'common/fctime'
      INCLUDE 'common/fctim2'
      INCLUDE 'common/fcunit'
      INCLUDE 'common/x'
      INCLUDE 'common/pudbug'
      INCLUDE 'common/pptime'
      INCLUDE 'common/qprint'
      INCLUDE 'scommon/sntwfx'
C
      EQUIVALENCE (ARRAY(6),IORRS1(1))
C
C    ================================= RCS keyword statements ==========
      CHARACTER*68     RCSKW1,RCSKW2
      DATA             RCSKW1,RCSKW2 /                                 '
     .$Source: /fs/hseb/ob72/rfc/ofs/src/fcst_rrs/RCS/fun011.f,v $
     . $',                                                             '
     .$Id: fun011.f,v 1.13 2002/02/11 20:38:18 dws Exp $
     . $' /
C    ===================================================================
C
      DATA BLANK/4H    /
C
C
      IF (IPTRCE.GT.0) WRITE (IOPDBG,*) 'ENTER FUN011'
C
      IBUG=IPBUG('QDRV')
C
      IOPNUM=-3
      CALL FSTWHR ('FUN011  ',IOPNUM,OLDOPN,IOLDOP)
      CALL UMEMOV ('NONE YET',ISEG,2)
C
      NERDTP=0
      NERDTY=0
      IUDTR=0
      IORD=0
      NWROTE=0
      LUTMP=79
      NWRTS=0
      NWARN=0
      NERRS=0

C  OPEN DATA BASES
      CALL RPPDCO (IST1)
      CALL RPPPCO (IST2)
      CALL RPDHSH (1,IST3)
C
C  CHECK STATUS CODES
      IF (IST1+IST2+IST3.GT.0) THEN
         IF (IST1.GT.0) WRITE (IPR,580) IST1
         IF (IST2.GT.0) WRITE (IPR,590) IST2
         IF (IST3.GT.0) WRITE (IPR,600) IST3
         CALL ERROR
         GO TO 520
         ENDIF

C  READ NTWK PARAMETERS
      IPRERR=0
      CALL SRNTWK (LWORK,WORK,IVNTWK,INWDTE,NNWFLG,INWFLG,
     *   UNUSED,IPRERR,ISTAT)
      IF (ISTAT.NE.0) THEN
         IPTR=0
         PARMID=' '
         CALL RPPREC (PARMID,'NTWK',IPTR,LWORK,WORK,NFILL,IPTRNX,ISTAT)
         CALL PSTRDC (ISTAT,'NTWK',PARMID,IPTR,LWORK,NFILL)
         WRITE (IPR,10)
10    FORMAT ('0**ERROR** CANNOT READ NTWK PARAMETERS.')
         CALL ERROR
         GO TO 520
         ENDIF
      IF (IBUG.GT.0) THEN
         PARMID=' '
         CALL PDUMPA (NFILL,WORK,'NTWK',PARMID,1)
         ENDIF
C
C  CHECK NETWORK FLAG
      INTWKF=0
      INTWK=WORK(22)
      IF (INTWK.EQ.1) INTWKF=1
      IF (INTWKF.EQ.1) THEN
         CALL SPNTWK (IVNTWK,INWDTE,NNWFLG,INWFLG,UNUSED,ISTAT)
         WRITE(IPR,20)
20    FORMAT ('0**ERROR** THE RRS RELATED ',
     *   'NETWORK COMPUTATION INDICATOR IS SET.')
         CALL ERROR
         GO TO 520
         ENDIF
C
C  GET UNIT NUMBERS FOR TEMPORARY FILES AND REWIND THEM
      DO 30 I=1,MUNIT
         NUNIT(I)=KFCTMP(I)
         NUM=NUNIT(I)
         IWROTE(I)=0
         REWIND NUM
30       CONTINUE
C
C  READ HCL INPUT
      CALL QINPUT (MAXMOD,IMGMOD,MSTAID,MDTYPE,MISTRT,MIEND,NMOD,
     $   MSCHAR,MECHAR,IERR)
      IF (IERR.GT.0) GO TO 520
C
      IF (IBUG.GT.0) WRITE (IOPDBG,*) 'NMOD=',NMOD
C
C  CALL ROUTINE RPDLRS TO GET THE SIZE OF THE WORK BUFFER ARRAY
C  NEEDED BY THE PPDB READ/WRITE ROUTINES
      CALL RPDLRS (LWNEED,ISTAT)
      IF (ISTAT.NE.0) THEN
         IF (ISTAT.EQ.1) THEN
            WRITE (IPR,640)
            CALL ERROR
            GO TO 520
            ENDIF
         WRITE (IPR,620) ISTAT
         CALL WARN
         GO TO 40
         ENDIF
      IF (LWNEED.GT.LWKBUF) THEN
         WRITE (IPR,650) LWNEED,LWKBUF
         CALL WARN
         ENDIF
C
40    IPORRS=1
      STAID=' '
      IPTR=0
C
C  GET THE RRS ALPHABETICAL ORDER ARRAY
      CALL RPPREC (STAID,'ORRS',IPTR,LARRAY,ARRAY,NORRS,IPTRNX,ISTAT)
      IF (ISTAT.GT.0.AND.ISTAT.NE.2.AND.ISTAT.NE.4) THEN
         CALL PSTRDC (ISTAT,'ORRS',STAID,IPTR,LARRAY,NORRS)
         ENDIF
      IF (IBUG.GT.0) CALL PDUMPA (NORRS,ARRAY,'ORRS',STAID,1)
      IF (ISTAT.EQ.0) GO TO 50
         WRITE (IPR,570)
         CALL WARN
         STAID=' '
         IPTR=0
         GO TO 80
50    IPTR=-IORRS1(IPORRS)
      NORRS=ARRAY(5)
      IF (NORRS.EQ.0) THEN
         WRITE (IPR,65)
65    FORMAT ('0**WARNING** NUMBER OF STATIONS IN ORRS PARAMETER ',
     $   'RECORD IS ZERO.')
         CALL WARN
         GO TO 520
         ENDIF
      IF (NORRS.GT.MORRS2) THEN
         WRITE (IPR,60) NORRS,MORRS2
60    FORMAT ('0**ERROR** NUMBER OF STATIONS IN ORRS PARAMETER ',
     $   'RECORD (',I4,') EXCEEDS SIZE OF WORK ARRAY (',I4,').')
         CALL ERROR
         GO TO 520
         ENDIF
      IORD=1
      DO 70 I=1,NORRS
         IORRS2(I)=IORRS1(I)
70       CONTINUE
C
C -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
C
80    CALL UMEMOV ('????????',ISEG,2)
C
C  READ RRS PARAMETER RECORD
      CALL RPPREC (STAID,'RRS ',IPTR,LARRAY,ARRAY,NFILL,IPTRNX,ISTAT)
      IF (ISTAT.EQ.0) GO TO 110
      CALL PSTRDC (ISTAT,'RRS ',STAID,IPTR,LARRAY,NFILL)
      IF (ISTAT.EQ.3) THEN
         WRITE (IPR,750) STAID,LARRAY,NFILL
         GO TO 490
         ENDIF
      IF (ISTAT.EQ.6) THEN
         IPTRNX=0
         GO TO 490
         ENDIF
      IF (ISTAT.EQ.1.OR.ISTAT.EQ.4) THEN
         WRITE (IPR,90)
90    FORMAT ('0**ERROR** ABNORMAL TERMINATION OF RRS ',
     $   'PROCESSING - NO FURTHER STATIONS PROCESSED.')
         CALL ERROR
         GO TO 520
         ENDIF
      WRITE (IPR,100)
100   FORMAT ('0**NOTE** PROCESSING CONTINUES WITH NEXT RRS STATION.')
      GO TO 490
C
C  CHECK IF ONLY SPECIFIED STATION TO BE PROCESSED
110   ICHKID=0
      IPRTID=0
CCC      ICHKID=1
CCC      CSTAID='TMLG1'
CCC      IPRTID=1
      IF (ICHKID.EQ.1) THEN
         IF (STAID.NE.CSTAID) THEN
            IF (IPRTID.EQ.1) WRITE (IPR,113) 'STATION',STAID
113   FORMAT (' **NOTE** ',A,' ',A,' WILL NOT BE PROCESSED.')
            GO TO 490
            ELSE
               WRITE (IPR,115) 'STATION',STAID
115   FORMAT (' **NOTE** PROCESSING ',A,' ',A,'.')
            ENDIF
         ENDIF
      NUMISS=0
      NUMDIS=0
      IQPRNT=0
      NXPTOB=0
      NPRTOB=0
      NTYPEL=0
      LNTYPE=0
      NCOLUM=0
      ISTAT1=0
      IF (IORD.EQ.0) ITSREC=-1
C
C  SET ISEG IN WHERE COMMON BLOCK
      CALL UMEMOV (STAID,ISEG,2)
C
C  PRINT PARAMETER ARRAY IF DEBUG IS ON
      IF (IBUG.GT.0) CALL PDUMPA (NFILL,ARRAY,'RRS ',STAID,1)
C
      IPVER=ARRAY(1)
      ISTNUM=ARRAY(4)
      CALL UMEMOV (ARRAY(5),DESC,5)
      ST=ARRAY(10)
      NDTYPE=ARRAY(12)
      NMISS=ARRAY(13)
      NDIST=ARRAY(14)
C
C    -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
C
      DO 480 I=1,NDTYPE
         NUMERR=0
         IMISS=1
         QMIN=-999.
         IMULT=0
         CALL UMEMOV (ARRAY(15+I-1),DTYPE,1)
C     CHECK IF ONLY SPECIFIED DATA TYPE TO BE PROCESSED
         ICKDTP=0
         IF (ICKDTP.EQ.1) THEN
            IF (DTYPE.NE.'PELV') THEN
               WRITE (IPR,113) 'DATA TYPE',DTYPE
               GO TO 480
               ELSE
                  WRITE (IPR,115) 'DATA TYPE',DTYPE
               ENDIF
            ENDIF
         CALL UMEMOV (ARRAY(15+NDTYPE+I-1),ODTYPE,1)
         IF (ODTYPE.EQ.'SAME') THEN
            IMISS=0
            ODTYPE=DTYPE
            ENDIF
         INTVAL=ARRAY(15+2*NDTYPE+I-1)
         NVLPOB=ARRAY(15+3*NDTYPE+I-1)
         ITSREC=ARRAY(15+6*NDTYPE+I-1)
C     DATA TYPES THAT ALLOW MISSING DATA DO NOT USE INTERP AND EXTRP
         IF (IMISS.EQ.0) GO TO 150
            INTERP=ARRAY(15+7*NDTYPE+NUMISS)
            EXTRP=ARRAY(15+7*NDTYPE+NMISS+NUMISS)
            NUMISS=NUMISS+1
            GO TO 160
C     SET INTERP AND EXTRP TO ZERO
150      INTERP=0
         EXTRP=0.0
160      IF (IBUG.GT.0) WRITE (IOPDBG,670) STAID,DTYPE,
     $      IMISS,NDIST,INTVAL,INTERP,EXTRP,IPVER,ITSREC
         IF (NDIST.EQ.0) GO TO 180
            QMIN=ARRAY(15+7*NDTYPE+2*NMISS+I-1)
            IF (QMIN.LT.0) GO TO 180
               NUMDIS=NUMDIS+1
               DO 170 N=1,24
                  QDIST(N)=ARRAY(15+8*NDTYPE+2*NMISS+(NUMDIS-1)*24+N-1)
170               CONTINUE
            IF (IBUG.GT.0) THEN
               WRITE (IOPDBG,810) STAID,DTYPE,NDIST,QMIN
               WRITE (IOPDBG,820) (QDIST(N),N=1,24)
               ENDIF
C     CHECK THAT THE RUN PERIOD DOES NOT EXCEED THE NUMBER OF DAYS OF
C     DATA THAT CAN BE WRITTEN TO THE PDB
180      IF (INTVAL.LT.0) GO TO 220
            MAXDAY=IPRDMD(ODTYPE)
            IF (MAXDAY.GT.0) GO TO 190
               WRITE (IPR,610) ODTYPE
               CALL ERROR
C           FOR DATA TYPES NOT PROCESSED SET THE DATA TYPE CODE TO BLANK
C           SO IT WILL NOT BE INCLUDED IN THE PRINT TYPE ARRAY
               ARRAY(15+I-1)=BLANK
               GO TO 480
190         NHOUR=IENRUN-ISTRUN+1
            NDAY=NHOUR/24
            IDERUN=IENRUN
            IF (NDAY.GT.MAXDAY) IDERUN=IENRUN-(NDAY-MAXDAY)*24
C        CONVERT INTERNAL JULIAN HOUR TO MMDDYY
            IDSRUN=ISTRUN
            IDLRUN=ILCRUN
            CALL MDYH1 (IDARUN,IHRRUN,IM,ID,IY,IH,NOUTZ,NOUTDS,TZC)
C        CHANGE LAST JULIAN HR TO LAST JULIAN DAY AND HR
            LASTDY=IDERUN/24+1
            LASTHR=IDERUN-LASTDY*24+24
            CALL MDYH1 (LASTDY,LASTHR,LM,LD,LY,LH,NOUTZ,NOUTDS,TZC)
C        CHECK IF NUMBER OF DAYS ALLOWED EXCEEDED
            IF (NDAY.GT.MAXDAY) THEN
C           CHECK IF THERE WAS A PREVIOUS WARNINGS FOR THIS DATA TYPE
               IF (NERDTY.GT.0) THEN
                  DO 200 II=1,NERDTY
                     IF (ODTYPE.EQ.ERRDTY(II)) GO TO 220
200                  CONTINUE
                  ENDIF
               WRITE (IPR,630) NDAY,MAXDAY,
     $            IM,ID,IY,IH,TZC,
     $            LM,LD,LY,LH,TZC,
     $           ODTYPE
               NERDTY=NERDTY+1
               IF (NERDTY.GT.LERDTP) NERDTY=LERDTP
               ERRDTY(NERDTY)=ODTYPE
               ENDIF
C     IF THE INTERVAL IS NEGATIVE DO NOT PROCESS THE DATA TYPE AND
C     DO NOT PRINT A MESSAGE
220      IF (INTVAL.GE.0) GO TO 230
C        FOR DATA TYPES NOT PROCESSED SET THE DATA TYPE CODE TO BLANK
C        SO IT WILL NOT BE INCLUDED IN THE PRINT TYPE ARRAY
            ARRAY(15+I-1)=BLANK
            GO TO 480
C     CHECK THAT THE INTERVAL IS NOT ZERO
230      IF (INTVAL.EQ.0) GO TO 240
C     CHECK THAT THE INTERVAL IS VALID
         IF (24/INTVAL*INTVAL.EQ.24) GO TO 250
240         WRITE (IPR,660) INTVAL,STAID,DTYPE
            CALL ERROR
C        FOR DATA TYPES NOT PROCESSED SET THE DATA TYPE CODE TO BLANK
C        SO IT WILL NOT BE INCLUDED IN THE PRINT TYPE ARRAY
            ARRAY(15+I-1)=BLANK
            GO TO 480
C     CALCULATE THE HOUR OF THE FIRST TIME PERIOD WITH FUTURE DATA
250      IFPTR=ILCRUN+(INTVAL-MOD(ILCRUN,INTVAL))+NHOPDB
CCC         IF (IREM.EQ.0) IFPTR=ILCRUN+INTVAL+NHOPDB
CCC         IF (IREM.GT.0) IFPTR=ILCRUN+IREM+NHOPDB
         IF (IBUG.GT.0) WRITE (IOPDBG,710) IFPTR
         CALL QDTYPE (DTYPE,IUDTR,MXTYPE,TYPES,IPRTYP,JMEAN,JMISS,
     $      AUNITI,AUNITO,DISTRB,LFIELD,NUMDEC,CHKMIN,CHKMAX,
     $      NUTYPE,ITYPE,IMEAN,UNITIN,UNITOT,NFIELD,NDEC,ISTAT)
         IF (ISTAT.NE.1) GO TO 260
C        FOR DATA TYPES NOT PROCESSED SET THE DATA TYPE CODE TO BLANK
C        SO IT WILL NOT BE INCLUDED IN THE PRINT TYPE ARRAY
            ARRAY(15+I-1)=BLANK
            GO TO 480
260      IF (IBUG.GT.0) WRITE (IOPDBG,*) 'NDTYPE=',NDTYPE,
     $      ' NUTYPE=',NUTYPE
         IF (IQPRNT.EQ.0) CALL QPRNT (MXTYPE,NUTYPE,NDTYPE,ARRAY,TYPES,
     $      IPRTYP,NPRTTS,NPRTOB,PRNTOB,PRNTTS,PRSOB,NPSOB,XPRTOB)
         IQPRNT=1
         AINIT=-10001.
C     INITIALIZE THE TSDAT ARRAY
         DO 270 J=1,LTSDAT
            TSDAT(J)=AINIT
270         CONTINUE
C     INITIALIZE THE WORK ARRAY
         DO 280 K=1,LWORK
            WORK(K)=AINIT
280         CONTINUE
C     WHEN READING OR WRITING TO DATA BASES ADD THE HYDROLOGIC DAY
C     OFFSET TO GET THE NUMBER OF HOURS SINCE 00Z 1/1/1900
         OFFSET=NHOPDB
         IFHOUR=IDSRUN+OFFSET
         LHOUR=IDERUN+OFFSET
         ILHOUR=LHOUR
C     ADD ANOTHER DAY TO READ FROM THE PREPROCESSOR DATA BASE IF THE 
C     DATA IS A MEAN VALUE.  THIS WILL PICK UP ANY OBSERVATIONS THAT ARE
C     READ AFTER THE END OF THE RUN BUT WHOSE PERIOD OF OBSERVATION
C     EXTENDS BACK INTO THE RUN PERIOD
         IF (NVLPOB.EQ.3) LHOUR=LHOUR+24
         IF (IBUG.GT.0) WRITE (IOPDBG,700) STAID,DTYPE,IFHOUR,LHOUR
         ISTAID=0
         CALL RPDRRS (STAID,ISTAID,DTYPE,NVLPOB,IFHOUR,LHOUR,LOBS,OBS,
     $      NUMOBS,LMIN,MIN,LWKBUF,IWKBUF,LSTHR,ISTAT)
         IF (ISTAT.EQ.0) GO TO 290
         IF (ISTAT.EQ.4) GO TO 290
         IF (ISTAT.GT.0) THEN
            CALL QSPRRS (ISTAT,STAID,DTYPE,IMISS,IFHOUR,ILHOUR,
     $         LWKBUF,LWNEED,IRWARN,LOBS,LMIN)
            ENDIF
         IF (ISTAT.EQ.7) NUMERR=NUMERR+1
         MAXERR=50
         IF (NUMERR.GT.MAXERR) THEN
            WRITE (IPR,680) MAXERR,STAID,DTYPE
            CALL WARN
            GO TO 480
            ENDIF
C     RESET LHOUR AND IFHOUR TO BE ON SAME BASIS AS IDSRUN AND IDERUN
C     (INTERNAL TIME VERSUS DATABASE TIME)
290      IFHOUR=IFHOUR-OFFSET
         LHOUR=LHOUR-OFFSET
         IF (ISTAT.LT.2) GO TO 320
C     IF DATA NOT RETURNED FROM THE PPDB, REMOVE THE DATA TYPE CODE
C     FROM THE ARRAY OF DATA TYPE CODES TO BE PRINTED
         DO 310 K=1,MXTYPE
            IF (DTYPE.NE.PRNTOB(K)) GO TO 300
               PRNTOB(K)=' '
               NPRTOB=NPRTOB-1
               NXPTOB=NXPTOB+1
               XPRTOB(NXPTOB)=DTYPE
               GO TO 320
300         IF (DTYPE.NE.PRSOB(K)) GO TO 310
               PRSOB(K)=' '
               NPSOB=NPSOB-1
               NXPTOB=NXPTOB+1
               XPRTOB(NXPTOB)=DTYPE
               GO TO 320
310         CONTINUE
320      IF (ISTAT.GT.2) GO TO 370
            DO 340 K=1,MXTYPE
               IF (DTYPE.NE.PRNTOB(K)) GO TO 330
                  NTYPEL=NTYPEL+1
                  NCOLUM=NCOLUM+1
                  IMULT=1
                  GO TO 350
330            IF (DTYPE.NE.PRSOB(K)) GO TO 340
                  GO TO 350
340            CONTINUE
            GO TO 370
350      IUNIT=0
         IF (ITYPE.GT.0.AND.ITYPE.LT.11) GO TO 360
            WRITE (IPR,800) STAID,DTYPE,ITYPE
            GO TO 430
360      IUNIT=NUNIT(ITYPE)
C     WRITE DATA TO PRINT ARRAY OR FILE IF THE DATA IS TO BE PRINTED
         IF (IBUG.GT.0) WRITE (IOPDBG,840) STAID,DTYPE,IMULT,NPSOB,
     $      NPRTOB,(PRSOB(K),K=1,MXTYPE),(PRNTOB(K),K=1,MXTYPE)
         CALL QOBSDA (STAID,ST,DTYPE,DESC,ISTNUM,NWROTE,IWROTE,
     $      NVLPOB,OBS,OBS,NUMOBS,PRINT(1,NCOLUM),
     $      PRINT(1,NCOLUM+1),IMULT,IUNIT,NUMHRS,IFHOUR,LHOUR)
C     FOR PERIOD DATA A COLUMN FOR THE PERIOD IS ALSO USED
         IF (NVLPOB.EQ.3) NCOLUM=NCOLUM+1
C     IF THE COUNTER (I) EQUALS THE NUMBER OF DATA TYPES, THE NUMBER OF
C     VALUES FOR THE NEXT DATA TYPE WILL BE UNDEFINED, SO GIVE IT THE
C     CURRENT VALUE
370      IF (I.LT.NDTYPE) GO TO 380
            NXVLOB=NVLPOB
            GO TO 390
380      NXVLOB=ARRAY(15+3*NDTYPE+I)
390      IF (IBUG.GT.0) WRITE (IOPDBG,760) NTYPEL,LNTYPE,NPRTOB,NCOLUM,
     $      NXVLOB
         IF (NTYPEL.EQ.5.OR.
     $       NTYPEL+LNTYPE.EQ.NPRTOB.OR.
     $       (NCOLUM.EQ.6.AND.NXVLOB.EQ.3)) GO TO 400
            GO TO 430
400      CALL QDSPLY (ISTNUM,STAID,ST,DESC,PRINT,PRINT,
     $      NUMHRS,NTYPEL,NPRTOB,PRNTOB,NXPTOB,XPRTOB,MXTYPE,IUDTR,
     $      NUTYPE,TYPES,IPRTYP,JMEAN,JMISS,AUNITI,AUNITO,DISTRB,
     $      LFIELD,NUMDEC,CHKMIN,CHKMAX)
         LNTYPE=LNTYPE+NTYPEL
         NBLANK=0
         DO 410 J=1,MXTYPE
            IF (NBLANK.GT.NTYPEL) GO TO 420
            IF (PRNTOB(J).EQ.' ') GO TO 410
               PRNTOB(J)=' '
               NBLANK=NBLANK+1
410         CONTINUE
420      NCOLUM=0
         NTYPEL=0
430      NCOUNT=NUMOBS*NVLPOB
         IF (NVLPOB.EQ.3.AND.NCOUNT.GT.0) THEN
            CALL QOVLAP (STAID,DTYPE,OBS,OBS,NCOUNT,IFHOUR,LOBS,
     $         WORK,LWORK,LPOINT,IPOINT,QMIN,QDIST,INTVAL,AINIT,IERR)
            IF (IERR.NE.0) GO TO 480
            ENDIF
         IF (NMOD.EQ.0) GO TO 450
C     IF MISSING DATA ARE NOT ALLOWED THE DATA MAY NOT BE SET TO MISSING
         IF (IMISS.EQ.1) GO TO 450
            IF (IBUG.GT.0) WRITE (IOPDBG,730)
            DO 440 J=1,NMOD
               IF (IBUG.GT.0) WRITE (IOPDBG,740) STAID,DTYPE,
     $            MSTAID(J),MDTYPE(J)
               IF (STAID.EQ.MSTAID(J).AND.
     $             DTYPE.EQ.MDTYPE(J)) THEN
                   CALL QSETMG (MSTAID(J),MDTYPE(J),MSCHAR(J),
     $                MECHAR(J),MISTRT(J),MIEND(J),INTVAL,
     $                LWORK,WORK)
                  ENDIF
440            CONTINUE
C     CHECK THE LAST HOUR OF OBSERVED DATA RETURNED FROM THE PPDB
C     AND THE LSTCMPDY TECHNIQUE VALUE
450      IF (IOBSFT.EQ.0.OR.ISTAT.EQ.4) GO TO 460
         IF (LSTHR.EQ.0.AND.IBUG.GT.0) WRITE (IOPDBG,685) STAID,DTYPE
C     SUBTRACT THE DATA BASE OFFSET FROM LSTHR
         LSTHR=LSTHR-NHOPDB
         IF (LSTHR.LT.0) LSTHR=0
         IF (LSTHR.EQ.ILCRUN) GO TO 460
            LASTDY=LSTHR/24+1
            LASTHR=LSTHR-LASTDY*24+24
            CALL MDYH1 (LASTDY,LASTHR,IM,ID,IY,IH,NOUTZ,NOUTDS,TZC)
            ILCRDY=ILCRUN/24+1
            ILCRHR=ILCRUN-ILCRDY*24+24
            CALL MDYH1 (ILCRDY,ILCRHR,LM,LD,LY,LH,NOUTZ,NOUTDS,TZC)
            IF (LSTHR.GT.ILCRUN) THEN
               WRITE (IPR,780) STAID,DTYPE,
     $            IM,ID,IY,IH,TZC,
     $            LM,LD,LY,LH,TZC
                CALL WARN
                ENDIF
            IF (LSTHR.GT.ILCRUN.OR.LHOUR.LE.LSTHR) GO TO 460
C     GET THE HOUR OF THE FIRST FUTURE OBSERVATION
         CALL QISTFT (STAID,DTYPE,OBS,OBS,NVLPOB,NCOUNT,LSTHR,ISTFUT)
         IF (ISTFUT.LE.ILCRUN.AND.LHOUR.GT.LSTHR) THEN
            WRITE (IPR,770) STAID,DTYPE,IM,ID,IY,IH,TZC,LM,LD,LY,LH,TZC
            CALL WARN
            ENDIF
460      IF (NVLPOB.EQ.3) THEN
            CALL QMEAN (STAID,ODTYPE,INTVAL,
     $         UNITIN,UNITOT,NCOUNT,IFHOUR,LWORK,WORK,LWKBUF,IWKBUF,
     $         LTSDAT,TSDAT,JHOUR,NSTEP,ITSREC,IMISS,INTERP,EXTRP,
     $         LERDTP,ERDTP,NERDTP)
            ENDIF
         IF (NVLPOB.EQ.2.AND.IMISS.EQ.0) THEN
            CALL QINSTN (STAID,ODTYPE,INTVAL,
     $         UNITIN,UNITOT,NCOUNT,LOBS,OBS,OBS,IFHOUR,L HOUR,
     $         LWORK,WORK,LWKBUF,IWKBUF,LTSDAT,TSDAT,
     $         JHOUR,NSTEP,ITSREC,AINIT,LERDTP,ERDTP,NERDTP,ISTAT1)
            ENDIF
         IF (IBUG.GT.0) WRITE (IOPDBG,720) IFPTR
         IF (NVLPOB.EQ.2.AND.IMISS.EQ.1) THEN
            CALL QINSTM (STAID,ODTYPE,INTVAL,
     $         UNITOT,NCOUNT,LOBS,OBS,OBS,IFHOUR,LHOUR,
     $         LWORK,WORK,LWKBUF,IWKBUF,
     $         INTERP,EXTRP,LTSDAT,TSDAT,JHOUR,NSTEP,ITSREC,
     $         AINIT,LERDTP,ERDTP,NERDTP,ISTAT1)
            ENDIF
         IF (ISTAT1.NE.0) GO TO 480
         IF (NSTEP.EQ.0) GO TO 480
         IF (NPRTTS.EQ.0) GO TO 480
C     WRITE TIME SERIES DATA TO TEMPORARY FILE
            DO 470 J=1,NPRTTS
               IF (DTYPE.NE.PRNTTS(J)) GO TO 470
               CALL QWRITS (LUTMP,STAID,DESC,ST,ODTYPE,UNITOT,INTVAL,
     $            NSTEP,NDEC,NWRTS,TSDAT)
470            CONTINUE
480      CONTINUE
C
C    -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
C
490   IF (IORD.EQ.0) THEN
         IF (IPTRNX.GT.0) THEN
            IPTR=IPTRNX
            GO TO 510
            ENDIF
         ENDIF
C
      IF (IPORRS.EQ.NORRS) GO TO 520
C
C  PROCESS NEXT STTAION
      IPORRS=IPORRS+1
      IPTR=-IORRS2(IPORRS)
510   STAID=' '
      GO TO 80
C
C -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
C
C  REWIND TEMPORARY FILES
520   DO 530 I=1,MUNIT
         NUM=NUNIT(I)
         REWIND NUM
530      CONTINUE
C
C  PRINT THE OBSERVED DATA
      IF (IBUG.GT.0) WRITE (IOPDBG,790) NWROTE,(IWROTE(I),I=1,MUNIT)
      DO 550 I=1,MUNIT
         IF (IWROTE(I).EQ.0) GO TO 550
         DO 540 J=1,MUNIT
            IF (IWROTE(I).EQ.NUNIT(J)) THEN
               CALL QDISPL (IWROTE(I),OBS,OBS,
     $            MXTYPE,IUDTR,NUTYPE,TYPES,IPRTYP,JMEAN,JMISS,
     $            AUNITI,AUNITO,
     $            DISTRB,LFIELD,NUMDEC,CHKMIN,CHKMAX)
               ENDIF
            IF (IWROTE(I).EQ.NUNIT(J)) GO TO 550
540         CONTINUE
            WRITE (IPR,830) IWROTE(I),(NUNIT(K),K=1,10)
550      CONTINUE
C
C  PRINT TIME SERIES DATA
      IF (NWRTS.GT.0) THEN
         REWIND LUTMP
         CALL QPRTTS (LUTMP,TSDAT)
         ENDIF
C
C  REWIND TEMPORARY DATA FILES
      DO 560 I=1,MUNIT
         NUM=NUNIT(I)
         REWIND NUM
560      CONTINUE
      REWIND LUTMP
C
      CALL FSTWHR (OLDOPN,IOLDOP,OLDOPN,IOLDOP)
C
      CALL STOPFN ('RRS     ')
C
      IF (IPTRCE.GT.0) WRITE (IOPDBG,*) 'EXIT FUN011'
C
      RETURN
C
C- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C
570   FORMAT ('0**WARNING** THE ALPHABETICAL ORDER PARAMETRIC',
     $ ' INFORMATION IS NOT AVAILABLE.'/T12,' THE STATIONS WILL BE',
     $ ' PROCESSED IN THE ORDER THEY APPEAR IN THE PPPDB.')
580   FORMAT ('0**ERROR** THE COMMON BLOCK NEEDED BY THE',
     $ ' PREPROCESSOR DATA BASE READ WRITE ROUTINES COULD',
     $ ' NOT BE FILLED.'/' A STATUS CODE OF ',I5,' WAS RETURNED',
     $ ' FROM RPPDCO.  PROCESSING CANNOT CONTINUE.')
590   FORMAT ('0**ERROR** THE COMMON BLOCK NEEDED BY THE',
     $ ' PREPROCESSOR PARAMETRIC DATA BASE R/W ROUTINES COULD',
     $ ' NOT BE FILLED.'/' A STATUS CODE OF ',I5,' WAS RETURNED',
     $ ' FROM RPPPCO.  PROCESSING CANNOT CONTINUE.')
600   FORMAT ('0**ERROR** THE COMMON BLOCK NEEDED BY THE ',
     $      'PREPROCESSOR DATA BASE HASHING ROUTINES COULD ',
     $      'NOT BE FILLED.' /
     $   T13,'A STATUS CODE OF ',I5,' WAS RETURNED',
     $       ' FROM RPDHSH.  PROCESSING CANNOT CONTINUE.')
610   FORMAT ('0**ERROR** DATA TYPE ',A4,' NOT FOUND IN THE',
     $       ' PROCESSED DATA BASE. ' /
     $   T13,'PROCESSING CONTINUE WITH NEXT DATA TYPE.')
620   FORMAT ('0**WARNING** A STATUS CODE OF ',I2,' ENCOUNTERED ',
     $       ' TRYING TO GET THE LENGTH OF THE WORK BUFFER ARRAY FOR ',
     $       ' THE PREPROCESSOR DATA BASE.' /
     $   T13,'PROCESSING WILL CONTINUE WITHOUT CHECKING ',
     $       ' THE DIMENSION OF THE ARRAY')
630   FORMAT ('0**WARNING** THE RUN PERIOD FOR ',I3,' DAYS EXCEEDS ',
     $       'THE NUMBER OF DAYS OF DATA THAT CAN BE HELD IN THE ',
     $       'PROCESSED DATA BASE ( ',I3,'). '/
     $   T15,'THE PERIOD WRITTEN TO PROCESSED DATA BASE CHANGED FROM ',
     $       I2.2,'/',I2.2,'/',I4.4,1X,I2.2,1X,A4,' TO ',
     $       I2.2,'/',I2.2,'/',I4.4,1X,I2.2,1X,A4,' FOR ',
     $       'DATA TYPE ',A4,'.')
640   FORMAT ('0**ERROR** NO STATIONS WITH RRS DATA TYPES HAVE ',
     $ 'BEEN DEFINED.')
650   FORMAT ('0**WARNING** THE WORK ARRAY REQUIRED TO READ THE PDB ',
     $ 'IS ',I6,' THE ARRAY IS DIMENSIONED AT ',I4,'. ',
     $ 'PROCESSING CONTINUES.')
660   FORMAT ('0**ERROR** AN INTERVAL OF ',I5,' FOR STATION ',A,
     $     ' AND DATA TYPE ',A4,' IS INVALID.' /
     $ T13,'CURRENTLY THE VALID TIME INTERVALS ARE ',
     $     '1, 2, 3, 4, 6, 8, 12 AND 24.'/
     $ T13,'PROCESSING WILL CONTINUE WITH THE NEXT DATA TYPE ',A4,'.')
670   FORMAT (' STATION= ',A,1X,' TYPE= ',A4,' IMISS= ',I2,' NDIST=',
     $ I2,1X,' INTVAL= ',I2,1X,' INTERP= ',I1,1X,
     $ ' EXTRP= ',F5.2,' IPVER= ',I3,' ITSREC= ',I6)
680   FORMAT ('0**WARNING** MORE THAN ',I2,' ERRORS ENCOUNTERED ',
     $  'READING THE PPDB ',
     $  'FOR STATION ',A,' AND DATA TYPE ',A4,'. ' /
     $ T13, 'PROCESSING STOPPED FOR THIS DATA TYPE.')
685   FORMAT (' HOUR OF LAST OBSERVED DATA VALUE IS ZERO ',
     $ 'FOR STATION ',A,' AND DATA TYPE ',A4,'. ',
     $ 'PROCESSING STOPPED FOR THIS DATA TYPE.')
700   FORMAT (' READING THE PPDB TO GET DATA FOR STATION ',A,' AND',
     $ ' DATA TYPE ',A4,' FROM JULIAN HOUR ',I7,' TO HOUR ',I7)
710   FORMAT (' THE VALUE OF IFPTR AFTER CALCULATED IS ',I8)
720   FORMAT (' THE VALUE OF IFPTR BEFORE CALL TO QINSTM IS',I8)
730   FORMAT (' CHECK IF THE STATION HAS DATA WHICH IS TO BE SET TO',
     $ ' MISSING')
740   FORMAT (' THE CURRENT STATION IS ',A,' THE CURRENT DATA',
     $ ' TYPE IS ',A,' MSTAID IS ',A,' MDTYPE IS ',A)
750   FORMAT (T17,'STATION ',A,' CANNOT BE PROCESSED',
     $ ' BECAUSE THE ARRAY WAS NOT LARGE ENOUGH TO HOLD THE',
     $ ' PARAMETRIC DATA.'/'0THE ARRAY WAS DIMENSIONED AT',
     $ I5,' AND ',I5,' WAS NEEDED.'/
     $ ' PROCESSING WILL CONTINUE WITH THE NEXT STATION.')
760   FORMAT (' NTYPEL=',I3,'LNTYPE=',I2,' NPRTOB=',I3,
     $ ' NCOLUM=',I3,' NXVLOB=',I3)
770   FORMAT ('0**WARNING** THE LAST HOUR OF OBSERVED DATA ',
     $       'FOR STATION ',A,' AND DATA TYPE ',A4,
     $       ' WAS ',I2.2,'/',I2.2,'/',I4.4,1X,I2.2,1X,A4 /
     $    T13,'THE VALUE OF TECHNIQUE LSTCMPDY WAS ',
     $        I2.2,'/',I2.2,'/',I4.4,1X,I2.2,1X,A4,
     $        '. SOME FUTURE DATA WILL BE TREATED AS REGULAR DATA.')
780   FORMAT ('0**WARNING** THE LAST HOUR OF OBSERVED DATA ',
     $      'FOR STATION ',A,' AND DATA TYPE ',A4,
     $      ' WAS ',I2.2,'/',I2.2,'/',I4.4,1X,I2.2,1X,A4 /
     $   T17,'THE VALUE OF TECHNIQUE LSTCMPDY WAS ',
     $       I2.2,'/',I2.2,'/',I4.4,1X,I2.2,1X,A4,
     $       '. SOME REGULAR DATA WILL BE TREATED AS FUTURE DATA.')
790   FORMAT (' THE FOLLOWING IS THE CONTENTS OF THE IWROTE ARRAY',
     $ ' NWROTE= ',I4/,10(2X,I3))
800   FORMAT (' DATA FOR STATION ',A,' AND DATA TYPE ',A4,
     $ ' WILL NOT BE WRITTEN TO THE TEMPORARY FILE' /
     $ ' BECAUSE IT HAS AN INVALID PRINT CATAGORY OF ',I3)
810   FORMAT (' FOR STATION ',A,' AND TYPE ',A4,' NDIST= ',I2,
     $ ' QMIN= ',F7.1,' AND THE DISTRIBUTION FACTORS ARE: ' /)
820   FORMAT (' ',12F7.3)
830   FORMAT (' TEMPORARY FILE NUMBER ',I6,' IS INVALID.  THE VALID',
     $ ' FILE NUMBERS  ARE:',10I4)
840   FORMAT (' BEFORE QOBSDA STAID= ',A,' DTYPE= ',A4,' IMULT= ',I3,
     $ ' NPSOB= ',I3,' NPRTOB= ',I3 /
     $ ' PRSOB IS AS FOLLOWS: ' / 1X,5(A4,1X),25A4 /
     $ ' PRNTOB IS AS FOLLOWS: ' / 1X,5(A4,1X),25A4)
C
      END
