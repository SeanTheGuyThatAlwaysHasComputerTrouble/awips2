C$PRAGMA C (IFP_ICP)
C MODULE FAZE2
C-----------------------------------------------------------------------
C
C  THIS ROUTNE EXECUTE ONE SEGMENT AT A TIME FOR THE FUNCTION FCEXEC.
C
      SUBROUTINE FAZE2 (MC,C,MD,D,MP,P,MT,T,MTS,TS)
C
C  ORIGINALLY WRITTEN BY GEORGE SMITH - HRL - 25 MARCH 1980
C
      CHARACTER*8 RTNNAM/'FAZE2'/,SEGID,APINAM,OPNOLD
      INTEGER T
      LOGICAL NOTCPU,LBUG,DUMPCB,DCBA,DCBB,DCBC,DCBD,DCBE,DCBF
      DIMENSION C(MC),D(MD),P(MP),T(MT),TS(MTS)
C
      INCLUDE 'common/fdbug'
      INCLUDE 'common/ionum'
      INCLUDE 'common/fcrunc'
      INCLUDE 'common/where'
      INCLUDE 'common/fcsegn'
      INCLUDE 'common/fctime'
      INCLUDE 'common/fctim2'
      INCLUDE 'common/errdat'
      INCLUDE 'common/flarys'
      INCLUDE 'common/fcary'
      INCLUDE 'common/fnopr'
      INCLUDE 'common/fprog'
      INCLUDE 'common/ffgctl'
      INCLUDE 'common/sysbug'
      INCLUDE 'common/killcd'
      INCLUDE 'common/modscb'
      INCLUDE 'common/opfil55'
      INCLUDE 'common/fengmt'
      COMMON /FCFUTP/ IFPR
      COMMON /FCKTMP/ NEEDTX
      COMMON /OUTCTL/ IOUTYP
C
C    ================================= RCS keyword statements ==========
      CHARACTER*68     RCSKW1,RCSKW2
      DATA             RCSKW1,RCSKW2 /                                 '
     .$Source: /fs/hseb/ob72/rfc/ofs/src/fcst_top/RCS/faze2.f,v $
     . $',                                                             '
     .$Id: faze2.f,v 1.9 2004/02/02 21:51:51 jgofus Exp $
     . $' /
C    ===================================================================
C
      DATA ILT/4HLT  /
C
C
      IOLDOP=IOPNUM
      IOPNUM=0
      CALL UMEMOV (OPNAME,OPNOLD,2)
      CALL UMEMOV (RTNNAM,OPNAME,2)
C
      IF (ITRACE.GT.0) WRITE (IODBUG,*) 'ENTER FAZE2'
C
      NOTCPU=.TRUE.
      IF (IFBUG('CPU ').EQ.1) NOTCPU=.FALSE.
      LBUG=.FALSE.
      IF (IFBUG('PHZ2').EQ.1) LBUG=.TRUE.
      IF (.NOT.NOTCPU) LBUG=.TRUE.
      DUMPCB=.FALSE.
      IF (IALL.EQ.1) GO TO 30
         DCBA=.FALSE.
         DCBB=.FALSE.
         DCBC=.FALSE.
         DCBD=.FALSE.
         DCBE=.FALSE.
         DCBF=.FALSE.
         IF (IFBUG('DCBA').EQ.1) DCBA=.TRUE.
         IF (IFBUG('DCBB').EQ.1) DCBB=.TRUE.
         IF (IFBUG('DCBC').EQ.1) DCBC=.TRUE.
         IF (IFBUG('DCBD').EQ.1) DCBD=.TRUE.
         IF (IFBUG('DCBE').EQ.1) DCBE=.TRUE.
         IF (IFBUG('DCBF').EQ.1) DCBF=.TRUE.
         IF (DCBA.OR.DCBB.OR.DCBC) DUMPCB=.TRUE.
         IF (DCBD.OR.DCBE.OR.DCBF) DUMPCB=.TRUE.
C
30    IOPT=1
      NOPARM=0
      NF2ERR=0
C
      NCARDS=0
C
      IF (LBUG) WRITE (IODBUG,40)
40    FORMAT (' IN FAZE2 - ABOUT TO ENTER DO LOOP')
      IF (DUMPCB) CALL FDMPCB (DCBA,DCBB,DCBC,DCBD,DCBE,DCBF)
C
C  COMPUTE LENGTH OF FORECAST PERIOD
      IENDRN=((LDARUN-1)*24)+LHRRUN
      IOBSRV=((LDACPD-1)*24)+LHRCPD
      IDIFF=IENDRN-IOBSRV
      IF (IDIFF.GE.IFPR) GO TO 60
      IF (IDIFF.LT.0.AND.IFPR.EQ.0) GO TO 60
      IF (IDIFF.LT.0.AND.IFPR.EQ.-1) THEN
         WRITE (IPR,45) IFPR
45    FORMAT ('0**WARNING** NONE OF THE FORECAST RUN IS ',
     * 'INTO THE FUTURE. FUTPRECP TECHNIQUE (',I3,') WILL NOT BE ',
     * 'CHANGED.')
         CALL WARN
         GO TO 60
         ENDIF
      WRITE (IPR,50) IFPTR,IDIFF,IDIFF
      CALL WARN
50    FORMAT ('0**WARNING** VALUE OF TECHNIQUE FUTPRECP (',I4,
     * ') EXCEEDS THE LENGTH OF FORECAST PERIOD (',I4,' HOURS) ',
     * 'AND WILL BE SET TO ',I4,'.')
      IFPTR=IDIFF
C
C  PROCESS EACH SEGMENT
C
60    DO 620 ISEGEX=1,NSEGEX
C
      IF (LBUG) WRITE (IODBUG,70) ISEGEX
70    FORMAT (' IN FAZE2 - ISEGEX=',I5)
      IF (LBUG) WRITE (IODBUG,80)
80    FORMAT (' IN FAZE2 - ABOUT TO CALL FGETSG')
C
C  READ INFORMATION INTO THE P, T AND TS ARRAYS FOR A SEGMENT
      CALL FGETSG (SEGID,IRSGEX(ISEGEX),MP,P,MT,T,MTS,TS,IOPT,NOPARM,
     *   IER)
      IF (LBUG) WRITE (IODBUG,90) IDSEGN
90    FORMAT (' IN FAZE2 - BACK FROM FGETSG - IDSEGN=',2A4)
      IF (.NOT.NOTCPU) CALL FPRCPU
      IF (IER.EQ.0) GO TO 130
      IF (NF2ERR.LE.10) THEN
         WRITE (IPR,100) ISEGEX
         CALL ERROR
         ENDIF
100   FORMAT ('0**ERROR** ERROR ENCOUNTERED IN FGETSG FOR ',
     *   'SEGMENT NUMBER ',I6,'.')
      IF (IER.EQ.1.AND.NF2ERR.LE.10) THEN
         WRITE (IPR,110) IOPT,IRSGEX(ISEGEX)
         CALL ERROR
         ENDIF
110   FORMAT ('0**ERROR** INVALID ARGUMENTS PASSED TO FGETSG : ',
     *   'IOPT=',I5,' IREC =',I11)
      IF (IER.EQ.2.AND.NF2ERR.LE.10) THEN
         WRITE (IPR,120) MP,MT,MTS
         CALL ERROR
         ENDIF
120   FORMAT ('0**ERROR** NOT ENOUGH SPACE TO DEFINE P, T, OR TS ',
     *   'ARRAYS : MP=',I5,' MT=',I5,' MTS=',I5)
      GO TO 590
C
C  CHECK FOR A FLASH-FLOOD-GUIDANCE-ONLY RUN
C  IF IT IS, CHECK TO SEE IF THERE IS AN FFG OPERATION (OP # 32)
C  IN THE SEGMENT.  IF THERE IS NOT, SKIP PROCESSING THIS SEGMENT
130   IF (IFFG.NE.1) GO TO 135
         LOCP=1
         CALL FSERCH (32,RTNNAM,LOCP,P,MP)
         IF (LBUG) WRITE (IODBUG,125) LOCP
125   FORMAT (' ** IN FAZE2 **  FLASH-FLOOD-GUIDANCE-ONLY RUN - ',
     * 'FLASH-FLOOD-GUIDANCE OPERATION AT P ARRAY LOC=',I4)
         IF (LOCP.EQ.0) GO TO 610
C
C  FILL COMMON BLOCK FLARYS FROM COMMON BLOCK FCSEGN
135   LTS=NTS
      LP=NP
      LC=NC
      LT=NT
      LD=ND
C
C  SET ISEG IN COMMON BLOCK WHERE FROM IDSEGN IN COMMON BLOCK FCSEGN
      ISEG(1)=IDSEGN(1)
      ISEG(2)=IDSEGN(2)
C
      IF (LBUG) WRITE (IODBUG,140)
140   FORMAT (' IN FAZE2 - ABOUT TO CALL FCEXCT')
C
C  COMPUTE THE MINIMUM DELTA T FOR A SEGMENT BY LOOKING AT
C  THE DELTA TS FOR EACH OPERATION IN THE SEGMENT
      CALL FCEXCT (MINDT,IER)
C
      IF (LBUG) WRITE (IODBUG,150)
150   FORMAT (' IN FAZE2 - BACK FROM FCEXCT')
      IF (.NOT.NOTCPU) CALL FPRCPU
C
C     IER = 0, ALL OK
C         = 1, CANNOT FIND VALID START/END TIMES
C         = 2, CHANGE START/END TIMES, REDUCE SIMULATION PERIOD
      IF (IER.EQ.0) GO TO 155
      IF (IER.EQ.1) GO TO 590
C
      IF (LHRRUN.GT.0) GO TO 35
         LHRRUN=24
         LDARUN=LDARUN-1
   35 LDA=LDARUN
      LHR=LHRRUN
C
      CALL MDYH2 (LDARUN,LHRRUN,NENDM,NENDD,NENDY,NENDH,NZXX,NDXX,
     *   INPTZC)
      CALL MDYH2 (IDARUN,IHRRUN,NBEGM,NBEGD,NBEGY,NBEGH,NZXX,NDXX,
     *   INPTZC)
C
      WRITE (IPR,440) NBEGM,NBEGD,NBEGY,NBEGH,INPTZC,
     *              NENDM,NENDD,NENDY,NENDH,INPTZC
C
155   IF (LBUG) WRITE (IODBUG,160)
160   FORMAT (' IN FAZE2 - ABOUT TO CALL FCARGS')
C
C  SET ANY NON-UNIVERSAL TECHNIQUE AND ARGUMENT VALUES AND LOADS
C  ANY RUN-TIME MODS FOR THE CURRENT SEGMENT INTO ARRAY MODCRD
      CALL FCARGS (MODCRD,NCARDS,MAXCRD,IER)
      IF (LBUG) WRITE (IODBUG,170)
170   FORMAT (' IN FAZE2 - BACK FROM FCARGS')
      IF (.NOT.NOTCPU) CALL FPRCPU
      IF (IER.EQ.0) GO TO 190
      IF (NF2ERR.LE.10) THEN
         WRITE (IPR,180) IDSEGN
         CALL WARN
         ENDIF
180   FORMAT ('0**WARNING** PROBLEM IN SEGMENT ',2A4,
     *   ' GETTING TECHNIQUES, ARGUMENTS OR MODS.')
      GO TO 590
C
190   IF (NOPROT.EQ.1) GO TO 210
C
      IF (LBUG) WRITE (IODBUG,200) IDSEGN
200   FORMAT (' IDSEGN=',2A4)
C
C  CHANGE MOD CARDS IF IN INTERACTIVE FORECAST PROGRAM
C  (FMDINP WAS ORIGINALLY SUPPOSED TO MODIFY MOD CARDS FOR USE
C  BY THE INTERACTIVE PROGRAM. THERE IS NO NEED TO CHANGE THEM,
C  SO FMDINP IS CURRENTLY STUBBED OFF.)
210   IF (MAINUM.EQ.0) CALL FMDINP (MAXCRD,NCARDS,MODCRD,IDSEGN)
C
      IF (ITYPRN.EQ.1) GO TO 240
C
      IF (LBUG) WRITE (IODBUG,220)
220   FORMAT (' IN FAZE2 - ABOUT TO CALL FCDATE')
C
C  FILL COMMON BLOCK FCSEGC WITH THE CARRYOVER DATES AND TIMES
      CALL FCDATE (IDSEGN,0)
C
      IF (LBUG) WRITE (IODBUG,230)
230   FORMAT (' IN FAZE2 - BACK FROM FCDATE')
      IF (.NOT.NOTCPU) CALL FPRCPU
C
240   IF (NCOPS.LT.1) GO TO 340
      IF (IHRRUN.GT.0) GO TO 250
      IHRRUN=24
      IDARUN=IDARUN-1
C
250   IF (LBUG) WRITE (IODBUG,260)
260   FORMAT (' IN FAZE2 - BEFORE CALL TO FGETCO')
C
C  READ CARRYOVER INFORMATION INTO THE C ARRAY
      CALL FGETCO (IDSEGN,IDARUN,IHRRUN,C,MC,'ERROR',IER)
      IF (LBUG) WRITE (IODBUG,270)
270   FORMAT (' IN FAZE2 - AFTER CALL TO FGETCO')
      IF (.NOT.NOTCPU) CALL FPRCPU
      IF (IHRRUN.LT.24) GO TO 280
         IHRRUN=0
         IDARUN=IDARUN+1
280   IF (IER.EQ.0) GO TO 340
      IF (NF2ERR.LE.10) THEN
         WRITE (IPR,290) IDSEGN
         CALL ERROR
         ENDIF
290   FORMAT ('0**ERROR** ERROR ENCOUNTERED IN FGETCO FOR SEGMENT ',
     *   2A4,'.')
      IF (NCSTOR.GT.0) WRITE (IPR,300)
300   FORMAT ('0**NOTE** CARRYOVER SAVE TERMINATED.')
      NCSTOR=0
      IDA=IDARUN
      IHR=IHRRUN
      LDA=LDARUN
      LHR=LHRRUN
      IDADAT=IDARUN
      IF (IER.NE.1) GO TO 320
         CALL MDYH2 (IDARUN,IHRRUN,NBEGM,NBEGD,NBEGY,NBEGH,NZXX,NDXX,
     *      INPTZC)
         CALL MDYH2 (LDARUN,LHRRUN,NENDM,NENDD,NENDY,NENDH,NZXX,NDXX,
     *      INPTZC)
         IF (NF2ERR.LE.10) THEN
            WRITE (IPR,310) IDSEGN,NBEGM,NBEGD,NBEGY,NBEGH,
     *         INPTZC,NENDM,NENDD,NENDY,NENDH,INPTZC
            CALL WARN
            ENDIF
310   FORMAT ('0**WARNING** START AND END DATES HAVE BEEN ',
     *  'CHANGED IN SEGMENT ',2A4,
     *  '. START=',I2.2,'/',I2.2,'/',I4,'-',I2.2,A4,
     *  ' END=',I2.2,'/',I2.2,'/',I4,'-',I2.2,A4)
         GO TO 340
320   IF (NF2ERR.LE.10) THEN
         WRITE (IPR,330) IDSEGN
         CALL ERROR
         ENDIF
330   FORMAT ('0**ERROR** UNABLE TO READ CARRYOVER FOR SEGMENT ',
     *   2A4,'.')
      GO TO 590
C
C  SET VALUES IN FCTIME - GET DATA FOR ENTIRE PERIOD
340   IDA=IDARUN
      IHR=IHRRUN
      LDA=LDARUN
      LHR=LHRRUN
      IDADAT=IDARUN
C
C  SEARCH P ARRAY TO SEE IF API-CIN OPERATION IN THIS SEGMENT.
C  IF SO, SET VARIABLE NEEDTX SO THAT TEMPERATURE T.S. ARE
C  CHECKED FOR MISSING DATA IN ROUTINE FCTSRD.
      NEEDTX=0
      LOCCIN=1
      CALL FSERCH (33,APINAM,LOCCIN,P,MP)
      IF (LOCCIN.GT.0) NEEDTX=1
C
C  CHECK IF API-CONT OPERATION USING ATI IS IN THIS SEGMENT.
C  IF SO, SET NEEDTX=1 FOR SAME REASON AS ABOVE.
      LOCCIN=1
350   CALL FSERCH (24,APINAM,LOCCIN,P,MP)
      IF (LOCCIN.EQ.0) GO TO 360
      IVOPT=P(LOCCIN+13)
      IF (IVOPT.NE.2) GO TO 350
      NEEDTX=1
C
360   IF (LBUG) WRITE (IODBUG,370) NEEDTX
370   FORMAT (' IN FAZE2 - ABOUT TO CALL FCTSRD, NEEDTX=',I2)
C
C  READ ALL INPUT AND UPDATE TIME SERIES INTO THE D ARRAY
      CALL FCTSRD (TS,MTS,D,MD,IHRRUN,IER,MISSJD,MISSHR,IWKLOC)
      IF (LBUG) WRITE (IODBUG,380)
380   FORMAT (' IN FAZE2 - BACK FROM FCTSRD')
      IF (.NOT.NOTCPU) CALL FPRCPU
C  RESET WHERE COMMON BLOCK
      IOPNUM=0
      CALL UMEMOV (IDSEGN,ISEG,2)
      CALL UMEMOV (RTNNAM,OPNAME,2)
C  IER=0, ALL OK
C     =1, CANNOT READ TIME SERIES
C     =2, MISSING DATA ENCOUNTERED, REDUCE SIMULATION PERIOD
      IF (IER.EQ.0) GO TO 500
      IF (IER.EQ.1) GO TO 460
      CALL MDYH2 (MISSJD,MISSHR,MMONTH,MDAY,MYEAR,MHOUR,NZXX,NDXX,
     *   INPTZC)
      LHRRUN=((MISSHR-1)/MINDT)*MINDT
      LDARUN=MISSJD
      IF (LHRRUN.GT.0) GO TO 390
         LHRRUN=24
         LDARUN=LDARUN-1
390   LDA=LDARUN
      LHR=LHRRUN
      CALL MDYH2 (LDARUN,LHRRUN,NENDM,NENDD,NENDY,NENDH,NZXX,NDXX,
     *   INPTZC)
      WRITE (IPR,400) NENDM,NENDD,NENDY,NENDH,INPTZC,
     *  MMONTH,MDAY,MYEAR,MHOUR,INPTZC
      CALL WARN
400   FORMAT ('0**WARNING** THE ENDING DATE HAS BEEN ',
     *  'CHANGED TO ',I2.2,'/',I2.2,'/',I4,'-',I2.2,A4,
     *  ' BECAUSE MISSING DATA WERE ENCOUNTERED AT ',
     *  I2.2,'/',I2.2,'/',I4,'-',I2.2,A4,'.')
      CALL MDYH2 (IDARUN,IHRRUN,NBEGM,NBEGD,NBEGY,NBEGH,
     *   NZXX,NDXX,INPTZC)
      WRITE (IPR,440) NBEGM,NBEGD,NBEGY,NBEGH,INPTZC,
     *              NENDM,NENDD,NENDY,NENDH,INPTZC
440   FORMAT ('0**NOTE** THE RUN PERIOD IS NOW FROM ',
     *  I2.2,'/',I2.2,'/',I4,'-',I2.2,A4,' TO ',
     *  I2.2,'/',I2.2,'/',I4,'-',I2.2,A4,'.')
C  CHECK WHETHER THE START OF THE RUN (IDARUN,IHRRUN) IS BEFORE
C  THE END OF THE RUN (LDARUN,LHRRUN).  STATUS RETURNED IN IILT.
      CALL FDATCK (IDARUN,IHRRUN,LDARUN,LHRRUN,ILT,IILT)
      IF (IILT.EQ.1) GO TO 480
      WRITE (IPR,450)
      CALL ERROR
450   FORMAT ('0**ERROR** THE ENDING DATE AND TIME IS BEFORE ',
     *  'OR AT THE BEGINNING DATE AND TIME.')
      GO TO 630
460   IF (NF2ERR.LE.10) THEN
         WRITE (IPR,470) IDSEGN
         CALL ERROR
         ENDIF
470   FORMAT ('0**ERROR** UNABLE TO READ TIME SERIES ',
     *   'FOR SEGMENT ',2A4,'.')
      GO TO 590
C
480   IF (NCSTOR.EQ.0) GO TO 500
C
C  CHECK IF DATES FOR WHICH CARRYOVER WILL BE SAVED ARE BEFORE OR AT
C  THE END OF THE RUN
      CALL FDATCK (LDARUN,LHRRUN,ICDAY(NCSTOR),ICHOUR(NCSTOR),
     *   ILT,IILT)
      IF (IILT.NE.1) GO TO 500
      WRITE (IPR,490)
      CALL ERROR
490   FORMAT ('0**ERROR** THE ENDING DATE AND TIME ARE ',
     *  'PRIOR TO THE LAST CARRYOVER SAVE DATE.')
      NCSTOR=0
C
C  ENDRUN MUST BE AT LEAST 24 HRS PAST LSTCMPDY FOR AN FFG RUN
C  (TURN OFF FFG ACTIVITY IF CRITERIA NOT MET)
500   IF (IFFG.EQ.0) GO TO 505
      LSTCMP=(LDACPD-1)*24+LHRCPD
      LSTRUN=(LDARUN-1)*24+LHRRUN
      IF (LSTRUN.GE.(LSTCMP+24)) GO TO 505
      CALL MDYH1 (LDACPD,LHRCPD,JCMO,JCDA,JCYR,JCHR,NOUTZ,
     *   NOUTDS,TZC)
      WRITE (IPR,405) NENDM,NENDD,NENDY,NENDH,INPTZC,
     *   JCMO,JCDA,JCYR,JCHR,TZC
      CALL WARN
405   FORMAT ('0**WARNING** THE FFG TECHNIQUE HAS BEEN TURNED ',
     *  'OFF AS THE RESET END OF THE RUN',
     *  ' (',I2.2,'/',I2.2,'/',I4,'-',I2.2,A4,')' /
     *  11X,'IS NOW LESS THAN 24 HOURS BEYOND THE END OF THE ',
     *  'COMPUTATIONAL PERIOD',
     *  ' (',I2.2,'/',I2.2,'/',I4,'-',I2.2,A4,').')
C
C  IF THE RUN WAS FLASH-FLOOD GUIDANCE ONLY, JUMP OUT OF SEGMENT LOOP
C  EFFECTIVELY KILLING THIS FCEXEC FUNCTION EXECUTION.  OTHERWISE,
C  JUST SHUT OFF FFG PROCESSING
      IF (IFFG.EQ.1) GO TO 630
      IFFG=0
C
C  TURN OFF ALL PRINTOUT IS THIS IS A FLASH FLOOD GUIDANCE ONLY RUN
505   NE=NERRS
      IF (IFFG.EQ.1) NOPROT=1
C
C  SET FLAG FOR FLDGRF FILES
      IOPFIL55=0
C
C  SET FLAG FOR FLDVIEW FILES
      IOPFMP55=0
C
      IF (IOUTYP.EQ.1) THEN 
C     OPEN MODEL STATE FILES 
         CALL IFP_ICP (IDA,IHR,LDA,LHR,IDARUN,LDARUN,
     *      METRIC,P,MP,IDSEGN,IFILERR)
         IF (IFILERR.EQ.1) THEN
            IOUTYP=0
            WRITE (IPR,507)
            CALL WARN
507   FORMAT ('0**WARNING** TROUBLE OPENING MODEL STATE FILES. ',
     *  'FILES WILL NOT BE CREATED.')
            ENDIF
         ENDIF
      
      IF (LBUG) WRITE (IODBUG,510)
510   FORMAT (' IN FAZE2 - ABOUT TO CALL FDRIVE')
      IF (DUMPCB) CALL FDMPCB (DCBA,DCBB,DCBC,DCBD,DCBE,DCBF)
C
C  CALL ROUTINES THAT EXECUTE THE OPERATIONS FOR THIS SEGMENT
      CALL FDRIVE (P,MP,C,MC,T,MT,TS,MTS,D,MD,IHRRUN)
      IF (LBUG) WRITE (IODBUG,520)
520   FORMAT (' IN FAZE2 - BACK FROM FDRIVE')
      IF (.NOT.NOTCPU) CALL FPRCPU
      IF (DUMPCB) CALL FDMPCB (DCBA,DCBB,DCBC,DCBD,DCBE,DCBF)
C  RESET WHERE COMMON BLOCK
      IOPNUM=0
      CALL UMEMOV (IDSEGN,ISEG,2)
      CALL UMEMOV (RTNNAM,OPNAME,2)
      IF (NE.EQ.NERRS) GO TO 550
      IF (NF2ERR.LE.10) THEN
         WRITE (IPR,530) IDSEGN
         CALL ERROR
         WRITE (IPR,540)
         ENDIF
530   FORMAT ('0**ERROR** ERROR OCCURRED PROCESSING OPERATIONS ',
     *  'TABLE FOR SEGMENT ',2A4,'.')
540   FORMAT ('0**NOTE** SEGMENT ENDED - NO TIME SERIES WRITTEN ',
     *   'TO FILE.')
      GO TO 590
C
C  WRITE OUTPUT AND UPDATE TIME SERIES FROM THE D ARRAY TO FILE
C  IF THIS IS NOT A FFG-ONLY RUN
550   IF (LBUG) WRITE (IODBUG,560) IFFG
560   FORMAT (' IN FAZE2 - ABOUT TO CALL FCTSWT. IFFG=',I2)
      IF (LBUG) WRITE (IPR,575) ' ',IDSEGN,IFFG,IER
575   FORMAT (A,'IDSEGN=',2A4,' IFFG=',I2,' IER=',I1)
      IF (IFFG.NE.1) THEN
         CALL FCTSWT (TS,MTS,D,MD,IHRRUN,IWKLOC,IER)
         IF (LBUG) WRITE (IPR,575) ' AFTER CALLING FCTSWT : ',
     *      IDSEGN,IFFG,IER
         ENDIF
C  RESET WHERE COMMON BLOCK
      IOPNUM=0
      CALL UMEMOV (IDSEGN,ISEG,2)
      CALL UMEMOV (RTNNAM,OPNAME,2)
      IF (LBUG) WRITE (IODBUG,570)
570   FORMAT (' IN FAZE2 - BACK FROM FCTSWT')
      IF (.NOT.NOTCPU) CALL FPRCPU
      IF (IER.EQ.0) GO TO 610
      IF (NF2ERR.LE.10) THEN
         WRITE (IPR,580) IDSEGN
         CALL ERROR
         ENDIF
580   FORMAT ('0**ERROR** ERROR OCCURRED WRITING TIME SERIES ',
     *  'TO FILE FOR SEGMENT ',2A4,'.')
C
590   IF (NCSTOR.EQ.0) GO TO 600
         WRITE (IPR,300)
         NCSTOR=0
C
600   NF2ERR=NF2ERR+1
C
610   IF (KLCODE.GT.8) GO TO 630
C
620   CONTINUE
C
630   IF (NF2ERR.GT.0) WRITE (IPR,640) NF2ERR
640   FORMAT ('0**NOTE** TOTAL NUMBER OF ERRORS ENCOUNTERED IN ',
     *  'ROUTINE FAZE2 IS ',I4,'.')
C
      IOPNUM=IOLDOP
      CALL UMEMOV (OPNOLD,OPNAME,2)
C
      IF (ITRACE.GT.0) WRITE (IODBUG,*) 'EXIT FAZE2'
C
      RETURN
C
      END
