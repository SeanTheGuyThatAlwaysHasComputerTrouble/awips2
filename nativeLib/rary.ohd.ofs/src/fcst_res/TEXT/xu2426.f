C MEMBER XU2426
C  (from old member FCXU2426)
C
      SUBROUTINE XU2426(SUNUM,PO,W,D,LOCWS,LOCOWS,IDPT)
C---------------------------------------------------------------------
C  SUBROUTINE TO GET PARMS, CARRYOVER AND TIME-SERIES VALUES FOR THE
C  ENTRY-INTO-FLASHBOARDS UTILITY (#24) AND TO CALL ROUTINE TO DETERMINE
C  IF OPERATION CONTROL SHOULD GO TO THE 'FLASHBOARDS' SCHEME.
C  (INDICATED BY A .TRUE. VALUE FOR GOFLSH IN /FLAS26.)
C
C  EXECUTION OF THIS UTILITY REQUIRES THE PARAMETERS FROM THE COMPANION
C  FLASHBOARD SCHEME.
C---------------------------------------------------------------------
C  WRITTEN BY - JOE OSTROWSKI - HRL - AUGUST 1983
C---------------------------------------------------------------------
C
      INCLUDE 'common/resv26'
      INCLUDE 'common/exg26'
      INCLUDE 'common/fdbug'
      INCLUDE 'common/flas26'
      INCLUDE 'common/xqin26'
C
      DIMENSION PO(1),W(1),D(1),IDPT(1),LOCWS(1),LOCOWS(1),SIGELV(10)
C
C    ================================= RCS keyword statements ==========
      CHARACTER*68     RCSKW1,RCSKW2
      DATA             RCSKW1,RCSKW2 /                                 '
     .$Source: /fs/hseb/ob72/rfc/ofs/src/fcst_res/RCS/xu2426.f,v $
     . $',                                                             '
     .$Id: xu2426.f,v 1.2 1999/04/23 17:08:19 page Exp $
     . $' /
C    ===================================================================
C
C
      IF (IBUG.GE.1) WRITE(IODBUG,1600)
 1600 FORMAT('   *** ENTER XU2426 ***')
C
C  GET LEVEL OF THIS UTILITY
C
ccc      CALL XBLV26(SUNUM,IBASE,LEVEL)
      ISUNUM=SUNUM
      IBASE=ISUNUM/10
      LEVEL=ISUNUM-IBASE*10
C
C  THE PARMS, CO AND TS INFO FOR THIS UTILITY ARE ACTUALLY HELD IN THE
C  DEFINITION OF THE COMPANION FLASHBOARD SCHEME (THE ONE WITH THE SAME
C  LEVEL). THE PIN ROUTINE GUARANTEES THAT THIS COMPANIONSHIP EXISTS.
C
      COMPAN = 1120.01 + LEVEL
      CALL XPTR26(COMPAN,PO,IORD,IBASE,LEVEL,LOCPM,LOCTS,LOCCO)
C
C  SET EXECUTION POINTER LOCATION
C
      LOCEX = IORD*3
C
C  SET CARRYOVER OFFSET.
C
      IOFFCO = LOCWS(4) + LOCCO - 2
C
C  SEE IF SE'RE IN NEED OF FLASHBOARDS
C
      GOFLSH = .FALSE.
      IF (W(IOFFCO+1) .GE. 1.00) GOFLSH = .TRUE.
C
C  IF ALREADY IN FLASHBOARDS FROM PREVIOUS PERIOD, NO NEED TO DETERMINE
C  NEED TO GET IN, JUST LET FLASHBOARD ROUTINE DETERMINE NEED TO GET OUT
C
      IF (GOFLSH) GO TO 9000
C
C  NOW FILL PARAMETER VALUES
C
      NUMLG = PO(LOCPM)
      NUMSM = PO(LOCPM+1)
C
C  GET CARRYOVER VALUES FOR NO. OF LARGE AND SMALL BOARDS DOWN.
C
      NLGDN = W(IOFFCO+2)
      NSMDN = -999
      IF (NUMSM.GT.0) NSMDN = W(IOFFCO+3)
C
C  FILL SIGELV ARRAY POSITIONS FOR LARGE BOARD INFO
C
      NSIGEL = 10
      DO 10 I=1,NSIGEL
      SIGELV(I) = -999.0
   10 CONTINUE
C
      LOCGLG = LOCPM + 2
C
      SIGELV(1) = PO(LOCGLG)
      SIGELV(2) = PO(LOCGLG+1)
      SIGELV(3) = PO(LOCGLG+2)
      SIGELV(4) = PO(LOCGLG+3)
C
      DISTLG = PO(LOCGLG+4)
C
      LOCLRT = LOCGLG + 5
      LOCNXT = LOCLRT + 2*PO(LOCLRT) + 1
C
C  GET INFO FOR SMALL BOARDS IF ANY EXIST
C
      IF (NUMSM.EQ.0) GO TO 30
C
      LOCGSM = LOCNXT
C
      SIGELV(5) = PO(LOCGSM)
      SIGELV(6) = PO(LOCGSM+1)
      SIGELV(7) = PO(LOCGSM+2)
      SIGELV(8) = PO(LOCGSM+3)
C
      IF (SIGELV(4).EQ.SIGELV(8)) SIGELV(4) = SIGELV(4) + 0.01
C
      DISTSM = PO(LOCGSM+4)
C
      LOCSRT = LOCGSM + 5
      LOCNXT = LOCSRT + 2*PO(LOCSRT) + 1
C
C  LOOK FOR GATE INFO IF GATE EXISTS.
C
   30 CONTINUE
      IGATE = PO(LOCNXT)
      LOCNXT = LOCNXT + 1
C
      IF (IGATE.EQ.1) GO TO 50
C
C  SET MISSING GATE VALUES HERE
C
      NGATE = -999
      BGNGAT = -999.0
      GATMAX = -999.0
      NGTR = 0
      NPGATE = 0
      GO TO 70
C
C  GET GATE VALUES
C
   50 CONTINUE
      SIGELV(9) = PO(LOCNXT)
      SIGELV(10)= PO(LOCNXT+1)
C
      GATMAX = PO(LOCNXT+2)
C
      NFUTUR = PO(LOCNXT+3)
C
C  GET GATE CARRYOVER HERE
C
      LOCCOG = 3
      IF (NUMSM.GT.0) LOCCOG = LOCCOG + 1
C
C  GET OBSERVED GATE OPENING AT BEGINNING OF PERIOD
C
      BGNGAT = W(IOFFCO+LOCCOG)
C
C  SET GATE STATUS
C
      NGATE = W(IOFFCO+LOCCOG+1)
C
      NGTR = 2*PO(LOCNXT+4) + 1
      NPGATE = 4
C
C  SEE IF MAXGEN CURVE NEEDS TO BE GENERATED
C   (SKIP AN EXTRA SPACE FOR PEAK REPLACING DISCHARGE)
C
   70 CONTINUE
      LOCNXT = LOCNXT + NGTR + NPGATE + 1
C
      NHEAD = PO(LOCNXT)
      LOCNXT = LOCNXT + 1
C
      IF (NHEAD.EQ.0) GO TO 80
C
C  COMPUTE THE TOTALQ VS. MAXGEN CURVE
C
      CALL XFTQ26(COMPAN,PO,W,LOCOWS,1)
C
C  COMPUTE THE MAX GEN BASED ON THE PERIOD BEGINNING ELEVATION.
C
      CALL NTER26(QO1,QGENMX,W(LOCOWS(8)),W(LOCOWS(8)+NSE),NSE,IFLAG,
     . NTERP,IBUG)
      IF (NHEAD.LT.0) GO TO 90
C
      LOCNXT = LOCNXT + 2*NHEAD + 3
      GO TO 90
C
C  GET CONSTANT GENERATION Q
C
   80 CONTINUE
      QGENMX = PO(LOCNXT)
      LOCNXT = LOCNXT + 1
C
C  SET SLUICE DISCHARGE
C
   90 CONTINUE
      SLUICE = PO(LOCNXT)
C
C  GET TIME-SERIES INFO (BUT ONLY IF AN ADJUSTED RUN).
C
C
C  GET TIME-SERIES INFO (BUT ONLY IF AN ADJUSTED RUN).
C
      IF (.NOT.ADJRUN) GO TO 350
C
      LOCTSP = W(LOCEX-1)
      IOFFTS = IDOFST * NTIM24
C
C  GET NO. OF LARGE BOARDS DOWN
C
      LOCTSL = IDPT(LOCTSP)
      IF (LOCTSL.EQ.0) GO TO 310
      IF (IFMSNG(D(LOCTSL+IOFFTS+NS2-1)).EQ.0)
     .  NLGDN = D(LOCTSL+IOFFTS+NS2-1)
C
C  GET NO. OF SMALL BOARDS DOWN (IF USED.)
C
  310 CONTINUE
      IF (NUMSM.LE.0) GO TO 320
      LOCSMD = IDPT(LOCTSP+1)
      IF (LOCSMD.EQ.0) GO TO 320
      IF (IFMSNG(D(LOCSMD+IOFFTS+NS2-1)).EQ.0)
     .   NSMDN = D(LOCSMD+IOFFTS+NS2-1)
C
C  NO GATE TIME-SERIES IF NO GATE
C
  320 CONTINUE
      IF (NGATE.EQ.-999) GO TO 330
C
      LOCTSG = IDPT(LOCTSP+2)
      GATOP2 = D(LOCTSG+IOFFTS+NS2-1)
      IF (LOCTSG.EQ.0) GATOP2 = -999.0
C
C  GET TIME-SERIES VALUE FOR MAX GEN Q AND SLUICE Q
C
  330 CONTINUE
      LOCTSQ = IDPT(LOCTSP+3)
      LOCTSS = IDPT(LOCTSP+4)
C
      QGX = D(LOCTSQ+IOFFTS+NS2-1)
      QSX = D(LOCTSS+IOFFTS+NS2-1)
C
      IF (IFMSNG(QGX).EQ.1.OR.LOCTSQ.EQ.0) GO TO 340
      QGENMX = QGX * NTIM24
C
  340 CONTINUE
      IF (IFMSNG(QSX).EQ.1.OR.LOCTSS.EQ.0) GO TO 350
      SLUICE = QSX * NTIM24
C
C  GO DETERMINE NEED TO GO INTO FLASHBOARDS
C
  350 CONTINUE
      CALL GOFL26(GATOP2,W(LPTQIM),SIGELV,PO(LESSTO),PO(LESELV))
C
C  NEED TO STORE GATE CONDITION SET IN GOFL26
C  ALSO NEED TO STORE 'FLASH' CONDITION.
C
      IF (IGATE .EQ. 1) W(IOFFCO+LOCCOG+1) = NGATE
      STATE = 0.01
      IF (GOFLSH) STATE = 1.01
      W(IOFFCO+1) = STATE
C
 9000 CONTINUE
      IF (IBUG.GE.1) WRITE(IODBUG,1699)
 1699 FORMAT('    *** EXIT XU2426 ***')
      RETURN
      END
