C MEMBER XS1226
C  (from old member FCXS1226)
C
      SUBROUTINE XS1226(SUNUM,PO,W,D,LOCWS,LOCOWS,IDPT)
C---------------------------------------------------------------------
C  SUBROUTINE TO GET PARMS, CARRYOVER AND TIME-SERIES VALUES FOR THE
C  FLASHBOARD SCHEME (S/U#12) AND TO CALL ROUTINE TO COMPUTE DISCHARGE
C  FROM THE RESERVOIR WITH FLASHBOARDS.
C---------------------------------------------------------------------
C  WRITTEN BY - JOE OSTROWSKI - HRL - AUGUST 1983
C---------------------------------------------------------------------
C
      INCLUDE 'common/resv26'
      INCLUDE 'common/exg26'
      INCLUDE 'common/fdbug'
      INCLUDE 'common/flas26'
      INCLUDE 'common/xqin26'
C
      DIMENSION PO(1),W(1),D(1),IDPT(1),LOCWS(1),LOCOWS(1),SIGELV(10),
     . SIGRIS(10),SIGFAL(10),SIGSTO(10)
      INTEGER SIGRIS,SIGFAL
      LOGICAL GFLORG
C
C    ================================= RCS keyword statements ==========
      CHARACTER*68     RCSKW1,RCSKW2
      DATA             RCSKW1,RCSKW2 /                                 '
     .$Source: /fs/hseb/ob72/rfc/ofs/src/fcst_res/RCS/xs1226.f,v $
     . $',                                                             '
     .$Id: xs1226.f,v 1.1 1995/09/17 19:07:03 dws Exp $
     . $' /
C    ===================================================================
C
C
      IF (IBUG.GE.1) WRITE(IODBUG,1600)
 1600 FORMAT('   *** ENTER XS1226 ***')
C
C  GET THE LOCATION OF THE PARMS, TS AND CO INFO IN THE PO ARRAY
C
      CALL XPTR26(SUNUM,PO,IORD,IBASE,LEVEL,LOCPM,LOCTS,LOCCO)
      ISUNUM = IBASE*10 + LEVEL
C
C  SET EXECUTION FLAG LOCATION.
C
      LOCEX = IORD*3
C
C  SET CARRYOVER OFFSET.
C
      IOFFCO = LOCWS(4) + LOCCO - 2
C
C  GET STATE OF 'GOFLSH' FROM LAST PERIOD
C
      GOFLSH = .FALSE.
      IF (W(IOFFCO+1).GE.1.00) GOFLSH = .TRUE.
C
C  SET INDICATOR FOR CURVE GENERATION.
C
      SIGSTO(1) = -999.0
C
C  NOW FILL PARAMETER VALUES
C
      GATOP2 = -999.0
      QOK2 = -999.0
      NTERPQ = NTERP
C
      NUMLG = PO(LOCPM)
      NUMSM = PO(LOCPM+1)
C
C  GET CARRYOVER VALUES FOR NO. OF LARGE AND SMALL BOARDS DOWN.
C
      NLGDN = W(IOFFCO+2)
      NSMDN = -999
      IF (NUMSM.GT.0) NSMDN = W(IOFFCO+3)
C
C  FILL SIGELV ARRAY POSITIONS FOR LARGE BOARD INFO
C
      NSIGEL = 10
      DO 10 I=1,NSIGEL
      SIGELV(I) = -999.0
   10 CONTINUE
C
      LOCGLG = LOCPM + 2
C
      SIGELV(1) = PO(LOCGLG)
      SIGELV(2) = PO(LOCGLG+1)
      SIGELV(3) = PO(LOCGLG+2)
      SIGELV(4) = PO(LOCGLG+3)
C
      DISTLG = PO(LOCGLG+4)
C
C  GET LARGE BOARD RATING INFO.
C
      LOCLRT = LOCGLG + 5
      NELVLG = PO(LOCLRT)
      LOCLSE = LOCLRT + 1
      LOCLSQ = LOCLSE + NELVLG
      LOCNXT = LOCLSQ + NELVLG
C
C  GET INFO FOR SMALL BOARDS IF ANY EXIST
C
      IF (NUMSM.EQ.0) GO TO 30
C
      LOCGSM = LOCNXT
C
C  FILL SIGELV ARRAY FOR SMALL BOARD INFO.
C
      SIGELV(5) = PO(LOCGSM)
      SIGELV(6) = PO(LOCGSM+1)
      SIGELV(7) = PO(LOCGSM+2)
      SIGELV(8) = PO(LOCGSM+3)
C
      IF (SIGELV(4).EQ.SIGELV(8)) SIGELV(4) = SIGELV(4) + 0.01
C
      DISTSM = PO(LOCGSM+4)
C
C  GET SMALL BOARD RATING INFO.
C
      LOCSRT = LOCGSM + 5
      NELVSM = PO(LOCSRT)
      LOCSSE = LOCSRT + 1
      LOCSSQ = LOCSSE + NELVSM
      LOCNXT = LOCSSQ + NELVSM
C
C  LOOK FOR GATE INFO IF GATE EXISTS.
C
   30 CONTINUE
      IGATE = PO(LOCNXT)
      LOCNXT = LOCNXT + 1
C
      IF (IGATE.EQ.1) GO TO 50
C
C  SET MISSING GATE VALUES HERE
C
      NGATE = -999
      BGNGAT = -999.0
      GATMAX = -999.0
      NELVFL = 0
      NPGATE = 0
      GO TO 70
C
C  GET GATE VALUES
C
   50 CONTINUE
      SIGELV(9) = PO(LOCNXT)
      SIGELV(10)= PO(LOCNXT+1)
C
      GATMAX = PO(LOCNXT+2)
C
      NFUTUR = PO(LOCNXT+3)
C
C  GET GATE CARRYOVER HERE
C
      LOCCOG = 3
      IF (NUMSM.GT.0) LOCCOG = LOCCOG + 1
C
C  SET OBSERVED GATE OPENING AT BEGINNING OF PERIOD.
C
      BGNGAT = W(IOFFCO+LOCCOG)
C
C  SET GATE OPENING STATUS HERE.
C
      NGATE = W(IOFFCO+LOCCOG+1)
C
C  GET GATE RATING CURVE INFO.
C
      LOCGRT = LOCNXT + 4
      NELVFL = PO(LOCGRT)
      LOCGSE = LOCGRT + 1
      LOCGSQ = LOCGSE + NELVFL
      NPGATE = 5
C
C  SET REPLACING DISCHARGE INFO.
C
   70 CONTINUE
      LOCNXT = LOCNXT + 2*NELVFL + NPGATE
C
      TESTPK = PO(LOCNXT)
      LOCPKO = LOCOWS(4)
      LOCPKP = LOCOWS(4) + NTOTPK
      LOCNXT = LOCNXT + 1
C
C  SEE IF MAXGEN CURVE NEEDS TO BE GENERATED
C
      NHEAD = PO(LOCNXT)
      LOCNXT = LOCNXT + 1
C
      IF (NHEAD.EQ.0) GO TO 80
C
C  COMPUTE THE TOTALQ VS. MAXGEN CURVE
C
      CALL XFTQ26(SUNUM,PO,W,LOCOWS,1)
C
C  COMPUTE THE MAX GEN BASED ON THE PERIOD BEGINNING ELEVATION.
C
      QGET = (QO1+QIM)*0.5
      CALL NTER26(QGET,QGENMX,W(LOCOWS(8)),W(LOCOWS(8)+NSE),NSE,IFLAG,
     . NTERP,IBUG)
      IF (NHEAD.LT.0) GO TO 90
C
      LOCNXT = LOCNXT + 2*NHEAD + 3
      GO TO 90
C
C  GET CONSTANT MAX GENERATION Q
C
   80 CONTINUE
      QGENMX = PO(LOCNXT)
      LOCNXT = LOCNXT + 1
C
C  SET SLUICE DISCHARGE
C
   90 CONTINUE
      SLUICE = PO(LOCNXT)
C
C  PICK UP OLD NON-SPILLWAY DISCHARGE HERE
C
      LOCNSQ = 3
      IF (NUMSM.GT.0) LOCNSQ = LOCNSQ + 1
      IF (IGATE.EQ.1) LOCNSQ = LOCNSQ + 2
      QOK1 = W(IOFFCO+LOCNSQ)
C
C  FILL ALL ACCESSORY ARRAYS AT THIS POINT. THESE ARE THE SIGNIFICANT
C  FALLING ARRAY, THE SIGNIFICANT RISING ARRAY, AND THE VARIOUS ROUTING
C  ARRAYS (FOR MODIFIED PULS ROUTING).
C
C  SET SIGNIFICANT FALLING ELEVATION POSITIONS FIRST.
C
      NFAL = 1
      SIGFAL(NFAL) = 2
C
C  GET ELEVATION FOR SMALL BOARD ONLY IF DEFINED
C
      IF (NUMSM.EQ.0) GO TO 110
      NFAL = NFAL + 1
      SIGFAL(NFAL) = 6
C
C  GET ELEVATION FOR GATE IF DEFINED
C
  110 CONTINUE
      IF (NGATE.EQ.-999) GO TO 120
C
      NFAL = NFAL + 1
      SIGFAL(NFAL) = 9
C
C  NOW SORT THE POSITIONS BASED ON ASCENDING ELEVATIONS (IF MORE THAN
C  ONE ELEVATION ENTERED).
C
  120 CONTINUE
      IF (NFAL.EQ.1) GO TO 150
C
      CALL XSRT26(SIGFAL,SIGELV,NFAL)
C
C  NOW GET SIGNIFICANT RISING ELEVATIONS
C
  150 CONTINUE
      NRIS = 2
      SIGRIS(1) = 3
      SIGRIS(2) = 4
C
C  GET ELEVATION FOR SMALL BOARDS IF DEFINED.
C
      IF (NUMSM.EQ.0) GO TO 160
C
      NRIS = NRIS + 2
      SIGRIS(NRIS-1) = 7
      SIGRIS(NRIS) = 8
C
C  GET ELEVATION FOR GATE IF DEFINED.
C
  160 CONTINUE
      IF (NGATE.EQ.-999) GO TO 170
C
      NRIS = NRIS + 2
      SIGRIS(NRIS-1) = 9
      SIGRIS(NRIS) = 10
C
C  SORT POSITIONS BASED ON ASCENDING ELEVATIONS
C
  170 CONTINUE
      IF (NRIS.EQ.1) GO TO 180
C
      CALL XSRT26(SIGRIS,SIGELV,NRIS)
C
C  SET ARRAY VALUES AND LOCATIONS FOR MODIFIED PULS ROUTING TECHNIQUES.
C
  180 CONTINUE
C
      MRLOC(5) = ISUNUM
C
      NELSOH = NSE
      LOCSTH = LOCOWS(7)
      LOCO = LOCOWS(10)
      LOCSOH = LOCOWS(10) + NSE
      LOCTSH = LOCSOH + NSE
C
C  NEED TO SET THE NO. OF ROUTING STEPS WITHIN THE TIME INTERVAL.
C  CHECK THE SLOPE OF THE TOTAL DISCHARGE RATING CURVE FOR A SLOPE
C  OF LESS THAN 1/2 THE TIME INTERVAL.
C
      ICOMP = 0
      IF (NHEAD.EQ.0) CALL XFTQ26(SUNUM,PO,W,LOCOWS,ICOMP)
C
C  STEP THROUGH ELEVATIONS TO FIND FIRST NON-ZERO DISCHARGE
C
      IST = 1
      IF (IBUG.GE.2) WRITE(IODBUG,1655)
 1655 FORMAT('   COMBINED SPILLWAY RATING'/'       ELEV         Q')
      DO 200 I=1,NSE
      IF (IBUG.GE.2) WRITE(IODBUG,1660) PO(LESELV+I-1),W(LOCOWS(9)+I-1)
 1660 FORMAT(3X,2F12.3)
      IF (W(LOCOWS(9)+I-1).LE.0.00) GO TO 200
      IST = I - 1
      GO TO 210
  200 CONTINUE
C
C  NOW STEP THROUGH CURVE TO GET SLOPE BETWEEN EACH POINT
C
  210 CONTINUE
      SLMIN = 9999999.
      NSEND = NSE - 1
      DO 220 I=IST,NSEND
      IF (IBUG.GE.2) WRITE(IODBUG,1660) PO(LESELV+I),W(LOCOWS(9)+I)
      DQ = W(LOCOWS(9)+I) - W(LOCOWS(9)+I-1)
      DS = PO(LESSTO+I)   - PO(LESSTO+I-1)
      IF (DQ.LE.0.0001) GO TO 220
C
      SLOPE = DS/DQ
      IF (SLOPE.LT.SLMIN) SLMIN = SLOPE
  220 CONTINUE
C
C  SET NO. OF ROUTING STEPS
C
      DELTAT = MINODT
      NOSTEP = 0.5/SLMIN + 1
      IF (IBUG.GE.2) WRITE(IODBUG,1665) SLMIN,NOSTEP
 1665 FORMAT('  SLMIN, NOSTEP :',E12.6,I10)
C
C  GET TIME-SERIES INFO (BUT ONLY IF AN ADJUSTED RUN).
C
      IF (.NOT.ADJRUN) GO TO 350
C
      LOCTSP = W(LOCEX-1)
      IOFFTS = IDOFST * NTIM24
C
C  GET NO. OF LARGE BOARDS DOWN
C
      LOCTSL = IDPT(LOCTSP)
      IF (LOCTSL.EQ.0) GO TO 310
      IF (IFMSNG(D(LOCTSL+IOFFTS+NS2-1)).EQ.0)
     . NLGDN = D(LOCTSL+IOFFTS+NS2-1)
C
C  GET NO. OF SMALL BOARDS DOWN (IF USED.)
C
  310 CONTINUE
      IF (NUMSM.LE.0) GO TO 320
      LOCSMD = IDPT(LOCTSP+1)
      IF (LOCSMD.EQ.0) GO TO 320
      IF (IFMSNG(D(LOCSMD+IOFFTS+NS2-1)).EQ.0)
     .  NSMDN = D(LOCSMD+IOFFTS+NS2-1)
C
C  NO GATE TIME-SERIES IF NO GATE
C
  320 CONTINUE
      IF (NGATE.EQ.-999) GO TO 330
C
      LOCTSG = IDPT(LOCTSP+2)
      GATOP2 = D(LOCTSG+IOFFTS+NS2-1)
      IF (LOCTSG.EQ.0) GATOP2 = -999.0
C
C  GET TIME-SERIES VALUE FOR MAX GEN Q AND SLUICE Q
C
  330 CONTINUE
      LOCTSQ = IDPT(LOCTSP+3)
      LOCTSS = IDPT(LOCTSP+4)
C
      QGX = D(LOCTSQ+IOFFTS+NS2-1)
      QSX = D(LOCTSS+IOFFTS+NS2-1)
C
      IF (IFMSNG(QGX).EQ.1.OR.LOCTSQ.EQ.0) GO TO 340
      QGENMX = QGX * NTIM24
C
  340 CONTINUE
      IF (IFMSNG(QSX).EQ.1.OR.LOCTSS.EQ.0) GO TO 350
      SLUICE = QSX * NTIM24
C
C  DETERMINE THE DISCHARGE FOR THE FLASHBOARD ROUTINE.
C
  350 CONTINUE
      QOK2 = QGENMX + SLUICE
      PCTERF = 0.01
      GFLORG = GOFLSH
      CALL FLSH26(GATOP2,SIGELV,SIGSTO,SIGFAL,SIGRIS,W(LPTQIM),W(LOCPKO)
     .           ,W(LOCPKP),PO(LESELV),W(LOCSTH),W(LOCO),W(LOCSOH),
     .            W(LOCTSH),PO(LOCLSE),PO(LOCLSQ),PO(LOCSSE),PO(LOCSSQ),
     .            PO(LOCGSE),PO(LOCGSQ),W(LOCOWS(8)),W(LOCOWS(8)+NSE),
     .            PO(LESSTO),PO(LESELV))
C
C  NO NEED TO SAVE CARRYOVER IF WE NEVER WERE IN FLASHBOARD MODE.
C
      IF (.NOT.(GFLORG.OR.GOFLSH)) GO TO 9000
C
C  SET EXECUTION FLAG AND SAVE CARRYOVER IF FLASHBOARD SCHEME
C  WAS EXECUTED AND WE DIDN'T SLIP OUT OF THE NEED FOR FLASHBOARDS.
C
      W(LOCEX) = 1.01
      STATE = 0.01
      IF (GOFLSH) STATE = 1.01
      W(IOFFCO+1) = STATE
      W(IOFFCO+2) = NLGDN + 0.01
      IADD = 0
      IF (NUMSM.GT.0) W(IOFFCO+3) = NSMDN + 0.01
      IF (NUMSM.GT.0) IADD = 1
      IF (IGATE.EQ.1) W(IOFFCO+3+IADD) = GATOP2
      IF (IGATE.EQ.1) W(IOFFCO+4+IADD) = NGATE + 0.01
      IF (IGATE.EQ.1) IADD = IADD + 2
      W(IOFFCO+3+IADD) = QOK2
C
 9000 CONTINUE
      IF (IBUG.GE.1) WRITE(IODBUG,1699) QOK2
 1699 FORMAT('    *** EXIT XS1226 *** - QOK2 = ',F12.3)
      RETURN
      END
