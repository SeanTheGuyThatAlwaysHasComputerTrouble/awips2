C MEMBER XQT26
C  (from old member FCXQT26)
C
C DESC TIME-INTERVAL-LOOP EXECUTION CONTROLLER FOR 'RES-SNGL'
C----------------------------------------------------------------------
C                             LAST UPDATE: 08/25/94.12:50:03 BY $WC30KH
C
      SUBROUTINE XQT26(PO,CO,D,W,IDPT,LOCWS,LOCOWS,LOBSA)
C-------------------------------------------------------------------
C  SUBROUTINE THAT CONTROLS A NUMBER OF THINGS FOR THE EXECUTION ROUTINE
C  FOR 'RES-SNGL'. THESE ARE:
C
C        1) CHECK ON USE OF 'RAINEVAP' AND 'BACKFLOW' AND PULL INFLOW
C           FROM PROPER LOCATION FOR THE EXISTING SITUATION,
C        2) LOOP THROUGH THE ENTIRE RUN PERIOD ONE PERIOD AT A TIME
C           COMPUTING MODEL OUTPUTS FOR EACH PERIOD, UPDATING AND SAVING
C           CARRYOVER, AND TRANSFERRING OUTPUT VALUES TO OUTPUT TIME
C           SERIES.
C----------------------------------------------------------------------
C  WRITTEN BY - JOE OSTROWSKI - HRL - OCTOBER 1983
C----------------------------------------------------------------------
C
      INCLUDE 'common/exg26'
      INCLUDE 'common/resv26'
      INCLUDE 'common/fdbug'
      INCLUDE 'common/ionum'
      INCLUDE 'common/fctime'
      INCLUDE 'common/fprog'
      INCLUDE 'common/rulc26'
      INCLUDE 'common/genq26'
      INCLUDE 'common/xco26'
      INCLUDE 'common/xre26'
      INCLUDE 'common/sumi26'
      INCLUDE 'common/dste26'
      INCLUDE 'common/flas26'
      INCLUDE 'common/srcg26'
      INCLUDE 'common/mod126'
      INCLUDE 'common/xqin26'
C
      DIMENSION PO(*),CO(*),D(*),W(*),IDPT(*),LOCWS(*),LOCOWS(*)
C
C    ================================= RCS keyword statements ==========
      CHARACTER*68     RCSKW1,RCSKW2
      DATA             RCSKW1,RCSKW2 /                                 '
     .$Source: /fs/hseb/ob72/rfc/ofs/src/fcst_res/RCS/xqt26.f,v $
     . $',                                                             '
     .$Id: xqt26.f,v 1.11 2005/02/22 14:03:23 hsu Exp $
     . $' /
C    ===================================================================
C
C
C-------------------------------------------
C  DEBUG OUTPUT IF REQUESTED
C
ccc	ibug=2
      IF (IBUG.GE.1) WRITE(IODBUG,1650)
 1650 FORMAT('   *** ENTER XQT26 ***')
C
C  SET WORK SPACE POINTERS
C
      LOCHLD = LOCWS(3)
      LOCRPQ = LOCOWS(4)
      LOCRPP = LOCRPQ + NTOTPK
C
      LOCTR1 = LOCWS(2)
      LOCTR2 = LOCTR1 + NDD*NTIM24
      LOCTR3 = LOCTR2 + NDD*NTIM24
      LOCTR4 = LOCTR3 + NDD*NTIM24
C
C  SET INITIAL VALUES
C
      DQOMX=1.0E10
      DQMMX=1.0E10
      DHMX=1.0E10
      ADJRUN = .FALSE.
      NUMSIM = 1
      LOBSTO = NRUN
      IFCST = 0
      JDAORG = JDAWEK
      LOOPNO= 0
ccc      DO 17 I=LOBSA+1,NUM
ccc      W(LPTQI+I-1) = W(LPTQI+I-1) + W(LPTADL+I-1)
ccc      W(LPTQIM+I-1) = W(LPTQIM+I-1) + W(LPTADL+I-1)
ccc  17  CONTINUE
C
C  CHECK FOR USE OF SETQMEAN RUN-TIME MOD
C
      IF (.NOT.M126ON) GO TO 5
C
C  GET FIRST PERIOD TO USE. VARIABLE MJ126 IS THE JULIAN HOUR
C  OF THE FIRST VALUE. CONVERT IT ON SCALE OF 1 TO N.
C
      IDAHR = (IDA-1)*24
      MPDST = (MJ126 - (IDAHR))/MINODT
      MPDEND = MPDST + NVM126 - 1
C *** EV CHANGE *** 3/6/86
C VM126 VALUES ARE ENTERED IN CFS SO MUST CHANGE TO CFSD
C DIVIDE CFS BY NUMBER OF PERIODS PER DAY(NNPPDD)
      NNPPDD=24/MINODT
      DO 1225 IBOHIS=1,NVM126
1225  VM126(IBOHIS)=VM126(IBOHIS)/NNPPDD
C *** ENDCHANGE***
C
      IF (IBUG.GE.2) WRITE(IODBUG,1601) MJ126,IDAHR,MPDST,MPDEND,NVM126,
     .               (VM126(I),I=1,NVM126)
 1601 FORMAT(/'  ** INITIAL JULIAN HR OF MOD AND RUN = ',2I8,
     ./'  ** SETQMEAN MOD STARTS AT PERIOD ',I3,' AND ENDS AT',
     .       ' PERIOD ',I3,1H./'    THE ',I3,' MOD VALUES ARE :',
     .       (6F12.3))
C
C----------------------------------------------------------------
C  THIS SECTION IS THE START OF THE SIMULATED AND ADJUSTED RUNS.
C  CERTAIN INITIATIONS MUST BE DONE AT THIS POINT
C
    5 CONTINUE
      MQXQT = .FALSE.
C
   10 CONTINUE
C
ccc      IF (IBUG.GE.2) WRITE(IODBUG,1602) ADJRUN,MQXQT,DORAIN,NRAEV
ccc 1602 FORMAT('   * STARTING TIME INTERVAL LOOP:'/10X,'ADJUST RUN? ',L4,
ccc     ./10X,'MINQ BEEN EXECUTED? ',L4,/10X,'DO RAIN/EVAP? LOOP NO.? ',L4,
ccc     . I3)
      NUMPKO = -999
      NDAYRN = NODAYR
      JULDAY = JULDAT
      JDAWEK = JDAORG
      FCST = .FALSE.
      FLOOD = .FALSE.
      SURCHG = .FALSE.
      GOFLSH = .FALSE.
cc      IENTER = -999
      IPOWER = 0
      ISURG = 0
      ltsbfqx=ltsbfq
      IF (IBUG.LT.2)  GO TO 20
      LOOPNO= LOOPNO+1
      WRITE(IODBUG,1602) LOOPNO,ADJRUN,DORAIN,DOBACK,DOSUMF,NUMSIM
 1602 FORMAT(' STARTING TIME INTERVAL LOOP',I1,/10X,'ADJUST RUN? ',L4,
     ./10X,'DO RAIN/EVAP? ',L4,/10X,'DO BACK INFLOW? ',L4,
     ./10X,'DO INFLOW SUMMATION?',L4,' SIMULATION NO',I1)
      IF(.NOT.DOBACK .AND. LOCOWS(13).EQ.0) GO TO 20
      IF(.NOT.DOBACK) GO TO 15
      LBFQI= LOCOWS(1)
c      WRITE(IODBUG,1603) (W(LPTADL+I-1),I=1,LOBSA)
      WRITE(IODBUG,1603) (W(LPTADL+I-1),I=1,NUM)
 1603 FORMAT(' EQUIVALENT INFLOW FROM DIRECT RAINEVAP:'/(1X,8F10.1))
      WRITE(IODBUG,1604) (D(LTSBFQ+I-1),I=1,NUM)
 1604 FORMAT(' INSTANTEOUS BACK ADJUSTED INFLOW:'/(1X,8F10.1))
 15   IF(LOCOWS(13).EQ.0) GO TO 20
      WRITE(IODBUG,1606) (W(LPTQI+I-1),I=1,NUM)
 1606 FORMAT(' INSTANTEOUS INFLOW FOR SUMINF:'/(1X,8F10.1))
      WRITE(IODBUG,1607) (W(LPTQIM+I-1),I=1,NUM)
 1607 FORMAT(' MEAN INFLOW FOR SUMINF:'/(1X,8F10.1))
 20   CONTINUE
C
C  COPY INITIAL CARRYOVER INTO WORK SPACE
C
      LOCO = LOCWS(4)
C      WRITE(IODBUG, '( ''W534= '', F10.3 )') W(534)
      CALL UMEMOV(CO,W(LOCO),NUMCOV)
C
C  SET INITIAL VALUES FROM CARRYOVER
C
      ELEV1 = CO(5)
      QO1   = CO(3)
      S1    = CO(6)
C
C  SUM INFLOWS TO DETERMINE 'FLOOD' SITUATION IF REQUESTED
C
      IF (DOSUMF) CALL XU1526(PO,CO,W,IDPT,LOCOWS)
C
C  NOW LOOP THROUGH ALL PERIODS IN RUN
C
      DO 1000 NS2=1,NUM
C
C  ESTABLISH TIMING VARIABLES FOR HYDROLOGIC DAY
C
      KHRPRD = (MOD(NS2,NTIM24)+1)*MINODT
      IF(NS2.EQ.1) GO TO 45
      IADD = 0
      IF(MOD(NS2-1,NTIM24).EQ.0) IADD = 1
      JDAWEK = MOD(JDAWEK,7) + IADD
      IF(JDAWEK.LE.0) JDAWEK=7
      JULDAY = JULDAY + IADD
      IF (JULDAY .LE. NDAYRN) GO TO 45
C
C  HERE WE'VE TURNED THE CORNER ON THE END OF THE YEAR, SO WE MUST RESET
C  THE NO. OF DAYS IN THE YEAR AND THE RELATIVE JULIAN DATE
C
      NDADD = NS2/NTIM24
      IDSET = IDA + NDADD
      NDAYRN = 365 + LEAP26(IDSET,IHR)
      JULDAY = 1
 45   CONTINUE
      IF (NS2 .GT. LOBSTO) FCST = .TRUE.

C     THIS IS A SIMPLIFIED SOLUTION TO HSD BUG R24-11. SO, IF IT IS AN
C     ESP RUN, THE LOGICAL VARIABLE FCST WILL ALWAYS BE SET TO .TRUE.
C     EVEN THOUGH THE CURRENT PERIOD IS 'OBSERVED'.
C     -- LW
      IF (MAINUM .EQ. 2) FCST = .TRUE.

C
C  IF IN THE 'OBSERVED' PART OF AN ADJUSTED RUN, RESET THE 'SURCHARGE'
C  AND 'FLASH' FLAGS TO OFF SINCE NO COMPUTATIONS ARE BEING DONE. ONLY
C  OBSERVED AND ADJUSTED VALUES ARE BEING ASSIGNED TO MODEL OUTPUTS.
C
      IF (.NOT.ADJRUN .OR. NS2.GT.LOBSTO) GO TO 50
      SURCHG = .FALSE.
      GOFLSH = .FALSE.
C
   50 CONTINUE
C
C INITIALIZE 'RAINEVAP' LOOP COUNTER. 'RAINEVAP' CAN BE EXECUTED UP
C TO TWO TIMES.
C
      NRAEV = 2
      LOCO = LOCWS(4)
C
      IF (IBUG.LT.2) GO TO 60
      JULHRX=IDA*24+IHR+NS2*MINODT
      JDABGX=IDA-JULDAT
      JULDAX=JULDAX/24-IDABGX+1
      JHRX=MOD(JULHRX,24)
      JHR=KHRBGN+NS2*MINODT
      KHRPRX=MOD(JHR,24)
      IADD=JHR/24
      IDAX=IDA+IADD
      CALL MDYH1(IDAX,IHR,IMON,IDAY,IYEAR,IHRM,NLSTZ,NOUTDS,TZCS)
      WRITE(IODBUG,1610) NS2
 1610 FORMAT(/2X,24(1H*)/2X,1H*,22X,1H*/2X,1H*,' TIME INTERVAL NO. ',I2,
     .2H */2X,1H*,22X,1H*/2X,24(1H*)/)
C
      WRITE(IODBUG,1613)
     &  KHRPRX,IDAY,JDAWEK,JULDAY,(W(LOCO+L-1),L=1,NUMCOV)
 1613 FORMAT(/'   ** CARRYOVER AT START OF HOUR ',I3,
     & ' CALENDAY ',I3,' DAYOFWEEK ',I2,' DAYOFYEAR ',I4/(6F12.2))
 60   CONTINUE
C
C  DETERMINE ADD'L FLOW VOLUME IF 'RAINEVAP' IS ENABLED'.
C
      IF (DORAIN) CALL XU1626(PO,W,D,LOCWS,LOCOWS)
C
C  SET END OF PERIOD VALUES FROM THE TRACE HOLDING AREA (VALUES HAVE
C  BEEN INITIALIZED TO MISSING (-999.0) FOR ALL OF THE SIMULATED RUN AND
C  FOR THE PERIOD AFTER THE LAST OBSERVED FOR THE ADJUSTED RUN.)
C
  100 CONTINUE
C
C      IF (DORAIN .AND. IBUG.GE.2) WRITE(IODBUG,1615) NRAEV
C 1615 FORMAT(5X,'> LOOP NO.',I2,' FOR RAINEVAP <')
C
      QO2   = W(LOCTR1+NS2-1)
      QOM   = W(LOCTR2+NS2-1)
      ELEV2 = W(LOCTR3+NS2-1)
      S2    = W(LOCTR4+NS2-1)
C
C  HERE WE NEED TO SET THE INFLOW FOR THE COMBINATION OF 'RAINEVAP' AND
C  'BACKFLOW' (NOT A CONCERN FOR THE ADJUST RUN AS FINAL ADD'L VALUES
C  FOR R/E AND BF HAVE BEEN COMPUTED AND PUT INTO A HOLDING SPACE.)
C
C  THE VALUES FOR QI1, QI2, AND QIM ARE COMPUTED IN THIS SUBROUTINE
C
C      WRITE(IODBUG, '( ''READLQ= '', F10.3 )') READLQ
      CALL XINQ26(PO,CO,W,D,IDPT,LOCWS,LOCOWS)
C
C  NOW HAVE ALL THE NECESSARY VALUES TO CHECK THE RCL AND COMPUTE MODEL
C  OUTPUTS.
C  NEED TO RESET EXECUTION COUNTER AND EXECUTION FLAGS
C
      NSCHEX = 0
      IF (NSUDEF .EQ. 0) GO TO 410
      DO 400 J=1,NSUDEF
      LOCEX = J*3
      W(LOCEX) = 0.01
  400 CONTINUE
  410 CONTINUE
C
      IF (IBUG.GE.2) WRITE(IODBUG,1630)
     & QI1,QI2,QIM,QO1,QO2,QOM,S1,S2,ELEV1,ELEV2
 1630 FORMAT(1X,' BEGINNING OF PERIOD VALUES:',
     & ' QI1,QI2,QIM,QO1,QO2,QOM,S1,S2,ELEV1,ELEV2',
     & /1X,8F10.0,2F10.3)
C
C  CHECK ON USE OF SETQMEAN RUN-TIME MOD.
C
C MODIFIED BY GZHOU FOR BUG R24-12 11/06/2003
C IT NEEDS DIFFERENT TREATMENT WHEN THE MPDST IS 0 
C
C      IF (.NOT.M126ON .OR. NS2.LT.MPDST .OR. MPDEND.LT.NS2) THEN
      IF(MPDST.LT.1) THEN
        IF (.NOT.M126ON .OR. NS2.LT.MPDST .OR. MPDEND.LT.NS2-1) THEN
	       GO TO 430
        ENDIF
	  ELSE
        IF (.NOT.M126ON .OR. NS2.LT.MPDST .OR. MPDEND.LT.NS2) THEN
	       GO TO 430
        ENDIF
	  ENDIF
C
C  SET 'SETQ' TYPE VALUE AND CALL THE SETQMEAN MOD DRIVER.
C
C      MPD = NS2 - MPDST + 1
      IF(MPDST.LT.1) THEN
	      MPD = NS2 - MPDST
	  ELSE
	      MPD = NS2 - MPDST + 1
	  ENDIF
C
C  END OF MODIFICATION BY GZHOU 11/06/2003
C
      CALL XM126(VM126(MPD),PO,W,LOCWS)
C
C  WANT TO CHECK IF END OF SETQMEAN IS BEFORE END OF OBSERVED VALUES
C  DETERMINED BEFORE THIS IN THE ADJUST UTILITY. ONLY REALLY NEEDED
C  FOR THE ADJUSTED PART OF THE RUN, BUT WILL WORK FOR SIMULATED
C  PART SINCE LOBSTO WILL BE ZERO.
C
C  THE FOLLOWING CHANGES MADE ON 10/11/89 -- MAINT. #553
C      IF (NS2 .LT. MPDEND) GO TO 450
CC
C      IF (LOBSTO .GT. MPDEND) LOBSTO = MPDEND
C      FCST = .TRUE.
C  END OF CHANGE OF 10/11/89
      GO TO 450
C
  430 CONTINUE
C
C  IF THE 'MINQ' SCHEME WAS EXECUTED, NO NEED TO SCAN THE RCL AS THE
C  OUTPUT OF THAT SCHEME IS COMPUTED FOR EVERY TIME PERIOD IN THE RUN.
C
      IF (MQXQT) GO TO 450
C
C  ANALYZE RCL TO DETERMINE S/U'S TO BE EXECUTED AND, HENCE, THE MODEL
C  OUTPUTS FOR THIS TIME PERIOD.
C
      CALL XRCL26(PO,W,D,IDPT,LOCWS,LOCOWS)
C
C  IF 'MINQ' WAS EXECUTED IN THIS TIME PERIOD WE MUST GO
C  BACK TO THE BEGINNING OF THE RUN PERIOD TO ENSURE THAT ALL INFO
C  (TRACES AND CARRYOVER) ARE CONSISTENT WITH MINQ'S MODEL OUTPUTS.
C
      IF (MQXQT) GO TO 10
C
C-------------------------------------------------------
C  SEE IF WE NEED TO DO TOLERANCE CHECK ON 'RAINEVAP'.
C
  450 CONTINUE
      IF (.NOT.DORAIN .OR. NRAEV.EQ.2) GO TO 500
C
C  CHECK ON ADD'L FLOW VOLUMES (OLD AND NEW)
C
      NRAEV = 2
      CALL XU1626(PO,W,D,LOCWS,LOCOWS)
      IF (REDORE) GO TO 100
C
C  DO CARRYOVER UPDATING AND POSSIBLE TRANSFERRING HERE
C
  500 CONTINUE
C      WRITE(IODBUG, '( ''W534= '', F10.3 )') W(534)
      CALL XCOU26(PO,W,D,LOCWS,LOCOWS,IDPT)
C      WRITE(IODBUG, '( ''W534= '', F10.3 )') W(534)
C
C  THE FINAL MODEL OUTPUTS ARE HELD AS THE LAST VALUES IN A HOLDING AREA
C  OF THE WORK ARRAY. THESE VALUES NEED TO BE TRANSFERRED TO THE TRACE
C  AREA OF THE WORK ARRAY.
C
C  (NO NEED TO UPDATE TRACES IF 'MINQ' HAS BEEN EXECUTED AS TRACES HAVE
C   BEEN FILLED IN THAT SCHEME.)
C
      IF (MQXQT) GO TO 600
C
      LOCLAS = LOCHLD + (NSCHEX-1)*6
      W(LOCTR1+NS2-1) = W(LOCLAS+3)
      W(LOCTR2+NS2-1) = W(LOCLAS+2)
      W(LOCTR3+NS2-1) = W(LOCLAS+5)
      W(LOCTR4+NS2-1) = W(LOCLAS+6)
C
      IF (IBUG.GE.2) WRITE(IODBUG,1690) W(LOCTR1+NS2-1),W(LOCTR2+NS2-1),
     .                                  W(LOCTR3+NS2-1),W(LOCTR4+NS2-1)
 1690 FORMAT(10X,'END OF PERIOD OUTPUTS -   QO2       QOM      ELEV2   '
     .,'    S2'/,33X,4F10.2)
C
C
C  ALL DONE FOR THIS TIME PERIOD. SET THINGS UP FOR NEXT PERIOD.
C  SET BEGINNING OF PERIOD VALUES
C
  600 CONTINUE
      QO1   = W(LOCTR1+NS2-1)
      ELEV1 = W(LOCTR3+NS2-1)
      S1    = W(LOCTR4+NS2-1)
C
 1000 CONTINUE
C
C  WE NEED TO DO SOME INFLOW RECONFIGURING IF:
C    1) 'RAINEVAP' IS ENABLED, AND
C    2) THIS IS NOT THE ADJUSTED PASS
C
      IF (.NOT.DORAIN .OR. ADJRUN) GO TO 1020
C
C  RECONFIGURE THE INFLOW WORK SPACE TIME-SERIES HERE
C
      CALL XRIN26(CO,W,D,LOCOWS,IDPT)
C      IF (.NOT.BFSAVQ .OR. (LOBSA.LE.0)) GO TO 1040
C      IOFF = IDOFST * NTIM24
C      CALL UMEMOV(D(IDPT(1)+IOFF),D(LTSBFQ),NUM)
C      LBFQI = LOCOWS(1)
C      WRITE(IODBUG, '( ''LTSBFQ= '', I10 )') LTSBFQ
C      WRITE(IODBUG, '( ''LBFQI= '', I10 )') LBFQI
C      DO 1030 I=1,LOBSA
C      REX= W(LPTADL+I-1)
C      D(LTSBFQ+I-1) = W(LBFQI+I-1)
C      D(LTSBFQ+I-1) = W(LBFQI+I-1) - REX
ccc      IF (REX .GE. 0.0) D(LTSBFQ+I-1) = W(LBFQI+I-1) - REX
C 1030 CONTINUE
 1040 IF (NUMSIM .GE. 2) GO TO 1020
C
CCC   2ND PASS ONLY NEEDED IF SUMINF ETC WERE USED!
CCC   NO NEED 2ND PASS IF BACKFLOW WITHOUT SUMINF ETC!
C  IF 'BACKFLOW' IS COMBINED WITH 'RAINEVAP' WE MUST MAKE TWO PASSES
C  THROUGH THE SIMULATED LOOP. (WE WOULDN'T BE HERE IF THIS WAS ALREADY
C  THE SECOND LOOP.)
C
C      IF (DOBACK) GO TO 1020

C  1ST PASS COMPUTE ADDITIONAL INFLOW DUE TO RAIN/EVAP
C  2ND PASS NEEDED ONLY IF TO ADD RAIN/EVAP TO INFLOW TIME SERIES
C  FOR SUMINF ETC.
C
      IF (LOCOWS(13).LE.0) GO TO 1020
      NUMSIM = NUMSIM + 1
      GO TO 5
C
C  HERE WE NEED TO TRANSFER MODEL OUTPUTS INTO TIME-SERIES IF REQUESTED
C
 1020 CONTINUE
      IF (ADJRUN) GO TO 1500
C
C  OUTPUT SIMULATED VALUES TO TIME-SERIES IF REQUESTED.
C
      CALL XSMO26(PO,W,D,IDPT,LOCTR1,LOCTR2,LOCTR3,LOCTR4,LOCRPP,LOCRPQ)
C
C  NOW THAT WE'RE DONE WITH THE SIMULATED RUN, SEE IF WE NEED TO MAKE AN
C  ADJUSTED RUN.
C
 1220 CONTINUE
      IF (.NOT.ADJUST) GO TO 5000
C
C  SET SOME VARIABLES FOR THE ADJUST RUN AND FILL THE TRACES WITH ALL TH
C  OBSERVED OR COMPUTED FROM OBSERVED VALUES.
C
      IFCST = 1
      ADJRUN = .TRUE.
      CALL XU1726(PO,CO,W,D,LOCWS,LOCOWS,IDPT)
C
C  FOR A RUN OTHER THAN AN OPERATIONAL FORECAST, IF NO OBSERVED
C  DATA WAS FOUND WHILE TRYING TO ADJUST, JUST OUTPUT THE MODEL
C  TRACES TO TIME-SERIES. THE VALUES HELD IN THE TRACES AFTER THE
C  SIMULATED PASS ARE THE SAME AS WHAT WOULD BE COMPUTED IN AN
C  ADJUSTED PASS WITH NO OBSERVED DATA.
C
C  FOR OP. FORECAST RUN, WE CAN'T AUTOMATICALLY BYPASS THE ADJUST PASS
C  SINCE ANY CARRYOVER SAVING (CALL TO FCWTCO) IS DONE ON THAT PASS.
C  FIRST CHECK TO SEE IF ANY CARRYOVER IS TO BE SAVED, AND IF NONE
C  IS, THEN WE CAN BYPASS THE ADJUST PASS EVEN IF THIS IS AN
C  OPERATIONAL FORECAST RUN.
C
C     IF (LOBSTO .EQ. 0 .AND. (MAINUM.NE.1 .OR. ISAVCO.EQ.0)) GO TO 1500
C
C   THE ABOVE LINE WAS COMMENTED OUT BY GERALD N. DAY - 5/1987.  AT
C   THIS TIME IT IS NOT NECESSARY TO ADJUST FOR ANY PROGRAM BUT THE
C   OPERATIONAL FORECAST PROGRAM.
C
      IF(LOBSTO.EQ.0.AND.ISAVCO.EQ.0) GO TO 1500
      IF(MAINUM.NE.1) GO TO 1500
C
C
C  SET TRACE ARRAYS TO MISSING (= -999.0) AFTER THE LAST OBSERVED PERIOD
C
      IST = LOBSTO + 1
      IF (IST.GT.NUM) GO TO 5
C
      LOCST = LOCWS(2)
      DO 1260 J=1,4
      DO 1250 I=IST,NUM
      W(LOCST+I-1) = -999.0
 1250 CONTINUE
      LOCST = LOCST + NDD*NTIM24
 1260 CONTINUE
C
C  NOW GO BACK TO BEGINNING OF RUN USING THE ADJUSTED VALUES WHERE FOUND
C  AND COMPUTING NEW ONES AFTER THAT.
C
      GO TO 5
C
C--------------------------------------------------------------------
C  END OF ADJUSTED RUN. OUTPUT TRACES TO TIME SERIES IF REQUESTED
C
 1500 CONTINUE
C
      CALL XADO26(W,D,LOCTR2,LOCTR1,LOCTR3,LOCTR4,LOCRPP,LOCRPQ)
C
C----------------------------------------------------------------
C  NEXT TO LAST STEP IS TO OUTPUT EITHER 'BACKFLOW' ADJUSTED INFLOWS OR
C  'RAINEVAP' GENERATED ADD'L FLOWS
C
 5000 CONTINUE
      CALL XOUT26(W,D,LOCOWS)
C
C----------------------------------------------------------
C  LAST STEP IS TO UPDATE CO ARRAY FOR USE OF RES-SNGL IN ESP AND MCP
C
      CALL UMEMOV(W(LOCO),CO,NUMCOV)
C
C-----------------------------------------------------------------
C  WE'RE DONE WITH THE EXECUTION OF THE OPERATION.
C
 9000 CONTINUE
      IF (IBUG.GE.1) WRITE(IODBUG,1699)
 1699 FORMAT('    *** EXIT XQT26 ***')
ccc	ibug=0
      RETURN
      END
