C MEMBER PREP21 
C  (from old member FCPREP21)
C DESC -- THIS SUBROUTINE PREPARES DATA FOR DYNAMIC WAVE CALCULATIONS
C
C                             LAST UPDATE: 10/02/95.13:36:44 BY $WC30JL
C
C @PROCESS LVL(77)
C
      SUBROUTINE PREP21(X,NB,DDX,GZ,KD,KU,LQ,NS,QL,LOQL,WF,ATF,NN2,
     1 NQL,STN,LOSTN,STT,LOSTT,ST1,LOST1,NRT1,T1,GZ1,NUMLAD,POLTAR,
     2 POOLT,LOPLT,COFW,VWIND,WINAGL,QLNAM,DHF,NDIV,LDIV,DIV,LODIV,
     3 IFLDIV,STM,TO,NPO,DHFO,ST0,QT0,QLI,DVI,PLTI,GZPL,LAD,CHCTW,HS,K7,
     4 PO,NLADD,XNOS,TIDE)
C
C           THIS SUBROUTINE WAS WRITTEN ORIGINALLY BY:
C           DR. DANNY FREAD   HRL   APRIL 1978
C
C           THIS SUBROUTINE WAS MODIFIED TO MEET VER. NO. 5 STANDARDS
C           OF THE NWSRFS BY:
C           JANICE LEWIS      HRL   NOVEMBER,1982     VERSION NO. 1
C
      COMMON/FDBUG/IODBUG,ITRACE,IDBALL,NDEBUG,IDEBUG(20)
      COMMON/IONUM/IN,IPR,IPU
      COMMON/M121/N,NU,NS1,JN,JJ,KIT,G,DT,TT,TIMF,F1,GZN,NYQD
      COMMON/M3021/EPSY,EPSQ,EPSQJ,THETA,XFACT
      COMMON/M3221/KTERM,KPL,KPL2,JNK,TE,TM,KITPR
      COMMON/SS21/ NCS,A,B,DB,R,DR,AT,BT,NCSS,P,DP,ZH,NP,NPEND
      COMMON/IVRSN21/IVER
C
      CHARACTER*4 STTNAM(2)
C
      DIMENSION X(*),NB(*),T1(*),COFW(*),VWIND(*),NDIV(*),PO(*)
      DIMENSION GZ(*),KD(*),KU(*),LQ(*),LDIV(*),IFLDIV(*),QLI(*)
      DIMENSION NS(*),QL(*),LOQL(*),WF(*),ATF(*),DIV(*),DVI(*)
      DIMENSION NN2(*),NQL(*),STN(*),STT(*),STM(*),ST0(*),QT0(*)
      DIMENSION LOSTT(*),ST1(*),LOST1(*),NRT1(*),TO(*),PLTI(*)
      DIMENSION GZ1(*),NUMLAD(*),POLTAR(*),POOLT(*),LOPLT(*)
      DIMENSION WINAGL(*),SNAME(2),DDX(*),QLNAM(3,*),LODIV(*)
      DIMENSION LAD(*),CHCTW(*),GZPL(*),HS(K7,*),XNOS(*),TIDE(*)
C
C    ================================= RCS keyword statements ==========
      CHARACTER*68     RCSKW1,RCSKW2
      DATA             RCSKW1,RCSKW2 /                                 '
     .$Source: /fs/hseb/ob72/rfc/ofs/src/fcst_dwoper/RCS/prep21.f,v $
     . $',                                                             '
     .$Id: prep21.f,v 1.4 1998/07/06 11:53:39 page Exp $
     . $' /
C    ===================================================================
C
C
      DATA SNAME/4HPREP,4H21  /
      DATA DUMM/4HDUMM/
C
C
      CALL FPRBUG(SNAME,1,21,IBUG)
C
      NUU=NU
      IF (NU.EQ.0) NUU=TE/(TM*KITPR)+1.01
C     WRITE(6,9990) NUU
C9990 FORMAT(/5X,15(1H=),' NUU=',I5,1X,15(1H=))
C
C        CONVERT OBSERVED STAGES TO WATER SURFACE ELEVATIONS
C
C     L11=LCAT21(1,1,NRT1)
      DO 1999 J=1,JN
      NS(J)=NB(J) - 1
      NRT=NRT1(J)
C     WRITE(6,9991) NRT
C9991 FORMAT(/5X,15(1H=),' NRT=',I5,1X,15(1H=))
      IF (NRT.LE.0) GO TO 1999
      LIJ=LCAT21(1,J,NRT1)-1
      IF(KPL2.NE.0.AND.KPL.NE.2.AND.JNK.GE.1.AND.IBUG.EQ.1)
     1 WRITE(IODBUG,8000) J
 8000 FORMAT(1H0,30X,47HOBSERVED WATER SURFACE ELEVATIONS FOR RIVER NO.,
     1 I4)
      DO 1997 I=1,NRT
      IF(KPL2.EQ.0) GO TO 1997
      IF(KPL.NE.1.AND.KPL.NE.3) GO TO 1997
      LOST=LOSTT(I+LIJ)-1
      DO 1996 K=1,NUU
      IK=IFMSNG(STT(LOST+K))
      IF(IK.EQ.1) GO TO 1996
      STT(LOST+K)=STT(LOST+K)+GZ(I+LIJ)
 1996 CONTINUE
      IF(JNK.GE.1.AND.IBUG.EQ.1) WRITE(IODBUG,7000)
     1 (STT(LOST+K),K=1,NUU)
 7000 FORMAT(1H ,10X,10F10.2)
      IF(JNK.GE.1.AND.IBUG.EQ.1) WRITE(IODBUG,7010)
 7010 FORMAT(/)
 1997 CONTINUE
 1999 CONTINUE
      NN2(1)=2*NB(1)
      IF(JN-1) 19,19,17
C
C        FIND THE COS OF THE ANGLE AT CONFLUENCE
C
   17 DO 18 J=2,JN
      ATF(J)=COS(ATF(J)/57.295)
   18 NN2(J)=2*NB(J)
   19 CONTINUE
      IF (NU.LE.0) GO TO 209
C
C        COMPUTE THE TIME ARRAYS
C
      DO 300 K=1,NPO
  300 TO(K)=DHFO*K
C
      DO 306 K=1,NU
  306 T1(K)=DHF*K
C
C        CONVERT UPSTREAM BOUNDARY STAGES TO WATER SURFACE ELEVATIONS
C
      DO 208 J=1,JN
      LOS1=LOST1(J)-1
      IF (KU(J).NE.1) GO TO 208
      IF(JNK.GE.1.AND.IBUG.EQ.1) WRITE(IODBUG,8010) J
 8010 FORMAT(1H0,30X,62HWATER SURFACE ELEVATIONS AT THE UPSTREAM BOUNDAR
     1Y OF RIVER NO.,I4)
      DO 207 K=1,NU
  207 ST1(LOS1+K)=ST1(LOS1+K) +GZ1(J)
      IF(JNK.GE.1.AND.IBUG.EQ.1) WRITE(IODBUG,7000) (ST1(LOS1+K),K=1,NU)
      IF(JNK.GE.1.AND.IBUG.EQ.1) WRITE(IODBUG,7010)
C
C        CONVERT MINIMUM STAGE TO MINIMUM WATER SURFACE ELEVATION
C
      STM(J)=STM(J)+GZ1(J)
  208 CONTINUE
C
  209 IF (KD(1)-2) 210,213,213
C
C        CONVERT DOWNSTREAM BOUNDARY STAGES TO WATER SURFACE ELEVATIONS
C
  210 IF(JNK.GE.1.AND.IBUG.EQ.1) WRITE(IODBUG,8020)
 8020 FORMAT(1H0,30X,51HWATER SURFACE ELEVATIONS AT THE DOWNSTREAM BOUND
     1ARY)
      DO 212 K=1,NU
      IF(STN(LOSTN+K-1).GT.-900.0) STN(LOSTN+K-1)=STN(LOSTN+K-1)+GZN
      IF(KD(1).EQ.0) XNOS(K)=XNOS(K)+GZN
  212 CONTINUE
      IF(JNK.GE.1.AND.IBUG.EQ.1.AND.KD(1).EQ.0) THEN
        WRITE(IODBUG,8021)
 8021   FORMAT(1H0,30X,'NOS TIDE AT THE DOWNSTREAM BOUNDARY')
        WRITE(IODBUG,7000) (XNOS(K),K=1,NU)
      ENDIF
      IF(JNK.GE.1.AND.IBUG.EQ.1) WRITE(IODBUG,7010)
  213 CONTINUE
C     WRITE(6,9992)
C     LST=LOSTT(L11)-1
C     IF(JNK.GE.1.AND.IBUG.EQ.1) WRITE(IODBUG,7000)
C    1 (STT(LST+K),K=1,NUU)
C
C        COMPUTE WIND COEFFICIENT AND DISTANCE INTEVALS
C
      DO 34 J=1,JN
      LIJ=LCAT21(1,J,NB)-1
      NS1=NS(J)
C
C        WIND COEFFICIENT
C
      WF(J)=COFW(J)*ABS(VWIND(J))*VWIND(J)*COS(WINAGL(J)/57.295)
C
C        DISTANCE INTERVAL IN FEET
C
      DO 33 I=1,NS1
   33 DDX(I+LIJ)=ABS(X(I+LIJ)-X(I+1+LIJ))*XFACT
   34 DDX(NS1+1+LIJ)=DDX(NS1+LIJ)
      NS1=NS(1)
C
C        CONVERT LATERAL FLOW UNITS FROM CFS TO CFS/(REACH LENGTH)
C
      DO 41 J=1,JN
      IF(NQL(J)) 41,41,36
   36 NQL1=NQL(J)
      LIJ=LCAT21(1,J,NQL)-1
      L1J=LCAT21(1,J,NB)-1
      IF(JNK.GE.1.AND.IBUG.EQ.1) WRITE(IODBUG,8080) J
 8080 FORMAT(1H0,10X,30X,43HLATERAL FLOW PER REACH LENGTH FOR RIVER NO.,
     1 I3)
      DO 500 I=1,NQL1
      IF(J.EQ.1.AND.QLNAM(1,I).EQ.DUMM) GO TO 500
      LOQ=LOQL(I+LIJ)-1
      LQ1=LQ(I+LIJ)
      QLI(I+LIJ)=QLI(I+LIJ)/DDX(LQ1+L1J)
      DO 400 K=1,NU
  400 QL(LOQ+K)=QL(LOQ+K)/DDX(LQ1+L1J)
      IF(JNK.GE.1.AND.IBUG.EQ.1) WRITE(IODBUG,7010)
      IF(JNK.GE.1.AND.IBUG.EQ.1) WRITE(IODBUG,7020) (QL(K+LOQ),K=1,NU)
 7020 FORMAT(1H ,10X,10F10.5)
  500 CONTINUE
      IF(JNK.GE.1.AND.IBUG.EQ.1) WRITE(IODBUG,510) J
  510 FORMAT(1H0,10X,30X,51HINITIAL LATERAL FLOW PER REACH LENGTH FOR RI
     1VER NO.,I3)
      IF(JNK.GE.1.AND.IBUG.EQ.1)WRITE(IODBUG,7020) (QLI(I+LIJ),I=1,NQL1)
   41 CONTINUE
C     LST=LOSTT(L11)-1
C     IF(JNK.GE.1.AND.IBUG.EQ.1) WRITE(IODBUG,7000)
C    1 (STT(LST+K),K=1,NUU)
C
C        DETERMINE THE PROPER POOL ELEVATIONS
C
      IF(NLADD.EQ.0) GO TO 75
      LOCK=0
      LONAM=PO(94)
      LLD=1
      DO 70 J=1,JN
      NUM=NUMLAD(J)
      LIJ=LCAT21(1,J,NB)-1
      IF(NUM.EQ.0) GO TO 70
      IF(JNK.GE.1.AND.IBUG.EQ.1) WRITE(IODBUG,8085) J
 8085 FORMAT(1H0,30X,29HPOOL ELEVATIONS FOR RIVER NO.,I3)
      LLJ=LCAT21(1,J,NUMLAD)-1
      LOCKO=LOCK
      DO 65 L=1,NUM
      IF(IVER.LT.3) LLD=L+LLJ
      IF(LAD(LLD).LT.0.OR.CHCTW(L+LLJ).LT.0.) GO TO 63
      CALL UMEMOV(PO(LONAM),STTNAM,2)
      LONAM=LONAM+3
      LOCK=LOCK+1
      LOPT=LOPLT(LOCK)-1
      IJ=LIJ+LAD(LLD)
CC      WRITE(6,9999) IJ,HS(1,IJ)
CC 9999 FORMAT(/5X,'===+++=== HS(1,',I2,')=',F10.2)
      NWRN=0
      NWRN2=0
      PLMAX=POLTAR(L+LLJ)+50.
C
C         ALLOW INTERPOLATION OF TARGET POOL ELEVATIONS
C
      POOL1=POOLT(1+LOPT)
      IF(POOL1.LT.0.0001.AND.PLTI(LOCK).GT.0.0001) POOL1=PLTI(LOCK)-
     .  GZPL(L+LLJ)
      K1=1
      K2=1
      DO 51 K=2,NU
      IF(POOLT(LOPT+K).LE.0.0001) GO TO 51
      POOL2=POOLT(LOPT+K)
      K2=K
      IF(POOL1.LT.0.0001) POOL1=POOL2
      RATIO=(POOL2-POOL1)/(K2-K1)
      GO TO 53
   51 CONTINUE
      KST=2
      IF(K2.EQ.1) THEN
        CONST=POOL1+GZPL(L+LLJ)
        KST=1
        IF(POOL1.LE.0.0001) THEN
          CONST=POLTAR(L+LLJ)
        ELSE
          IF(CONST.LT.HS(1,IJ)) NWRN=NU
        ENDIF
        DO 52 K=KST,NU
        POOLT(K+LOPT)=CONST
   52   CONTINUE
        GO TO 62
      ENDIF
   53 DO 60 K=1,NU
      IF(POOLT(LOPT+K).LE.0.001) THEN
        POOLT(LOPT+K)=(K-K1)*RATIO+POOL1+GZPL(L+LLJ)
      ELSE
        POOL1=POOL2
        K1=K2
        POOLT(LOPT+K)=POOLT(LOPT+K)+GZPL(L+LLJ)
        K3=K2+1
        DO 54 KK=K3,NU
        IF(POOLT(LOPT+KK).LT.0.0001) GO TO 54
        POOL2=POOLT(LOPT+KK)
        K2=KK
        RATIO=(POOL2-POOL1)/(K2-K1)
        GO TO 56
   54   CONTINUE
        IF(K2.LT.K3) THEN
          POOL2=POOL1
          K2=NU
          RATIO=0.
        ENDIF
      ENDIF
   56 IF(POOLT(LOPT+K).LE.HS(1,IJ)) THEN
        NWRN=NWRN+1
        POOLT(LOPT+K)=POLTAR(L+LLJ)
      ENDIF
      IF(POOLT(LOPT+K).GT.PLMAX) THEN
        NWRN2=NWRN2+1
        POOLT(LOPT+K)=POLTAR(L+LLJ)
      ENDIF
   60 CONTINUE
   62 IF(JNK.GE.1.AND.IBUG.EQ.1)WRITE(IODBUG,7000)(POOLT(LOPT+K),K=1,NU)
      IF(PLTI(LOCK).LT.0.001) PLTI(LOCK)=POOLT(1+LOPT)
      IF(NWRN.GT.0) THEN
      WRITE(IPR,8075) STTNAM,J,NWRN,HS(1,IJ),POLTAR(L+LLJ)
 8075 FORMAT(//10X,'**WARNING** AT DAM (',2A4,') ON RIVER NO. ',I2,
     .' THE POOL ELEVATION TIME SERIES HAD ',I3,' VALUES WHICH FELL BELO
     .W'/22X,'THE CHANNEL BOTTOM (',F10.2,').  THESE VALUES ARE CONSIDER
     .ED MISSING AND THE POOL ELEVATION'/22X,'IS SET EQUAL TO THE TARGET
     . POOL ELEVATION (',F10.2,2H).)
      CALL WARN
      ENDIF
      IF(NWRN2.GT.0) THEN
      WRITE(IPR,8076) STTNAM,J,NWRN2,POLTAR(L+LLJ)
 8076 FORMAT(//10X,'**WARNING** AT DAM (',2A4,') ON RIVER NO. ',I2,
     .' THE POOL ELEVATION TIME SERIES HAD ',I3,' VALUES WHICH EXCEEDED
     .REASONABLE POOL ELEVATIONS (TARGET POOL + 50 FT).'/22X,'THESE VALU
     .ES ARE CONSIDERED MISSING AND THE POOL ELEVATION'/22X,'IS SET EQUA
     .L TO THE TARGET POOL ELEVATION (',F10.2,2H).)
      CALL WARN
      ENDIF
 63   IF(IVER.GE.3) LLD=LLD+2
   65 CONTINUE
      IF(LOCK.EQ.0) GO TO 70
      IF(JNK.GE.1.AND.IBUG.EQ.1) WRITE(IODBUG,8090) J
 8090 FORMAT(1H0,30X,37HINITIAL POOL ELEVATIONS FOR RIVER NO.,I3)
      IF(LOCKO.EQ.0) LOCKO=1
      IF(JNK.GE.1.AND.IBUG.EQ.1)WRITE(IODBUG,7000)
     .   (PLTI(I),I=LOCKO+1,LOCK)
   70 CONTINUE
C     LST=LOSTT(L11)-1
C     IF(JNK.GE.1.AND.IBUG.EQ.1) WRITE(IODBUG,7000)
C    1 (STT(LST+K),K=1,NUU)
C
C        DETERMINE THE PERCENT OF FLOW DIVERTED AT EACH SECTION
C
   75 DO 100 J=1,JN
      IF(NDIV(J).EQ.0) GO TO 100
      NDV=NDIV(J)
      NQ=NQL(J)
      LIJ=LCAT21(1,J,NDIV)-1
      LLJ=LCAT21(1,J,NQL)-1
      DO 90 I=1,NDV
      IFLDIV(I+LIJ)=0
      IA=0
      IAA=0
      LDV=LODIV(I+LIJ)-1
      LDV1=LODIV(1+LIJ)-1
      IF(DIV(1+LDV).LT.0.001) DIV(1+LDV)=DVI(I+LIJ)
      IF(DIV(1+LDV1).GT.0.0001.AND.DIV(2+LDV1).LT.0.0001) IA=1
      IF(DIV(1+LDV).LT.0.0001.AND.DIV(2+LDV).LT.0.0001) IAA=1
      IF (DIV(1+LDV).GT.0001) IFLDIV(I+LIJ)=1
      DO 80 K=2,NU
      IF(DIV(K+LDV).GT.0.0001) IFLDIV(I+LIJ)=1
      IF(DIV(K+LDV).GT.0.0001) GO TO 80
      IF(IA.EQ.1.OR.IAA.EQ.1) DIV(K+LDV)=DIV(K-1+LDV)
      IF(DIV(K+LDV).GT.0.00001) IFLDIV(I+LIJ)=1
   80 CONTINUE
      IF(JNK.GE.1.AND.IBUG.EQ.1) WRITE(IODBUG,85) LDIV(I+LIJ),J
   85 FORMAT(1H0,10X,46H    ACTUAL DIVERSION PERCENTS FOR LOCATION NO.,
     1 I3,14H ON RIVER NO. ,I3,1H./)
      IF(JNK.GE.1.AND.IBUG.EQ.1) WRITE(IODBUG,7000) (DIV(K+LDV),K=1,NU)
   90 CONTINUE
  100 CONTINUE
  
      NN=NRT1(1)
      IF(KD(1).EQ.0) CALL BLNDTD21(XNOS,STN(LOSTN),TIDE,NU)
  
C9992 FORMAT(/5X,15(1H=),' AFTER USBD OF PREP21 STT= ',15(1H=))
C     LST=LOSTT(L11)-1
C     IF(JNK.GE.1.AND.IBUG.EQ.1) WRITE(IODBUG,7000)
C    1 (STT(LST+K),K=1,NUU)
C
      IF(ITRACE.EQ.1) WRITE(IODBUG,9000) SNAME
 9000 FORMAT(1H0,2H**,1X,2A4,8H EXITED.)
      RETURN
      END
