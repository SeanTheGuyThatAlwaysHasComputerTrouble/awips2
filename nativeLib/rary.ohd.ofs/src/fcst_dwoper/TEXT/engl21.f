C MEMBER ENGL21
C  (from old member FCENGL21)
C DESC -- THE FUNCTION OF THIS SUBROUTINE IS TO CONVERT TIME SERIES
C DESC -- DATA FROM METRIC UNITS TO ENGLISH UNITS AND BACK AGAIN.
C                             LAST UPDATE: 03/03/94.13:52:34 BY $WC30JL
C
C
C @PROCESS LVL(77)
C
      SUBROUTINE ENGL21(ICHK,STN,LOSTN,ST1,LOST1,POOLT,LOPLT,QL,LOQL,
     1 STT,LOSTT,QSTR,LOQSR,NU,NPO,KD,KU,KPL,JN,NQL,NUMLAD,NRT1,NSTR,
     2 KTYP,NUMRCP,YQD,QYQD,NYQD,NRC,KPL2,LAD,CHCTW,TIDE,XNOS,STE,LOSTE,
     3 NB)
C
C           THIS SUBROUTINE WAS WRITTEN BY:
C           JANICE LEWIS      HRL   NOVEMBER,1982     VERSION NO. 1
C
      COMMON/IVRSN21/IVER
CC      COMMON/FDBUG/IODBUG,ITRACE,IDBALL,NDEBUG,IDEBUG(20)
      INCLUDE 'common/fdbug'
C
      DIMENSION ST1(*),LOST1(*),STT(*),LOSTT(*),POOLT(*),LOPLT(*)
      DIMENSION QL(*),LOQL(*),STN(*),KD(*),NQL(*),NUMLAD(*),SNAME(2)
      DIMENSION KU(*),NRT1(*),QSTR(*),LOQSR(*),NSTR(*),KTYP(*)
      DIMENSION NUMRCP(*),YQD(*),QYQD(*),LAD(*),CHCTW(*),TIDE(*),XNOS(*)
      DIMENSION STE(*),LOSTE(*),NB(*)
C
C    ================================= RCS keyword statements ==========
      CHARACTER*68     RCSKW1,RCSKW2
      DATA             RCSKW1,RCSKW2 /                                 '
     .$Source: /fs/hseb/ob72/rfc/ofs/src/fcst_dwoper/RCS/engl21.f,v $
     . $',                                                             '
     .$Id: engl21.f,v 1.4 1998/07/06 11:52:44 page Exp $
     . $' /
C    ===================================================================
C
C
      DATA SNAME/4HENGL,4H21  /
C
C
CC      WRITE(6,9998)
CC 9998 FORMAT(2X,'=+=+=+ ENTERING ENGL21 +=+=+=')
      CALL FPRBUG(SNAME,1,21,IBUG)
C
CC      WRITE(6,9999) NRC
CC 9999 FORMAT(/3X,'***** NRC = ',I2,'  *********')
      IF(ICHK.EQ.1) GO TO 1
C
C       CONVERT FROM ENGLISH TO METRIC UNITS
C
      STGE=.3048
      FLOW=.0283
      GO TO 3
C
C       CONVERT FROM METRIC TO ENGLISH UNITS
C
    1 STGE=3.2808
      FLOW=35.3147
C
    3 IF(KD(1)-2) 5,5,15
C
C       CONVERT DOWNSTREAM BOUNDARY
C
    5 LSTN=LOSTN+NU-1
      TYPD=STGE
      IF(KD(1).EQ.2) TYPD=FLOW
C
      DO 10 K=LOSTN,LSTN
      IF(STN(K).GT.-900.0) STN(K)=STN(K)*TYPD
   10 CONTINUE
   
      IF(KD(1).EQ.0) THEN
        DO 11 K=1,NU
          TIDE(K)=TIDE(K)*TYPD
          XNOS(K)=XNOS(K)*TYPD
   11   CONTINUE
        XNOS(K+1)=XNOS(K+1)*TYPD
      ENDIF          
   
C
      IF(IBUG.EQ.0) GO TO 15
      WRITE(IODBUG,12)
   12 FORMAT(1H0,10X,30HDOWNSTREAM BOUNDARY HYDROGRAPH)
      WRITE(IODBUG,14) (STN(K),K=LOSTN,LSTN)
   14 FORMAT(1H ,10X,10F12.2)
      IF(KD(1).EQ.0) THEN
        WRITE(IODBUG,16)
   16   FORMAT(1H0,10X,'NOS TIDE HYDROGRAPH')
        WRITE(IODBUG,14) (XNOS(K),K=1,NU+1)
        IF(ICHK.EQ.1) THEN
          WRITE(IODBUG,20)
   20     FORMAT(1H0,10X,'ADJUSTED TIDE DOWNSTREAM BOUNDARY HYDROGRAPH')
          WRITE(IODBUG,14) (TIDE(K),K=1,NU)
        ENDIF
      ENDIF  
C
C        CONVERT THE DOWNSTREAM RATING CURVE
C
   15 IF(NRC.EQ.0) GO TO 200
      LRC=0
      DO 170 L=1,NRC
      NRCP=NUMRCP(L)
      DO 160 K=1,NRCP
      YQD(LRC+K)=YQD(LRC+K)*STGE
      QYQD(LRC+K)=QYQD(LRC+K)*FLOW
  160 CONTINUE
      IF(IBUG.EQ.0) GO TO 166
      IF(L.GT.1) GO TO 165
      IF(NYQD.NE.0) WRITE(IODBUG,17)
      IF(NYQD.EQ.0) WRITE(IODBUG,18)
   17 FORMAT(1H0,10X,23HDOWNSTREAM RATING CURVE)
   18 FORMAT(1H0,10X,24HINTERNAL RATING CURVE(S))
  165 WRITE(IODBUG,14) (YQD(K+LRC),K=1,NRCP)
      WRITE(IODBUG,14) (QYQD(K+LRC),K=1,NRCP)
  166 LRC=LRC+NRCP
  170 CONTINUE
C
  200 LOCK=0
      LLD=1
CC      WRITE(6,9992) NRC
CC 9992 FORMAT(/3X,'=====  BEFORE U/S BDRY LOOP  NRC=',I2,' ******'/)
      DO 100 J=1,JN
C
C       CONVERT UPSTREAM BOUNDARIES
C
      LOST=LOST1(J)
      LST1=LOST+NU-1
      TYPD=STGE
      IF(KU(1).EQ.2) TYPD=FLOW
C
      DO 21 K=LOST,LST1
      ST1(K)=ST1(K)*TYPD
   21 CONTINUE
C
      IF(IBUG.EQ.0) GO TO 24
      WRITE(IODBUG,22) J
   22 FORMAT(1H0,10X,42HUPSTREAM BOUNDARY HYDROGRAPH FOR RIVER NO.,I2)
      WRITE(IODBUG,14) (ST1(K),K=LOST,LST1)
C
C       CONVERT OBSERVED DATA
C
   24 IF(KPL2.EQ.0) GO TO 50
      IF(NRT1(J).EQ.0) GO TO 50
      NRT=NRT1(J)
      IF(KPL) 50,50,25
   25 TYPD=STGE
      IF(KPL.EQ.2) TYPD=FLOW
      LKJ=LCAT21(1,J,NRT1)-1
C
      IF(IBUG.GE.1) WRITE(IODBUG,27) J
   27 FORMAT(1H0,10X,40HOBSERVED STAGE HYDROGRAPHS FOR RIVER NO.,I2)
C
CC      WRITE(6,9991) NRT,K,J
CC 9991 FORMAT(/5X,'===== NRT,K,J =',3I5,'  =====')
      DO 40 K=1,NRT
      LOTT=LOSTT(K+LKJ)
      LSTT=LOTT+NU-1
CC      WRITE(6,9990) K,LKJ,LOTT,LSTT,TYPD
CC 9990 FORMAT(/5X,'=====    K       LKJ      LOTT     LSTT TYPD='/
CC     . 10X,I5,3I10,F6.3/)
      DO 30 L=LOTT,LSTT
      IK=IFMSNG(STT(L))
      IF(IK.EQ.1) GO TO 30
      STT(L)=STT(L)*TYPD
   30 CONTINUE
      IF(IBUG.GE.1) WRITE(IODBUG,14) (STT(L),L=LOTT,LSTT)
   40 CONTINUE
C
      IF(ICHK.EQ.1) GO TO 50 
      IF(KPL2.LE.1.OR.NRT.EQ.NB(J)) GO TO 50
      IF(IBUG.GE.1) WRITE(IODBUG,42) J
   42 FORMAT(1H0,10X,'ADJUSTED STAGE HYDROGRAPHS FOR RIVER NO.',I2)
C
CC      WRITE(6,9991) NRT,K,J
CC 9991 FORMAT(/5X,'===== NRT,K,J =',3I5,'  =====')
      DO 48 K=1,NRT
      LOTE=LOSTE(K+LKJ)
      LSTE=LOTE+NU-1
CC      WRITE(6,9990) K,LKJ,LOTE,LSTE,TYPD
CC 9990 FORMAT(/5X,'=====    K       LKJ      LOTT     LSTT TYPD='/
CC     . 10X,I5,3I10,F6.3/)
      DO 46 L=LOTE,LSTE
      IK=IFMSNG(STE(L))
      IF(IK.EQ.1) GO TO 46
      STE(L)=STE(L)*TYPD
   46 CONTINUE
      IF(IBUG.GE.1) WRITE(IODBUG,14) (STE(L),L=LOTE,LSTE)
   48 CONTINUE
C
C       CONVERT LATERAL FLOWS
C
   50 IF(NQL(J).EQ.0) GO TO 75
      NQ=NQL(J)
      LKJ=LCAT21(1,J,NQL)-1
C
      IF(IBUG.GE.1) WRITE(IODBUG,52) J
   52 FORMAT(1H0,10X,40HLATERAL INFLOW HYDROGRAPHS FOR RIVER NO.,I2)
C
      DO 70 K=1,NQ
      LOQ=LOQL(K+LKJ)
      LQL=LOQ+NU-1
      DO 60 L=LOQ,LQL
   60 QL(L)=QL(L)*FLOW
      IF(IBUG.GE.1) WRITE(IODBUG,14) (QL(L),L=LOQ,LQL)
   70 CONTINUE
C     IF(IBUG.GE.1) WRITE(IODBUG,14) (STT(L),L=1,36)
C
C       CONVERT POOL ELEVATIONS
C
   75 IF(ICHK.EQ.0) GO TO 92
      IF(NUMLAD(J).EQ.0) GO TO 92
      NUM=NUMLAD(J)
      LKJ=LCAT21(1,J,NUMLAD)-1
C
      IF(IBUG.GE.1) WRITE(IODBUG,77) J
   77 FORMAT(1H0,10X,25HPOOL LEVELS FOR RIVER NO.,I2)
C
      DO 90 K=1,NUM
      IF(IVER.LT.3) LLD=LKJ+K
      IF(LAD(LLD).LE.0.OR.CHCTW(LKJ+K).LT.0.) GO TO 85
      LOCK=LOCK+1
      LOPL=LOPLT(LOCK)
      LPLT=LOPL+NU-1
      DO 80 L=LOPL,LPLT
      IK=IFMSNG(POOLT(L))
      IF(IK.EQ.1) GO TO 80
      POOLT(L)=POOLT(L)*STGE
   80 CONTINUE
      IF(IBUG.GE.1) WRITE(IODBUG,14) (POOLT(L),L=LOPL,LPLT)
 85   IF(IVER.GE.3) LLD=LLD+2
   90 CONTINUE
C     IF(IBUG.GE.1) WRITE(IODBUG,14) (STT(L),L=1,36)
C
C          CONVERT OUTPUT TIME SERIES DATA
C
   92 IF(ICHK.EQ.1) GO TO 100
      IF(NSTR(J).EQ.0) GO TO 100
      NSR=NSTR(J)
      LKJ=LCAT21(1,J,NSTR)-1
C
      IF(IBUG.GE.1) WRITE(IODBUG,94) J
   94 FORMAT(1H0,10X,37HOUTPUT TIME SERIES DATA FOR RIVER NO.,I2)
      DO 98 K=1,NSR
      LONS=LOQSR(K+LKJ)
      LNSR=LONS+NPO-1
      KTP=KTYP(K+LKJ)
      TYPE=STGE
      IF(KTP.EQ.2) TYPE=FLOW
      DO 95 L=LONS,LNSR
   95 QSTR(L)=QSTR(L)*TYPE
      IF(IBUG.GE.1) WRITE(IODBUG,14) (QSTR(L),L=LONS,LNSR)
   98 CONTINUE
  100 CONTINUE
C     IF(IBUG.GE.1) WRITE(IODBUG,14) (STT(L),L=1,36)
      IF(ITRACE.EQ.1) WRITE(IODBUG,9000) SNAME
 9000 FORMAT(1H0,2H**,1X,2A4,8H EXITED.)
      RETURN
      END



