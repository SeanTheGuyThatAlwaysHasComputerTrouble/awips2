C MEMBER EX21
C  (from old member FCEX21)
C DESC -- THE FUNCTION OF THIS SUBROUTINE IS TO DYNAMICALLY ROUTE AN
C         INFLOW HYDROGRAPH DOWNSTREAM BY USING THE UNSTEADY FLOW EQNS.
C                             LAST UPDATE: 10/03/95.07:59:55 BY $WC30JL
C
C @PROCESS LVL(77)
C
      SUBROUTINE EX21(PO,IPO,CO,DTH,FFS,FS,QA,TII,T1,YA,STN,LOSTN,QLJ,
     2 LOQLJ,ST1,LOST1,XITWT,LOXIWT,POOLTS,LOPLTS,QL,LOQL,QLT,LOQLT,QTC,
     3 LOQTC,STC,LOSTC,STT,LOSTT,Z,NB,XDIV,LOXDIV,QLSTR,LOQLS,QSTR,
     4 LOQSR,TO,ITWT,LOIWT,POOLT,LOPLT,DIV,LODIV,XNOS,LONOS,TIDE,LOTID,
     5 STE,LOSTE,IRF,LEFTZ)
C
C           THIS SUBROUTINE WAS WRITTEN ORIGINALLY BY:
C           DR. DANNY FREAD   HRL   APRIL 1978
C
C           THIS SUBROUTINE WAS MODIFIED TO MEET VER. NO. 5 STANDARDS
C           OF THE NWSRFS BY:
C           JANICE LEWIS      HRL   NOVEMBER,1982     VERSION NO. 1
C        MODIFIED BY JANICE LEWIS  HRL  FEBRUARY 1992 VERSION NO. 2
C           TO ADD THE CAPABILITY OF HAVING RATING CURVES AS
C           INTERNAL BOUNDARIES
C
      COMMON/FCTIME/IDARUN,IHRRUN,LDARUN,LHRRUN,LDACPD,LHRCPD,NOW(5),
     1              LOCAL,NOUTZ,NOUTDS,NLISTZ,IDA,IHR,LDA,LHR,IDADAT
      INCLUDE 'common/fdbug'
      COMMON/IONUM/IN,IPR,IPU
      COMMON/FNOPR/NOPROT
      COMMON/FPLTAB/IPLHY,IPRHY
      COMMON/FCARY/IFILLC,NCSTOR,ICDAY(20),ICHOUR(20)
      INCLUDE 'common/fratng'
      COMMON/XS21/LOAS,LOBS,LOHS,LOASS,LOBSS,LOHSS,LONSS,LONS1
      COMMON/WD21/LOCFW,LOVWD,LOWGL
      COMMON/WQ21/LOBBL,LOHFL,LOHML,LOHWH,LONWJ,LOTFL,LOWC,LONJX,LOKLF,
     1            LOTTL
      COMMON/CM21/LONYQ,LONM1,LONCM,LOCM,LOYCM
      COMMON/DV21/LONDV,LOLDV,LZIDV
      COMMON/LD21/LONLD,LOCTW,LOLAD,LOPTR
      COMMON/OD21/LOGZ1,LOSTM,LOKU,LOKD,LONB,LONJN,LOGZ,LOX,LOATF
      COMMON/OX21/LOFKC,LONT1,LONQL,LOLQ,LZRCP,LZQQD,LZYQD,LONT
      COMMON/OZ21/LONQSL,LOSLIC,LOFRMO,LOFBIO,LORRMO,LORBIO
      COMMON/Z121/LZC,LZD,LZICQ,LZICY,LZLLT,LZNN2,LZNS,LZNSR,LZNTS,LZQLV
      COMMON/Z221/LZQC,LZQD,LZQI,LZQII,LZQJ,LZQU,LZVC,LZVD,LZVU,LZWF
      COMMON/Z321/LZXX,LZYC,LZYD,LZYII,LZYJ,LZYU,LZITR,LZDDX,LZNCT,LZNUT
      COMMON/ERR21/IERR
      COMMON/M121/N,NU,NS1,JN,JJ,KIT,G,DT,TT,TIMF,F1,GZN,NYQD
      COMMON/M421/NRCM,NCML
      COMMON/M621/KTIME,DHF,J1,KX
      COMMON/M821/TP,RHO,GAMMA,YI,SO
      COMMON/M3021/EPSY,EPSQ,EPSQJ,THETA,XFACT
      COMMON/M3221/KTERM,KPL,KPL2,JNK,TE,TM,KITPR
      COMMON/M3421/NCT,ICD,ITMAX
      COMMON/M3621/TFCST
      COMMON/M3821/CONS,QSUMIM,QSUMIT,QSUMOM,QSUMOT,JJKT
      COMMON/M3921/CFNAME,NCOH,NSAVE,DNLABL
      COMMON/SS21/NCS,A,B,DB,R,DR,AT,BT,NCSS,P,DP,ZH,NP,NPEND
      COMMON/XCED21/NBDXCD,NCMXCD,NFRXCD,NICXCD,NINXCD,NONXCD,MTXDV
      COMMON/ST21/LONSR,LOSTR,LONST,LONTP
      COMMON/NSLC21/NSLICE
      COMMON/IVRSN21/IVER
C
      DIMENSION PO(*),IPO(*),CO(*),DTH(*),FFS(*),FS(*),QA(*),NB(*)
      DIMENSION TII(*),T1(*),YA(*),STN(*),QLJ(*),LOQLJ(*),LODIV(*)
      DIMENSION ST1(*),LOST1(*),ITWT(*),LOIWT(*),POOLT(*),QLSTR(*)
      DIMENSION LOPLT(*),QL(*),LOQL(*),QLT(*),LOQLT(*),QTC(*),LOQTC(*)
      DIMENSION STC(*),LOSTC(*),STT(*),LOSTT(*),Z(*),SNAME(2),LOQLS(*)
      DIMENSION QSTR(*),LOQSR(*),TO(*),DIV(*),XITWT(*),LOXIWT(*)
      DIMENSION POOLTS(*),LOPLTS(*),XDIV(*),LOXDIV(*),JUNK(4)
      DIMENSION XNOS(*),TIDE(*),STE(*),LOSTE(*),IRF(*)
C
C    ================================= RCS keyword statements ==========
      CHARACTER*68     RCSKW1,RCSKW2
      DATA             RCSKW1,RCSKW2 /                                 '
     .$Source: /fs/hseb/ob72/rfc/ofs/src/fcst_dwoper/RCS/ex21.f,v $
     . $',                                                             '
     .$Id: ex21.f,v 1.5 1998/07/06 11:52:57 page Exp $
     . $' /
C    ===================================================================
C
C
      DATA SNAME/4HEX21,4H    /
      DATA JUNK/4HJNK0,4HJNK1,4HJNK2,4HJNK3/
C
C
      CALL FPRBUG(SNAME,1,21,IBUG)
      IERR=0
CC      WRITE(IODBUG,7776)
CC 7776 FORMAT(5X,'====== ENTERING EX21 ======')
C
C          DUMP THE PO ARRAY
C
      IVER=PO(1)
      K1=PO(2)
      K2=PO(3)
      K3=PO(4)
      K4=PO(5)
      K5=PO(6)
      K6=PO(7)
      K7=PO(8)
      K8=PO(9)
      K9=PO(10)
      K10=PO(11)
      K11=PO(12)
      K12=PO(13)
      K13=PO(113)
      K14=PO(118)
      LOCFW=PO(14)
      EPSQ=PO(15)
      EPSQJ=PO(16)
      EPSY=PO(17)
      F1=PO(18)
      GAMMA=PO(19)
      GZN=PO(20)
      ICD=PO(21)
      DHF=PO(22)
      IDHF=PO(22)+0.01
      LSTN=PO(23)
      ITMAX=PO(24)
      JN=PO(25)
      JNK=PO(26)
      IF(IFBUG(JUNK(1)).EQ.1) JNK=0
      IF(IFBUG(JUNK(2)).EQ.1) JNK=1
      IF(IFBUG(JUNK(3)).EQ.1) JNK=2
      IF(IFBUG(JUNK(4)).EQ.1) JNK=3
      KPL=PO(27)
      KTERM=PO(28)
      NCML=PO(29)
      NCS=PO(30)
      NCSS=PO(31)
      NCT=PO(32)
      NP=PO(33)
      NPEND=PO(34)
      NU=PO(35)
      NYQD=PO(36)
      NRC=0
      IF(NYQD.NE.0) NRC=NYQD
      IF(NYQD.NE.0.AND.IVER.EQ.1) NRC=1
      RHO=PO(37)
      SO=PO(38)
      THETA=PO(39)
      TM=PO(40)
      TP=PO(41)
      LDSTN=PO(42)
      LOVWD=PO(43)
      LOWGL=PO(44)
      XFACT=PO(45)
      YI=PO(46)
      LOATF=PO(47)
      LOBBL=PO(48)
      LOGZ1=PO(49)
      LOHFL=PO(50)
      LOHML=PO(51)
      LOHWH=PO(52)
      LOKD=PO(53)
      LOKU=PO(54)
      LONB=PO(56)
      LONS1=PO(57)
      LONJN=PO(58)
      LONYQ=PO(59)
      LONQL=PO(60)
      LONM1=PO(61)
      LONT1=PO(62)
      LONLD=PO(63)
      LONWJ=PO(64)
      LOFLD=PO(65)
      LOTFL=PO(66)
      LDST1=PO(67)
      LOWC =PO(68)
      LRAT=PO(69)
      LOCTW=PO(70)
      LOFKC=PO(71)
      LOGZ =PO(72)
      LOLAD=PO(73)
      LONCM=PO(74)
      LONSS=PO(75)
      LONT =PO(76)
      LONJX=PO(77)
      LOPTR=PO(78)
      LST1 =PO(79)
      LDIWT=PO(80)
      LDPLT=PO(81)
      LDQL =PO(82)
      LDSTT=PO(83)
      LOX  =PO(84)
      LOAS =PO(85)
      LOASS=PO(86)
      LOBS =PO(87)
      LOBSS=PO(88)
      LOCM =PO(89)
      LOHS =PO(90)
      LOHSS=PO(91)
      LITWT=PO(92)
      LOLQ =PO(93)
      LPOLT=PO(94)
      LOQLN=PO(95)
      LOSNM=PO(96)
      LOYCM=PO(97)
      LOKLF=PO(98)
      LOTTL=PO(99)
      KPL2 =PO(100)
      KITPR=PO(101)
      NBMAX=PO(102)
      DHFO =PO(103)
      NDHF =DHFO+0.01
      LONSR=PO(104)
      LOSTR=PO(105)
      LDSTR=PO(106)
      LONST=PO(107)
      LONTP=PO(108)
      LONDV=PO(109)
      LOLDV=PO(110)
      LOSTM=PO(114)
      LOGZO=PO(120)
      NTDV=PO(115)
      NLADD=PO(116)
      ISIZE=PO(117)
      LOGZPL=PO(128)
      LONQSL=PO(143)
      LOSLIC=PO(144)
      LOFRMO=PO(145)
      LOFBIO=PO(146)
      LORRMO=PO(147)
      LORBIO=PO(148)
      NSLICE=PO(151)

CC      WRITE(IODBUG,7775)
CC 7775 FORMAT(5X,'====== AFTER LO VALUES ======')
C
C          DUMP THE CO ARRAY
C
      LCQDI=PO(121)
      LCQLI=PO(122)
      LCDVI=PO(123)
      LCPLTI=PO(124)
      LCIWTI=PO(125)
      JSIZE=PO(126)
CC      WRITE(IODBUG,7774)
CC 7774 FORMAT(5X,'====== AFTER CO VALUES ======')
C
C          STORE IN THE D ARRAY THE FOLLOWING PARAMETERS:
C
C              1 --- C
C              2 --- D
C              3 --- ICQ
C              4 --- ICY
C              5 --- LLQT
C              6 --- LQT
C              7 --- NN2
C              8 --- NS
C              9 --- NSITR
C             10 --- QC
C             11 --- QD
C             12 --- QI
C             13 --- QII
C             14 --- QJ
C             15 --- QU
C             16 --- VC
C             17 --- VD
C             18 --- VU
C             19 --- WF
C             20 --- XX
C             21 --- YC
C             22 --- YD
C             23 --- YII
C             24 --- YJ
C             25 --- YU
C             26 --- ITR
C             27 --- DDX
C             28 --- NCSSST
C             29 --- NUMLDT
C             30 --- QLLT
C             31 --- YQD
C             32 --- QYQD
C             33 --- IFLDIV
C             34 --- CCO
C             35 --- QLEVE
C             36 --- ST0
C             37 --- QT0
C             38 --- YMX
C             39 --- IMX
C             40 --- FRMS
C             41 --- FBIAS
C             42 --- RRMS
C             43 --- RBIAS
C
      LZC  =1
      LZD  =LZC  +K10
      LZICQ=LZD  +K10*4
      LZICY=LZICQ+NBMAX
      LZLLT=LZICY+NBMAX
      LZLQT=LZLLT+K8
      LZNN2=LZLQT+K8
CC      WRITE(IODBUG,7673)
CC 7673 FORMAT(3X,'====== AFTER LZNN2 VALUES ======')
      LZNS =LZNN2+JN
      LZNSR=LZNS +JN
      LZQC =LZNSR+JN
      LZQD =LZQC +K4
      LZQI =LZQD +K4
      LZQII=LZQI +JN
      LZQJ =LZQII+K4
      LZQU =LZQJ +JN
      LZVC =LZQU +K4
      LZVD =LZVC +K4
CC      WRITE(IODBUG,7674)
CC 7674 FORMAT(3X,'====== AFTER LZVD VALUES ======')
      LZVU =LZVD +K4
      LZWF =LZVU +K4
      LZXX =LZWF +JN
      LZYC =LZXX +K10
      LZYD =LZYC +K4
CC      WRITE(IODBUG,7672)
CC 7672 FORMAT(3X,'====== AFTER LZYD VALUES ======')
      LZYII=LZYD +K4
      LZYJ =LZYII+K4
      LZYU =LZYJ +JN
      LZITR=LZYU +K4
      LZDDX=LZITR+JN
CC      WRITE(IODBUG,7671)
CC 7671 FORMAT(3X,'====== AFTER LZDDX VALUES ======')
      LZNCT=LZDDX+K4
      LZNUT=LZNCT+NBMAX
      LZQLL=LZNUT+JN
      LZYQD=LZQLL+JN
      LZQQD=LZYQD+NRC*112
      LZRCP=LZQQD+NRC*112
      LZIDV=LZRCP+NRC
      LZCCO=LZIDV+K13
      LZQLV=LZCCO+JSIZE
      LZST0=LZQLV+K4
      LZQT0=LZST0+K3
      LZYMX=LZQT0+K3
      LZIMX=LZYMX+K4
      LZFRMS=LZIMX+NBMAX
      LZFBIA=LZFRMS+3*K7
      LZRRMS=LZFBIA+3*K7
      LZRBIA=LZRRMS+3*K7
      LZEND=LZRBIA+3*K7

      IF(LZEND.GT.LEFTZ) THEN
        WRITE(IPR,9988) LZEND,LEFTZ
 9988   FORMAT(10X,'****ERROR***  SPACE NEEDED:',I8,' SPACE AVAILABLE:',
     . I8,5X,'** NOT ENOUGH SPACE TO FILL ARRAYS..CONTACT YOUR FOCAL '
     . 'POINT AT HRL'/25X,'THE DWOPER OPERATION WILL BE SKIPPED.'/)
       CALL ERROR
       GO TO 9500
      ENDIF

CC      WRITE(IODBUG,7773)
CC 7773 FORMAT(3X,'====== AFTER LZ VALUES ======')
C
C
C    SET EXCEEDED TABLE COUNTERS TO ZERO
C
      NBDXCD=0
      NCMXCD=0
      NICXCD=0
      NFRXCD=0
      NINXCD=0
      MTXDV =0
C
      CALL MDYH1(IDA,IHR,KMO,KDA,KYR,KHR,NOUTZ,NOUTDS,ZONE)
CC      WRITE(IODBUG,7771)
CC 7771 FORMAT(5X,'====== AFTER MDYH1 ======')
      INOW=(LDACPD-1)*24+LHRCPD
      ISTRT=(IDA-1)*24
cew compute offset for mcp and esp runs
cew all of these offsets must be undone 
      IOFFSET=(IDA-IDADAT)*24/IDHF+(IHR-1)/IDHF+1
cew adjust the locations in the d array for the input data.
      lostn=lostn+ioffset-1
      LONOS=LONOS+IOFFSET-1
      LOTID=LOTID+IOFFSET-1
      do 400 ie=1,jn
       lost1(ie)=lost1(ie)+ioffset-1
       loqlj(ie)=loqlj(ie)+ioffset-1
400   continue
      do 401 ie=1,nladd
       loxiwt(ie)=loxiwt(ie)+ioffset-1
       loplts(ie)=loplts(ie)+ioffset-1
       loiwt(ie)=loiwt(ie)+ioffset-1
       loplt(ie)=loplt(ie)+ioffset-1
401   continue
cew k11 is ntql
      do 402 ie=1,k11
       loql(ie)=loql(ie)+ioffset-1
       loqlt(ie)=loqlt(ie)+ioffset-1
402   continue
cew k4 is nrtt
cew k3 is number of gauging stations
      do 403 ie=1,k3
       loqtc(ie)=loqtc(ie)+ioffset-1
       lostc(ie)=lostc(ie)+ioffset-1
       lostt(ie)=lostt(ie)+ioffset-1
       LOSTE(IE)=LOSTE(IE)+IOFFSET-1
403   continue
cew k2 is nsrr
      do 404 ie=1,k2
       loqsr(ie)=loqsr(ie)+ioffset-1
404   continue
cew k13 is ntdiv
      do 405 ie=1,k13
       loxdiv(ie)=loxdiv(ie)+ioffset-1
       lodiv(ie)=lodiv(ie)+ioffset-1
       loqls(ie)=loqls(ie)+ioffset-1
405   continue
cew end of tape and string fix

C     WRITE(6,9900) IDA,IDADAT,IDHF,IHR,ISTRT
C9900 FORMAT(3X,'=-=-=-=       IDA    IDADAT IDHF  IHR     ISTRT='/
C    . 10X,2I10,2I5,I10,' =-=-=-=-=')
      IF(KPL2.EQ.0) GO TO 30
      IF(INOW.GT.ISTRT) GO TO 30
      WRITE(IPR,7000) LDACPD,LHRCPD,IDA,IHR
 7000 FORMAT(1H0,10X,68H**WARNING** THERE IS NO OBSERVED DATA FOR THIS R
     .UN PERIOD.  (LDACPD=,I10,10H   LHRCPD=,I2,1H),5X,5H(IDA=,I10,7H
     .IHR=,I2,31H).   NO STATISTICS CAN BE DONE.)
      CALL WARN
      KPL2=0
C
C         COMPUTE TOTAL TRAVEL PERIOD
C
CC   30 WRITE(IODBUG,7777)
CC 7777 FORMAT(5X,'========== BEFORE LABEL 30 =============')
CC      TDHF=TM*KITPR
   30 TDHF=TM*KITPR
      IF(NU.GT.0) NU=(LDA-IDA)*24/IDHF+(LHR-IHR)/IDHF+1
      NPD=(LDA-IDA)*24/TDHF+(LHR-IHR)/TDHF+1
      NPO=(LDA-IDA)*24/NDHF+(LHR-IHR)/NDHF+1
      TE=TDHF*NPD
      IF(IBUG.NE.0) WRITE(IODBUG,9999) DHF,TDHF,NU,NPD,NPO,IDA,LDA,TE
 9999 FORMAT(5X,' DHF TDHF  NU NPD NPO     IDA     LDA    TE ='/
     1       5X,F4.0,F5.0,3I4,2I8,F6.1)
C
C        PRINT THE ENTIRE PARAMETER AND CARRYOVER ARRAYS IN REAL,INTEGER
C        AND ALPHANUMERIC FORMATS
C
      IF(IBUG.EQ.0) GO TO 40
C
      WRITE(IODBUG,8000)
 8000 FORMAT(1H0,10X,47HDEBUG EXECUTION SUBROUTINE FOR DWOPER OPERATION
     *//)
      WRITE(IODBUG,8010)
 8010 FORMAT(1H0,10X,31HCONTENTS OF THE PARAMETER ARRAY)
      CALL ARRY21(PO,PO,ISIZE)
      WRITE(IODBUG,8020)
 8020 FORMAT(//1H0,10X,31HCONTENTS OF THE CARRYOVER ARRAY)
      CALL ARRY21(CO,CO,JSIZE)
C
C
C          STORE RATING CURVE IN THE Z ARRAY
C
C  40 WRITE(IODBUG,666) NYQD,NRC
C 666 FORMAT(//3X,25(1H=),'NYQD=',I3,3X,'NRC=',I3,1X,25(1H=))
      IF(NYQD.EQ.0) GO TO 42
   40 IF(NYQD.EQ.0) GO TO 42
      CALL STRC21(PO,LRAT,Z(LZYQD),Z(LZQQD),Z(LZRCP),PO(LOKD),KDD,
     . NRC)
      NYQD=0
      IF(KDD.NE.3) GO TO 42
      CALL FGETRC(PO(LRAT),ISW)
      NYQD=NRCPTS
      GZN=GZERO
      IF(GZN.LE.-999.) GZN=0.
C
C      STORE FLOW DIVERSIONS INTO TEMPORARY ARRAY SPACE.
C
   42 IF(NTDV.EQ.0) GO TO 46
C
C
   43 DO 45 K=1,NTDV
      LXDIV=LOXDIV(K)-1
      LDIV=LODIV(K)-1
C
      IF(IBUG.NE.0) WRITE(IODBUG,8026)
 8026 FORMAT(1H0)
C
      DO 44 I=1,NU
      DIV(LDIV+I)=XDIV(LXDIV+I)
   44 CONTINUE
      IF(IBUG.NE.0) WRITE(IODBUG,8028) (DIV(LDIV+I),I=1,NU)
 8028 FORMAT(1H ,10X,5H DIV=,20I5)
   45 CONTINUE
C
C      STORE TARGET POOL ELEVATIONS AND GATE CONTROL SWITCHES INTO
C      TEMPORARY ARRAY SPACE.  CHECK FOR MISSING VALUES AND SET TO ZERO.
C
   46 IF(NLADD.EQ.0) GO TO 50
C
      IF(IBUG.EQ.0) GO TO 47
      WRITE(IODBUG,8030) (LOXIWT(K),K=1,NLADD)
 8030 FORMAT(1H0,10X,7HLOXIWT=,20I5)
      WRITE(IODBUG,8032) (LOIWT(K),K=1,NLADD)
 8032 FORMAT(1H0,10X,7HLOIWT =,20I5)
      WRITE(IODBUG,8034) (LOPLTS(K),K=1,NLADD)
 8034 FORMAT(1H0,10X,7HLOPLTS=,20I5)
      WRITE(IODBUG,8036) (LOPLT(K),K=1,NLADD)
 8036 FORMAT(1H0,10X,7HLOPLT =,20I5)
C
   47 DO 49 K=1,NLADD
      LXIWT=LOXIWT(K)-1
      LIWT=LOIWT(K)-1
      LPLTS=LOPLTS(K)-1
      LPLT=LOPLT(K)-1
      IF(IBUG.NE.0) WRITE(IODBUG,8038) (XITWT(LXIWT+I),I=1,NU)
 8038 FORMAT(1H ,10X,7H XITWT=,20F5.0)
      IF(IBUG.NE.0) WRITE(IODBUG,8040) (POOLTS(LPLTS+I),I=1,NU)
 8040 FORMAT(1H ,10X,7HPOOLTS=,10F10.2)
      DO 48 I=1,NU
      POOLT(LPLT+I)=0.
      IF(IFMSNG(POOLTS(LPLTS+I)).EQ.0) POOLT(LPLT+I)=POOLTS(LPLTS+I)
      ITWT(LIWT+I)=0
      IF(IFMSNG(XITWT(LXIWT+I)).EQ.0) ITWT(LIWT+I)=XITWT(LXIWT+I)+0.5
   48 CONTINUE
      IF(IBUG.NE.0) WRITE(IODBUG,8048) (ITWT(LIWT+I),I=1,NU)
 8048 FORMAT(1H ,10X,6H ITWT=,20I5)
      IF(IBUG.NE.0) WRITE(IODBUG,8050) (POOLT(LPLT+I),I=1,NU)
 8050 FORMAT(1H ,10X,6HPOOLT=,10F10.2)
   49 CONTINUE
C
C          CONVERT TIME SERIES TO ENGLISH UNITS
C
   50 ICHK=1
      CALL ENGL21(ICHK,STN,LOSTN,ST1,LOST1,POOLT,LOPLT,QL,LOQL,STT,LOSTT
     1,QSTR,LOQSR,NU,NPO,PO(LOKD),PO(LOKU),KPL,JN,PO(LONQL),PO(LONLD),
     2 PO(LONT1),PO(LONSR),PO(LONTP),Z(LZRCP),Z(LZYQD),Z(LZQQD),NYQD,NRC
     3,KPL2,PO(LOLAD),PO(LOCTW),TIDE(LOTID),XNOS(LONOS),STE,LOSTE,NB)
C
C          COMPUTE EXTRA GAGING STATIONS FOR AUTOMATIC CALIBRATION RUN
C
      IF(NP.EQ.1)
     1 CALL PRCL21(NB,PO(LONT1),PO(LONT),PO(LOX),STT,LOSTT,
     1 PO(LONJN),PO(LOGZ),PO(LOSNM))
C
C
C         CHECK TO SEE IF INITIAL CONDITIONS WILL NEED TO GO THROUGH THE
C         WARM-UP PROCESS.
C
      NWMUP=1
      IF(ITMAX.LT.0) NWMUP=0
      ITMAX=IABS(ITMAX)
      IF(NWMUP.EQ.1) GO TO 52
      CALL WMUP21(NB,CO(LCQDI),Z(LZCCO),PO(LONJN),PO(LONQL),PO(LOLQ),
     1 CO(LCQLI),PO(LOQLN),PO(LONDV),PO(LOLDV),CO(LCDVI),PO(LONWJ),JN,
     2 NWMUP)
C     WRITE(6,9991) LOSTT(1),LOSTC(1)
C     LOS=LOSTT(1)-1
C     WRITE(6,9992) (STT(LOS+I),I=1,36)
C
C          COMPUTE THE INITIAL CONDITIONS
C
   52 CALL INCD21(PO(LOKD),NB,CO(1),CO(LCQDI),PO(LONT1),PO(LONT),
     1 PO(LOX),STT,LOSTT,PO(LONJN),Z(LZYQD),Z(LZQQD),PO(LOGZ),
     2 PO(LONQL),PO(LOLQ),CO(LCQLI),PO(LOQLN),PO(LONDV),PO(LOLDV),
     3 CO(LCDVI))
C
C          PREPARE DATA TO BE USED IN THE FINITE DIFFERENCE SCHEME
C
      CALL PREP21(PO(LOX),NB,Z(LZDDX),PO(LOGZ),PO(LOKD),PO(LOKU),
     1 PO(LOLQ),Z(LZNS),QL,LOQL,Z(LZWF),PO(LOATF),Z(LZNN2),PO(LONQL),
     2 STN,LOSTN,STT,LOSTT,ST1,LOST1,PO(LONT1),T1,PO(LOGZ1),PO(LONLD),
     3 PO(LOPTR),POOLT,LOPLT,PO(LOCFW),PO(LOVWD),PO(LOWGL),PO(LOQLN),
     4 DHF,PO(LONDV),PO(LOLDV),DIV,LODIV,Z(LZIDV),PO(LOSTM),TO,NPO,DHFO,
     5 Z(LZST0),Z(LZQT0),CO(LCQLI),CO(LCDVI),CO(LCPLTI),PO(LOGZPL),
     6 PO(LOLAD),PO(LOCTW),PO(LOHS),K7,PO,NLADD,XNOS(LONOS),TIDE(LOTID))
C     WRITE(6,9991) LOSTT(1),LOSTC(1)
C     LOS=LOSTT(1)-1
C     WRITE(6,9992) (STT(LOS+I),I=1,36)
C
C        BACKWATER COMPUTATIONS
C
      N=NB(1)
C      WRITE(6,9990) N,CO(N),CO(N-1)
C 9990 FORMAT(1H ,5X,2HN=,I3,5X,7HYDI(N)=,F10.2,5X,8HYDI(NN)=,F10.2)
      IF(ABS(CO(N)).GT.0.01.AND.ABS(CO(N-1)).LT.0.01)GO TO 55
      GO TO 60
C
C        PRINT THE DESCRIPTION OF OUTPUT VARIABLES
C
   55 IF(IBUG.GT.0.AND.JNK.GT.0) WRITE(IODBUG,2)
    2 FORMAT(1H0,10X,50HDESCRIPTION OF VARIABLES - BACKWATER COMPUTATION
     *S:/1H0,15X,34HI            CROSS-SECTION NUMBER
     * /1H ,15X,34HKK           NUMBER OF ITERATIONS
     * /1H ,15X,57HKTR          METHOD USED TO OBTAIN INITIAL GUESS FOR
     *WSEL/1H ,28X,24H=0 EXTRAPOLATION OF WSEL
     * /1H ,28X,25H=1 EXTRAPOLATION OF DEPTH
     * /1H ,28X,15H=2 NORMAL DEPTH
     * /1H ,28X,16H=3 NONCOVERGENCE
     * /1H ,15X,31HQDI    CFS  INITIAL DISCHARGE
     * /1H ,15X,26HYDI    FT   INITIAL WSEL
     * /1H ,15X,36HYLLI   FT   INITIAL GUESS FOR WSEL
     * /1H ,15X,26HDEPTH  FT   DEPTH OF FLOW
     * /1H ,15X,32HA      SQFT CROSS-SECTIONAL AREA//)
C
C     WRITE(6,9998) K1,K2,K3,K4,K5,K6,K7,K8,K8,K10,K11,K12,K13,K14
C9998 FORMAT(2X,'   K1   K2   K3   K4   K5   K6   K7   K8   K9  K10  K11
C    1  K11  K12  K13  K14'/2X,14I5)
      CALL BWTR21(PO,Z,NB,CO(1),CO(LCQDI),PO(LONJN),PO(LOHS),PO(LONYQ),
     1 PO(LOCM),PO(LOX),XFACT,PO(LONM1),NCML,STT,LOSTT,CO(LCPLTI),
     2 PO(LONLD),PO(LOLAD),Z(LZRCP),EPSY,K6,K7,K9)
C     WRITE(6,9991) LOSTT(1),LOSTC(1)
C     LOS=LOSTT(1)-1
C     WRITE(6,9992) (STT(LOS+I),I=1,36)
C
C        DYNAMIC ROUTING COMPUTATIONS
C
C        PRINT DESCRIPTION OF OUTPUT VARIABLES
C
   60 IF(K14.GT.0.AND.JNK.GT.0.AND.IBUG.GT.0.AND.NP.EQ.0)
     1 WRITE(IODBUG,100)
  100 FORMAT(1H0,10X,49HDESCRIPTION OF VARIABLES - WEIR-FLOW COMPUTATION
     *S/1H0,15X,25HJJ          RIVER NUMBER
     * /1H ,15X,50HQLDTOT CFS  FLOW OVER LEVEE AT PREVIOUS TIME STEP
     * /1H ,15X,49HQLUTOT CFS  FLOW OVER LEVEE AT CURRENT TIME STEP
     * /1H ,15X,39HWMU    FT   AVEARGE WSEL IN MAIN RIVER
     * /1H ,15X,42HWTU    FT   AVERAGE WSEL IN THE TRIBUTARY
     * /1H ,15X,65HSUB         SUBMERGENCE CORRECTION FACTOR FOR FLOW OV
     *ER THE LEVEE/1H ,15X,41HBBU    FT   WIDTH OF BOTTOM OF CREVSASSE
     * /1H ,15X,71HSUBL        SUBMERGENCE CORRECTION FACTOR FOR FLOW TH
     *ROUGH THE CREVASSE/1H ,15X,29HHLBU   FT   FAILURE ELEVATION
     * /1H ,15X,53HKML         SEQUENCE NUMBER OF THE REACH PASSING FLOW
     * /)
C
C           PRINT DESCRIPTION OF VARIABLES - TRIBUTARY INFORMATION
C
      IF(NP.EQ.0.AND.JNK.GT.0.AND.IBUG.GT.0.AND.JN.GT.1)
     * WRITE(IODBUG,110)
  110 FORMAT(1H0,10X,49HDESCRITPION OF VARIABLES - TRIBUTARY INFORMATION
     * /1H0,15X,40HJJK       NUMBER OF JUNCTION ITERATIONS
     * /1H ,15X,85HERQ  CFS  ABSOLUTE DIFFERENCE BETWEEN THE ESTIMATED A
     *ND COMPUTED FLOW AT THE JUNCTION/1H0,15X,64HQU   CFS  FLOW AT THE
     *JUNCTION COMPUTED AT THE CURRENT TIME STEP/1H ,15X,65HQD   CFS  FL
     *OW AT THE JUNCTION COMPUTED AT THE PREVIOUS TIME STEP/1H0,15X,63HQ
     *J   CFS  ESTIMATED FLOW AT THE JUNCTION FOR THE NEXT TIME STEP/1H
     *,15X,22HQJO  CFS  OLD QJ VALUE/1H ,15X,100HITR       NUMBER OF TRI
     *BUTARY ITERATIONS REQUIRED FOR A SOLUTION USING THE NEWTON-RAPHSON
     * TECHNIQUE /)
C     WRITE(6,9991) LOSTT(1),LOSTC(1)
C     LOS=LOSTT(1)-1
C     WRITE(6,9992) (STT(LOS+I),I=1,36)
      IF(NP.EQ.0)
     1 CALL DWSM21(PO,Z,Z(LZXX),PO(LOKU),NB,Z(LZQJ),Z(LZQI),
     2 Z(LZYJ),PO(LONJN),PO(LONYQ),Z(LZNS),Z(LZITR),Z(LZNSR),Z(LZQU),
     3 Z(LZYD),Z(LZYU),PO(LOX),Z(LZQC),Z(LZYC),CO(LCQDI),CO(1),
     4 Z(LZVU),Z(LZVC),Z(LZVD),PO(LONT),Z(LZQII),Z(LZYII),PO(LOHS),QTC,
     5 LOQTC,STC,LOSTC,TII,T1,DTH,Z(LZQD),Z(LZDDX),PO(LONT1),Z(LZICY),
     6 Z(LZICQ),STN,LOSTN,ST1,LOST1,ITWT,LOIWT,POOLT,LOPLT,QL,LOQL,
     7 Z(LZQLL),PO(LONQL),PO(LOGZO),DIV,LODIV,QLSTR,LOQLS,QSTR,LOQSR,TO,
     8 PO(LONSR),PO(LONST),PO(LONTP),NPD,Z(LZCCO),Z(LZQLV),ISTRT,NWMUP,
     9 NPO,K4,K6,K7,K9,K14,Z(LZST0),Z(LZQT0),CO(LCQLI),CO(LCDVI),
     1 CO(LCPLTI),CO(LCIWTI),PO(LONDV),PO(LONLD),Z(LZYMX),Z(LZIMX),
     2 PO(LOLQ),Z(LZRCP),PO(LOLAD),PO(LOKD),TIDE(LOTID))
C
C          DYNAMIC ROUTING COMPUTATIONS USING AUTOMATIC CALIBRATION
C
C      IF(NP.GE.1)
C     1 CALL DWAC21(PO,Z,PO(LONS1),PO(LONQL),Z(LZXX),Z(LZNN2),PO(LOKD),
C     2 NB,PO(LONJN),PO(LONT1),PO(LONLD),
C     3 Z(LZNCT),Z(LZLLT),Z(LZNUT),PO(LONYQ),PO(LONSS),PO(LOLQ),Z(LZQD),
C     4 Z(LZQU),Z(LZYD),Z(LZYU),Z(LZDDX),Z(LZQC),Z(LZYC),CO(LCQDI),
C     5 CO(1),PO(LOPTR),PO(LOCTW),PO(LOLAD),Z(LZLQT),Z(LZQII),
C     6 Z(LZYII),PO(LOX),PO(LOHS),PO(LOCM),PO(LOYCM),QL,LOQL,ST1,LOST1,
C     7 LOSTN,QTC,LOQTC,STC,LOSTC,POOLT,LOPLT,ITWT,LOIWT,QLT,LOQLT,QLJ,
C     8 LOQLJ,YA,QA,TII,FS,FFS,T1,PO(LONT),STT,LOSTT,PO(LONM1),Z(LZICQ),
C     4 Z(LZICY),PO(LOQLN),DIV,LODIV,QLSTR,LOQLS,IHR,KDA,KMO,ISTRT,INOW,
C     5 NPD,CO(LCQLI),CO(LCDVI),CO(LCIWTI),Z(LZRCP),K6,K7,K9,KYR,
C     6 Z(LZST0),Z(LZQT0))
C
C          PLOT DESIRED HYDROGRAPHS
C
      IF(NP.EQ.1) GO TO 200
C     WRITE(6,9991) LOSTT(1),LOSTC(1)
C9991 FORMAT(5X,'LOSTT=',I10,5X,'LOSTC=',I10)
C     LOS=LOSTT(1)-1
C     WRITE(6,9992) (STT(LOS+I),I=1,36)
C9992 FORMAT(3X,10F10.2)
      IF(KPL.GE.1.AND.NOPROT.EQ.0.AND.IPLHY.EQ.1)
     1 CALL WPLT21(TII,QTC,LOQTC,FS,FFS,STC,LOSTC,STT,LOSTT,PO(LONT1),
     2 PO(LOSNM),PO(LONT),PO(LOFLD),PO(LOSTM),T1,KHR,KDA,KMO,KYR,ISTRT,
     3 INOW,Z(LZST0),Z(LZQT0),CO(1),CO(LCQDI),NB,ZONE,PO(LOKU),PO(LOGZ))
C
C          COMPUTE STATISTICS
C
      IF(KPL2.NE.0.AND.KPL.NE.0)
     1 CALL STAT21(PO,PO(LONT1),STT,LOSTT,STC,LOSTC,QTC,LOQTC,PO(LOSNM),
     2 PO(LONT),TII,T1,ISTRT,INOW,Z(LZST0),Z(LZQT0),CO(1),CO(LCQDI),NB,
     3 PO(LOGZ),LOSTE,STE,IRF,Z(LZFRMS),Z(LZFBIA),Z(LZRRMS),Z(LZRBIA))

C         COMPARE INFLOW HYDROGRAPH WITH MINIMUM VALUE HYDROGRAPH
C
CC      ITRACE=1
      CALL LOWQ21(ST1,LOST1,PO(LOSTM),PO(LOKU),JN,NU)
     1
C
C         PRINT THE OUTPUT TIME SERIES ARRAYS
C
      IF(IBUG.GT.0.AND.JNK.GE.1) CALL PRTS21(NPO,TO,QSTR,LOQSR,PO(LONSR)
     *,PO(LONST),PO(LOSTR),JN)
C
C         CONVERT TIME SERIES HYDROGRAPHS BACK TO ORIGINAL FORMS
C
CC      WRITE(6,6666)
CC 6666 FORMAT(2X,'=-=-=-=-=- BEFORE UNDO21 -=-=-=-=--=-=')
  200 CALL UNDO21(STT,LOSTT,PO(LONT1),PO(LOGZ),ST1,LOST1,PO(LOGZ1),
     1 STN,LOSTN,GZN,QL,LOQL,PO(LOLQ),PO(LONQL),Z(LZDDX),PO(LOKD),
     2 PO(LOKU),PO(LONB),JN,KPL,NU,KPL2,JNK,CO(LCQLI),XNOS(LONOS),
     3 TIDE(LOTID),STE,LOSTE)
CC      WRITE(6,6668)
CC 6668 FORMAT(2X,'=-=-=-=-=- AFTER UNDO21 -=-=-=-=--=-=')
C
C          CONVERT TIME SERIES BACK TO METRIC UNITS
C
      ICHK=0
      CALL ENGL21(ICHK,STN,LOSTN,ST1,LOST1,POOLT,LOPLT,QL,LOQL,STT,LOSTT
     1,QSTR,LOQSR,NU,NPO,PO(LOKD),PO(LOKU),KPL,JN,PO(LONQL),PO(LONLD),
     2 PO(LONT1),PO(LONSR),PO(LONTP),Z(LZRCP),Z(LZYQD),Z(LZQQD),NYQD,NRC
     3,KPL2,PO(LOLAD),PO(LOCTW),TIDE(LOTID),XNOS(LONOS),STE,LOSTE,NB)
C
cew compute offset for mcp and esp runs
cew all of these offsets must be undone
      IOFFSET=(IDA-IDADAT)*24/IDHF+(IHR-1)/IDHF+1
cew adjust the locations in the d array for the input data.
      lostn=lostn-ioffset+1
      LOTID=LOTID-IOFFSET+1
      LONOS=LONOS-IOFFSET+1
      do 600 ie=1,jn
       lost1(ie)=lost1(ie)-ioffset+1
       loqlj(ie)=loqlj(ie)-ioffset+1
600   continue
      do 601 ie=1,nladd
       loxiwt(ie)=loxiwt(ie)-ioffset+1
       loplts(ie)=loplts(ie)-ioffset+1
       loiwt(ie)=loiwt(ie)-ioffset+1
       loplt(ie)=loplt(ie)-ioffset+1
601   continue
cew k11 is ntql
      do 602 ie=1,k11
       loql(ie)=loql(ie)-ioffset+1
       loqlt(ie)=loqlt(ie)-ioffset+1
602   continue
cew k4 is nrtt
cew k3 is number of gauging stations
      do 603 ie=1,k3
       loqtc(ie)=loqtc(ie)-ioffset+1
       lostc(ie)=lostc(ie)-ioffset+1
       lostt(ie)=lostt(ie)-ioffset+1
       LOSTE(IE)=LOSTE(IE)+IOFFSET-1
603   continue
cew k2 is nsrr
      do 604 ie=1,k2
       loqsr(ie)=loqsr(ie)-ioffset+1
604   continue
cew k13 is ntdiv
      do 605 ie=1,k13
       loxdiv(ie)=loxdiv(ie)-ioffset+1
       lodiv(ie)=lodiv(ie)-ioffset+1
       loqls(ie)=loqls(ie)-ioffset+1
605   continue
cew end of tape and string fix

C ==================================================================
C
C =====  TRACE HAS BEEN COMMENTED OUT BECAUSE THERE IS A       =====
C =====  POINTER EXCEPTION ERROR WHEN THIS STATEMENT IS ACTIVE =====
C
C ==================================================================
      IF(ITRACE.EQ.1) WRITE(IODBUG,9000) SNAME
 9000 FORMAT(1H0,2H**,1X,2A4,8H EXITED.)
 9500 RETURN
      END
