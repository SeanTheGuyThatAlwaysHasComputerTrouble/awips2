C MEMBER COX44
C  (from old member FCCOX44)
C-----------------------------------------------------------------------
C
C                             LAST UPDATE: 05/08/95.10:58:25 BY $WC30RE
C
C @PROCESS LVL(77)
C
      SUBROUTINE COX44 (POLD,COLD,PNEW,CNEW)

C     THIS IS THE CARRYOVER TRANSFER ROUTINE FOR SSARR ROUTING

C     THIS ROUTINE ORIGINALLY WRITTEN BY
C        RAY FUKUNAGA - NWRFC   NOV 1994

C    POSITION     CONTENTS OF P ARRAY
C      1           VERSION NUMBER OF OPERATION
C      2-19        GENERAL NAME OR TITLE

C     USED TO CONSERVE INFLOW HYDROGRAPH VOLUME
C     20-21        START INFLOW TIME SERIES IDENTIFIER
C     22           START INFLOW DATA TYPE CODE 

C     INFLOW HYDROGRAPH
C     23-24        END INFLOW TIME SERIES IDENTIFIER
C     25           END INFLOW DATA TYPE CODE 

C     USED TO CONSERVE ROUTED HYDROGRAPH VOLUME
C     26-27        START OUTFLOW TIME SERIES IDENTIFIER
C     28           START OUTFLOW DATA TYPE CODE 

C     ROUTED OUTFLOW HYDROGRAPH
C     29-30        END OUTFLOW TIME SERIES IDENTIFIER
C     31           END OUTFLOW DATA TYPE CODE 

C     32           1 OR 2 INFLOW TIME SERIES SPECIFIED FLAG
C                  = 1, ONLY THE END INFLOW TIME SERIES IS SPECIFIED
C                  = 2, BOTH THE START AND END INFLOW TIME SERIES ARE
C                       SPECIFIED
C     33           1 OR 2 OUTFLOW TIME SERIES SPECIFIED FLAG
C                  = 1, ONLY THE END OUTFLOW TIME SERIES IS SPECIFIED
C                  = 2, BOTH THE START AND END OUTFLOW TIME SERIES ARE
C                       SPECIFIED
C     34           NUMBER OF ROUTING PHASES (MUST BE > 0)
C     35           N VALUE OF KTS/Q**N COMPUTATION
C                  IF N=0, THE TIME OF STORAGE IS EXTRACTED FROM THE
C                           DISCHARGE-TIME OF STORAGE TABLE
C     36           KTS VALUE IN HOURS IF N IS NONZERO
C     37           THE NUMBER OF POINTS ON THE DISCHARGE-TIME OF
C                  STORAGE TABLE IF N=0 (=0 IF N IS NONZERO)
C     38           COMPUTATIONAL TIME INTERVAL (HOURS)
C     39+          THE POINTS OF THE DISCHARGE-TIME OF STORAGE TABLE
C
C     THEREFORE THE NUMBER OF ELEMENTS REQUIRED IN THE P ARRAY IS
C        38 +
C         2 * NUMBER OF POINTS OF THE DISCHARGE-TIME OF STORAGE TABLE

C     POSITION     CONTENTS OF C ARRAY
C      1           INITIAL START INFLOW, IF ONLY END INFLOW TIME SERIES
C                  IS SPECIFIED
C      2+          PHASE FLOW VALUES FROM REACH


      DIMENSION POLD(*),COLD(*),PNEW(*),CNEW(*)
      LOGICAL XWARN,XDIF


      COMMON/FDBUG/IODBUG,ITRACE,IDBALL,NDEBUG,IDEBUG(20)
      COMMON/IONUM/IN,IPR,IPU
      COMMON/FCONIT/IVALUE
C
C    ================================= RCS keyword statements ==========
      CHARACTER*68     RCSKW1,RCSKW2
      DATA             RCSKW1,RCSKW2 /                                 '
     .$Source: /fs/hseb/ob72/rfc/ofs/src/fcinit_cox/RCS/cox44.f,v $
     . $',                                                             '
     .$Id: cox44.f,v 1.2 1996/03/21 15:20:27 page Exp $
     . $' /
C    ===================================================================
C

      CALL FPRBUG ('COX44   ',1,44,IBUG)

C     CARRYOVER VALUES ARE AFFECTED BY THE FOLLOWING P VALUE CHANGES
C     1) P(34) - NUMBER OF ROUTING PHASES
C     2) P(35) - N VALUE OF KTS/Q**N COMPUTATION
C     3) P(36) - KTS VALUE
C     4) P(37) - NUMBER OF POINTS ON THE Q-TS TABLE
C     5) P(39)+- POINTS ON THE Q-TS TABLE
C     IF ANY OF THESE VALUES ARE CHANGED, OLD CARRYOVER CANNOT BE USED

C     CARRYOVER TRANSFER RULES
C     1) DETERMINE IF ANY PARAMETERS CHANGED FROM OLD TO NEW DEFINITION
C        IF EQUATION ROUTING USED (N IS NONZERO),
C           IF N OR KTS CHANGED, ROUTING PARAMETERS CHANGED
C           XDIF = .TRUE
C        ELSEIF TABLE ROUTING USED (N IS ZERO),
C           IF NUMBER OF POINTS ON THE Q-TS TABLE CHANGED OR
C           IF ANY POINT ON THE Q-TS TABLE CHANGED,
C           ROUTING PARAMETERS CHANGE
C           XDIF = .TRUE.
C        ELSE
C           ROUTING PARAMETERS UNCHANGED
C           XDIF = .FALSE.
C        ENDIF
C     2) TRANSFER PHASE OUTFLOWS
C        IF ROUTING PARAMETERS CHANGED (XDIF = .TRUE.)
C           ALL NEW PHASE OUTFLOWS SET TO ZERO
C        ELSE ROUTING PARAMETERS UNCHANGED (XDIF = .FALSE.)
C           IF NEW AND OLD # OF PHASES EQUAL,
C              TRANSFER ALL PHASE OUTFLOWS INTACT
C           ELSEIF NEW # OF PHASES < OLD # OF PHASES,
C              KEEP THE NUMBER OF NEW PHASES
C           ELSEIF NEW # OF PHASES > OLD # OF PHASES,
C              KEEP THE OLD # OF PHASES AND SET OTHERS TO ZERO
C           ENDIF
C        ENDIF
C     3) TRANSFER PREVIOUS INFLOW, IF NEW # OF TIME SERIES = 1
C        NOTE: NEW # OF TIME SERIES = 2, THE PREVIOUS INFLOW
C              IS NOT STORED IN THE CARRYOVER ARRAY; COMES FROM
C              THE INFLOW TIME SERIES
C        IF OLD # OF TIME SERIES = 1,
C           TRANSFER PREVIOUS INFLOW, CNEW(1) = COLD(1)
C        ELSEIF OLD # OF TIME SERIES = 2,
C           IF OLD # OF PHASES > 1,
C              NEW PREVIOUS INFLOW = COLD(1) + (COLD(1)-COLD(2))
C           ELSEIF OLD # OF PHASES = 1,
C              NEW PREVIOUS INFLOW = COLD(1)
C           ENDIF
C        ENDIF

C     CHECK IF TS IS CHANGED
C     TS IS CONSIDERED CHANGED IF N VALUE IS CHANGED,
C                                 KTS VALUE IS CHANGED,
C                                 # OF POINTS ON THE Q-TS TABLE CHANGED,
C                                 ANY POINTS ON THE Q-TS TABLE CHANGED

      XWARN = .FALSE.
      XDIF = .FALSE.

      NTSOLD = NINT(POLD(32))
      NTSNEW = NINT(PNEW(32))
      IF (IBUG.GE.1) WRITE(IODBUG,111) NTSOLD,NTSNEW
 111  FORMAT('COX44: NTSOLD,NTSNEW: ',2I4)

      NPOLD = NINT(POLD(34))
      NPNEW = NINT(PNEW(34))
      IF (IBUG.GE.1) WRITE(IODBUG,112) NPOLD,NPNEW
 112  FORMAT('COX44: NPOLD,NPNEW: ',2I4)

      NPTOLD = NINT(POLD(37))
      NPTNEW = NINT(PNEW(37))
      IF (IBUG.GE.1) WRITE(IODBUG,113) NPTOLD,NPTNEW
 113  FORMAT('COX44: NPTOLD,NPTNEW: ',2I4)

C     CHECK IF ROUTING METHOD HAS CHANGED (EQUATION VS TABLE)
      IF (POLD(35).NE.PNEW(35)) THEN
         XDIF = .TRUE.

C     EQUATION ROUTING
      ELSEIF (POLD(35).NE.0.) THEN
         IF (POLD(36).NE.PNEW(36)) XDIF = .TRUE.

C     ELSE

         IF (NPTOLD.NE.NPTNEW) THEN
            XDIF = .TRUE.

         ELSEIF (NPTOLD.GT.0) THEN
            DO 100 I=1,NPTOLD
               IF (POLD(I*2+36).NE.PNEW(I*2+36) .OR.
     +             POLD(I*2+37).NE.PNEW(I*2+37)) XDIF = .TRUE.
 100        CONTINUE
         ENDIF

      ENDIF

C     TRANSFER PHASE OUTFLOWS
C     DETERMINE WHERE IN 'C' ARRAY PHASE OUTFLOWS ARE STORED
      IF (NTSNEW.EQ.1) THEN
         INEW = 1
      ELSE
         INEW = 0
      ENDIF
      IF (NTSOLD.EQ.1) THEN
         IOLD = 1
      ELSE
         IOLD = 0
      ENDIF

      IF (XDIF) THEN

         DO 200 I=1,NPNEW
 200     CNEW(I+INEW) = 0.

C        1         2         3         4         5         6         7
C23456789012345678901234567890123456789012345678901234567890123456789012
C       **WARNING** ROUTING TIME OF STORAGE CHARACTERISTICS WERE CHANGED
C                   ROUTING PHASE FLOWS SET TO ZERO

         WRITE(IPR,801)
 801     FORMAT(//,10X,'**WARNING** ROUTING TIME OF STORAGE ',
     +                 'CHARACTERISTICS WERE CHANGED',/,
     +             10X,'ALL FUTURE ROUTING PHASE FLOWS SET TO ZERO')
         CALL WARN

      ELSE

C        ROUTING PARAMETERS UNCHANGED

C        IF NEW AND OLD # OF PHASES EQUAL, TRANSFER PHASES INTACT
         IF (NPNEW.EQ.NPOLD) THEN

            DO 300 I = 1,NPOLD
 300        CNEW(I+INEW) = COLD(I+IOLD)

C        NEW # OF PHASES LT OLD # OF PHASES, KEEP NEW # OF PHASES
         ELSEIF (NPNEW.LT.NPOLD) THEN

            DO 400 I = 1,NPNEW
 400        CNEW(I+INEW) = COLD(I+IOLD)

C      **WARNING** NUMBER OF ROUTING PHASES HAVE DECREASED FROM XX TO XX
C                  PHASE FLOW VALUES FROM XX TO XX KEPT

            WRITE(IPR,803) NPOLD,NPNEW,1,NPNEW
 803        FORMAT(//,10X,'**WARNING** NUMBER OF ROUTING PHASES HAVE ',
     +             'DECREASED FROM ',I2,' TO ',I2,/,
     +             10X,'            PHASE FLOW VALUES FROM ',I2,' TO ',
     +             I2,' KEPT')

            CALL WARN

C        NEW # OF PHASES GT OLD # OF PHASES, KEEP OLD # OF PHASES AND
C        SET REST TO LAST
         ELSE

C**WARNING** NUMBER OF ROUTING PHASES HAVE INCREASED FROM XX TO XX
C            PHASE FLOW VALUES FROM XX TO XX KEPT
C            PHASE FLOW VALUES FROM XX TO XX SET TO
C                  LAST FUTURE PHASE FLOW VALUE

            WRITE(IPR,802) NPOLD,NPNEW,1,NPOLD,
     +                     NPOLD+1,NPNEW
 802        FORMAT(//,10X,'**WARNING** NUMBER OF ROUTING PHASES HAVE ',
     +             'INCREASED FROM ',I2,' TO ',I2,/,
     +             10X,'            PHASE FLOW VALUES FROM ',I2,' TO ',
     +             I2,' KEPT',/,
     +             10X,'            PHASE FLOW VALUES FROM ',I2,' TO ',
     +             I2,/,
     +             10X,'            SET TO LAST FUTURE PHASE FLOW',
     +                            ' VALUE')

            CALL WARN

            DO 500 I=1,NPOLD
 500        CNEW(I+INEW) = COLD(I+IOLD)
            DO 600 I=NPOLD+1,NPNEW
 600        CNEW(I+INEW) = COLD(NPOLD+IOLD)

         ENDIF

      ENDIF

C     TRANSFER PREVIOUS INFLOW, IF NEW # OF TIME SERIES = 1
      IF (NTSNEW.EQ.1) THEN

C        IF OLD # OF TIME SERIES = 1, TRANSFER OLD PREVIOUS INFLOW
         IF (NTSOLD.EQ.1) THEN
            CNEW(1) = COLD(1)

         ELSEIF (NTSOLD.EQ.2) THEN
            IF (NPOLD.GT.1) THEN
               CNEW(1) = COLD(1) + (COLD(1) - COLD(2))
            ELSEIF (NPOLD.EQ.1) THEN
               CNEW(1) = COLD(1)
            ENDIF

         ENDIF
      ENDIF

      IF (IBUG.GE.1) THEN
         DO 920 I=1,NPOLD+IOLD
            WRITE(IODBUG,902) I,COLD(I)
 902        FORMAT('COX44: I,COLD:',I4,F10.2)
 920     CONTINUE
         DO 910 I=1,NPNEW+INEW
            WRITE(IODBUG,901) I,CNEW(I)
 901        FORMAT('COX44: I,CNEW:',I4,F10.2)
 910     CONTINUE
      ENDIF

      IF (ITRACE.GE.1) WRITE(IODBUG,90)
 90   FORMAT('COX44:  EXITED:')

      RETURN
      END
