C MODULE EX44
C-----------------------------------------------------------------------
C
C     ALL EXECUTION ROUTINES BY CONVENTION MUST BE NAMED EX**
C     WHERE ** IS THE NUMBER ASSIGNED TO THE OPERATION
C
C     THIS IS THE EXECUTION ROUTINE FOR SSARR TABLE AND EQUATION
C     ROUTING
C
C     THIS ROUTINE INITIALLY WRITTEN BY
C          RAY FUKUNAGA -- NWRFC   MAY1994
C-----------------------------------------------------------------------
C     POSITION     CONTENTS OF P ARRAY
C      1           VERSION NUMBER OF OPERATION
C      2-19        GENERAL NAME OR TITLE
C
C     USED TO CONSERVE INFLOW HYDROGRAPH VOLUME
C     20-21        START INFLOW TIME SERIES IDENTIFIER
C     22           START INFLOW DATA TYPE CODE 
C
C     INFLOW HYDROGRAPH
C     23-24        END INFLOW TIME SERIES IDENTIFIER
C     25           END INFLOW DATA TYPE CODE 
C
C     USED TO CONSERVE ROUTED HYDROGRAPH VOLUME
C     26-27        START OUTFLOW TIME SERIES IDENTIFIER
C     28           START OUTFLOW DATA TYPE CODE 
C
C     ROUTED OUTFLOW HYDROGRAPH
C     29-30        END OUTFLOW TIME SERIES IDENTIFIER
C     31           END OUTFLOW DATA TYPE CODE 
C
C     32           1 OR 2 INFLOW TIME SERIES SPECIFIED FLAG
C                  = 1, ONLY THE END INFLOW TIME SERIES IS SPECIFIED
C                  = 2, BOTH THE START AND END INFLOW TIME SERIES ARE
C                       SPECIFIED
C     33           1 OR 2 OUTFLOW TIME SERIES SPECIFIED FLAG
C                  = 1, ONLY THE END OUTFLOW TIME SERIES IS SPECIFIED
C                  = 2, BOTH THE START AND END OUTFLOW TIME SERIES ARE
C                       SPECIFIED
C     34           NUMBER OF ROUTING PHASES (MUST BE > 0)
C     35           N VALUE OF KTS/Q**N COMPUTATION
C                  IF N=0, THE TIME OF STORAGE IS EXTRACTED FROM THE
C                           DISCHARGE-TIME OF STORAGE TABLE
C     36           KTS VALUE IN HOURS IF N IS NONZERO
C     37           THE NUMBER OF POINTS ON THE DISCHARGE-TIME OF
C                  STORAGE TABLE IF N=0 (=0 IF N IS NONZERO)
C     38           COMPUTATIONAL TIME INTERVAL (HOURS)
C     39+          THE POINTS OF THE DISCHARGE-TIME OF STORAGE TABLE
C
C     THEREFORE THE NUMBER OF ELEMENTS REQUIRED IN THE P ARRAY IS
C        38 +
C         2 * NUMBER OF POINTS OF THE DISCHARGE-TIME OF STORAGE TABLE
C
C     POSITION     CONTENTS OF C ARRAY
C      1           INITIAL START INFLOW, IF ONLY END INFLOW TIME SERIES
C                  IS SPECIFIED
C      2+          PHASE FLOW VALUES FROM REACH
C-----------------------------------------------------------------------
C     VARIABLES IN COMMON:
C
C     DEBUG COMMON IN FDBUG
C       IODBUG - UNIT NUMBER TO WRITE OUT ALL DEBUG OUTPUT
C
C     UNIT NUMBERS COMMON IN IONUM
C       ALWAYS USE THE VARIABLES IN IONUM TO SPECIFY UNIT NUMBER
C
C     TIMING INFORMATION COMMON IN FCTIME
C       IDARUN - I*4 - INITIAL JULIAN DAY OF THE ENTIRE RUN
C       IHRRUN - I*4 - INITIAL HOUR OF THE ENTIRE RUN
C       LDARUN - I*4 - JULIAN DAY OF LAST DAY OF THE ENTIRE RUN
C       LHRRUN - I*4 - LAST HOUR OF ENTIRE RUN
C       LDACPD - I*4 - JULIAN DAY OF LAST DAY WITH OBSERVED DATA
C       LHRCPD - I*4 - LAST HOUR WITH OBSERVED DATA
C       NOW    - I*4 - CURRENT TIME FROM THE COMPUTER'S CLOCK
C                       NOW(1) - MONTH
C                       NOW(2) - DAY
C                       NOW(3) - YEAR (4 DIGIT)
C       LOCAL  - I*4 - HOUR OFFSET TO LOCAL TIME
C       NOUTZ  - I*4 - DEFAULT TIME ZONE NUMBER FOR OUTPUT
C       NOUTDS - I*4 - DEFAULT DAYLIGHT SAVING TIME SWITCH FOR OUTPUT
C                       =0, STANDARD TIME
C                       =1, DAYLIGHT SAVING TIME
C       NLSTZ  - I*4 - TIME ZONE NUMBER OF LOCAL STANDARD TIME
C       IDA    - I*4 - JULIAN DATE OF THE FIRST DAY TO BE COMPUTED
C       IHR    - I*4 - FIRST HOUR TO BE COMPUTED IN THE CURRENT PASS
C       LDA    - I*4 - JULIAN DATE OF THE LAST DAY TO BE COMPUTED
C       LHR    - I*4 - LAST HOUR TO BE COMPUTED IN THE CURRENT PASS
C       IDADAT - I*4 - JULIAN DATE OF FIRST DAY OF TIME SERIES DATA
C
C     CONTROL INFORMATION FOR SAVING CARRYOVER IN FCARY
C       IFILLC - I*4 - CONTROLS UPDATE OF C ARRAY AND STORING CARRYOVER
C                       =0, NO OPERATION CAN MODIFY THE C ARRAY; NO
C                           CARRYOVER STORED
C                       =1, C ARRAY SHOULD BE MODIFIED
C       NCSTOR - I*4 - NUMBER OF CARRYOVER DATES SAVED TO BE SAVED
C                       IGNORED IF IFILLC=0
C       ICDAY  - I*4 - JULIAN DAYS TO STORE CARRYOVER
C       ICHOUR - I*4 - HOURS TO STORE CARRYOVER
C-----------------------------------------------------------------------
      SUBROUTINE EX44 (P,C,QINST,QINEN,QOUTST,QOUTEN)

      REAL   P(*),C(*),QINST(*),QINEN(*),QOUTST(*),QOUTEN(*)
      REAL   CTEMP(750)

      INCLUDE 'common/fdbug'
      INCLUDE 'common/ionum'
      INCLUDE 'common/fctime'
      INCLUDE 'common/fcary'

      CHARACTER*4    UNTOUT
C
C    ================================= RCS keyword statements ==========
      CHARACTER*68     RCSKW1,RCSKW2
      DATA             RCSKW1,RCSKW2 /                                 '
     .$Source: /fs/hseb/ob72/rfc/ofs/src/fcst_sarroute/RCS/ex44.f,v $
     . $',                                                             '
     .$Id: ex44.f,v 1.3 2000/12/19 14:59:37 dws Exp $
     . $' /
C    ===================================================================
C
 
C     CHECK THE TRACE LEVEL AND WHETHER DEBUG OUTPUT IS NEEDED
      CALL FPRBUG ('EX44    ',1,44,IBUG)

C   SET LENGTH OF CTEMP ARRAY TO 750
      LCTEMP = 750

C     GET NUMBER OF PHASES FROM P ARRAY
      NP = NINT(P(34))
      IF (IBUG.EQ.1) WRITE(IODBUG,1001) NP
 1001 FORMAT(' EX44: NP: ',I4)

C     GET NUMBER OF TIME SERIES
C     AND SET NUMBER OF CARRYOVER VALUES TO SAVE
      NINTS = NINT(P(32))
      NOTTS = NINT(P(33))
      IF (NINTS.EQ.1) THEN
         NCO = NP + 1
      ELSE
         NCO = NP
      ENDIF
      NOTTS = NINT(P(33))
      IF (IBUG.EQ.1) WRITE(IODBUG,1010) NINTS,NCO,NOTTS
 1010 FORMAT('  EX44: NINTS,NCO,NOTTS: ',3I6)

C     LOCATE FIRST DATA VALUE IN THE TIME SERIES DATA ARRAY
      KDA = IDA
      KHR = IHR
      KDT = NINT(P(38))
      ITS = (KDA-IDADAT)*24/KDT + (KHR-1)/KDT + 1
      IF (IBUG.EQ.1) WRITE(IODBUG,1002) KDA,KHR,KDT,IDADAT,ITS
 1002 FORMAT(' EX44: KDA,KHR,KDT,IDADAT,ITS: ',5I7)

C     LOCATE LAST DATA VALUE IN THE TIME SERIES DATA ARRAY
      LTS = (LDA-IDADAT)*24/KDT + (LHR-1)/KDT + 1
      IF (IBUG.EQ.1) WRITE(IODBUG,1003) LDA,LHR,LTS
 1003 FORMAT(' EX44: LDA,LHR,LTS: ',3I5)

C     CONVERT INFLOW TIME SERIES FROM METRIC TO ENGLISH
      CALL FCONVT ('CMS ','L3/T',UNTOUT,RMF,RCF,IERFLG)
      DO 10 I=ITS,LTS
 10   QINEN(I) = QINEN(I)*RMF + RCF
      IF (NINTS.EQ.2) THEN
         DO 20 I=ITS,LTS
 20      QINST(I) = QINST(I)*RMF + RCF
      ENDIF

      IF (IBUG.EQ.1) WRITE(IODBUG,2100)
 2100 FORMAT(
     +  'EX44:',12X,'       PERIOD-START           PERIOD-END',/,
     +  'EX44:',12X,'INITIAL INITIAL RECOMPUTED  INPUT   ROUTED',/,
     +  'EX44:',12X,'INFLOW  OUTFLOW  OUTFLOW    INFLOW  OUTFLOW')

C        1         2         3         4         5         6         7
C23456789012345678901234567890123456789012345678901234567890123456789012

      ICARY = 1

C     COPY OVER C ARRAY TO CTEMP ARRAY
C     SET INITIAL START INFLOW VALUE
      IF (NINTS.EQ.1) THEN
         QSTART = C(1)
      ELSE
         QSTART = QINST(1)
      ENDIF
C
C   CHECK THAT # OF CARRYOVER VALUES IS NOT GREATER THAN CTEMP ARRAY
      IF (NCO .GT. LCTEMP) THEN
         WRITE(IPR, 1016 ) LCTEMP, NCO
 1016 FORMAT('0**ERROR** IN EX44 - SIZE OF ARRAY ',
     1       'CTEMP (',I4,') IS SMALLER THAN ',
     2       'NCO (',I4,')')
         GO TO 992
      ENDIF
C
      DO 101 I=1,NCO
 101  CTEMP(I) = C(I)

      DO 1000 I=ITS,LTS

C        P     - (IN ) P ARRAY
C        CTEMP - (IN/OUT) C ARRAY
C                IF P(32) = 1,
C                   C(1) = START PERIOD INFLOW
C                   C(2) TO C(NCO) = PHASE FLOW VALUES
C                ELSE
C                   C(1) TO C(NCO) = PHASE FLOW VALUES
C                C(NCO) = ROUTED ENDING OUTFLOW
C        QINST - (IN ) START PERIOD INFLOW TIME SERIES
C        QINEN - (IN ) END PERIOD INFLOW TIME SERIES
C        QOUTST - (OUT) START PERIOD RECOMPUTED OUTFLOW TIME SERIES
C                       USED TO CONSERVED VOLUME
C        QOUTEN - (OUT) END PERIOD ROUTED OUTFLOW TIME SERIES

         QOUT = CTEMP(NCO)

         IF (IBUG.EQ.1) WRITE(IODBUG,2106) (CTEMP(L),L=1,NCO)
 2106    FORMAT(' EX44: BEFORE: ',7F10.1)

         CALL ROUT44(P,CTEMP,QSTART,QINEN(I),QOUTST(I),QOUTEN(I))

         IF (IFILLC.EQ.1) THEN
            IF (KDA.EQ.ICDAY(ICARY).AND.KHR.EQ.ICHOUR(ICARY)) THEN

               CALL FCWTCO (KDA,KHR,CTEMP,NCO)
               ICARY = ICARY + 1
            ENDIF
         ENDIF

         IF (IBUG.EQ.1) THEN
C           CONVERT INTERNAL TIME TO LOCAL TIME
            CALL MDYH1 (KDA,KHR,ILM,ILD,ILY,ILH,NOUTZ,NOUTDS,NTZCD)
C        1         2         3         4         5         6         7
C23456789012345678901234567890123456789012345678901234567890123456789012
            WRITE(IODBUG,2101) ILM,ILD,ILY,KHR,
     +            QSTART,QOUT,QOUTST(I),QINEN(I),QOUTEN(I)
 2101       FORMAT(' EX44: ',2(I2.2,'/'),I4.4,I3.2,
     +                     F7.0,1X,F7.0,2X,F7.0,3X,F7.0,2X,F7.0)
            WRITE(IODBUG,2107) (CTEMP(L),L=1,NCO)
 2107       FORMAT(' EX44: AFTER: ',7F10.1)
         ENDIF

         QSTART = QINEN(I)

C        INCREMENT HOUR AND/OR DAY VARIABLES
         KHR = KHR + KDT
         IF (KHR.GT.24) THEN
            KDA = KDA + 1
            KHR = KHR - 24
         ENDIF

1000  CONTINUE

      IF (IFILLC.EQ.1) THEN
         DO 901 I=1,NCO
 901     C(I) = CTEMP(I)
      ENDIF

C     CONVERT INFLOW TIME SERIES TO METRIC UNITS
      DO 910 I=ITS,LTS
 910  QINEN(I) = (QINEN(I)-RCF)/RMF
      IF (NINTS.EQ.2) THEN
         DO 920 I=ITS,LTS
 920     QINST(I) = (QINST(I)-RCF)/RMF
      ENDIF

C     CONVERT OUTFLOW TIME SERIES TO METRIC UNITS
C     IF 1 OUTFLOW TS, THE TIME SERIES IS A VOLUME, NOT A FLOW VALUE
C     IF 1 OUTPUT TS, TAKE AVERAGE OF START AND END FLOW AND CONVERT
C     TO CFSD
      IF (NOTTS.EQ.1) THEN
         DO 930 I=ITS,LTS
 930     QOUTEN(I) = (QOUTEN(I) + QOUTST(I))*KDT/48.
      ELSE
         DO 940 I=ITS,LTS
            QOUTST(I) = (QOUTST(I)-RCF)/RMF
            QOUTEN(I) = (QOUTEN(I)-RCF)/RMF
 940     CONTINUE
      ENDIF

      IF (IBUG.GE.1) WRITE(IODBUG,990) ICARY
 990  FORMAT (' EX44: ICARY:',I5)

 992  IF (ITRACE.GE.1) WRITE(IODBUG,991)
 991  FORMAT (//,' EX44: EXITED:')

      RETURN
      END
