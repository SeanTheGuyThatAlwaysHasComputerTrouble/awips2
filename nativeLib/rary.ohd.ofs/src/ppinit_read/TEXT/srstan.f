C MODULE SRSTAN
C-----------------------------------------------------------------------
C
C  ROUTINE TO READ STATION GENERAL PARAMETER RECORD.
C
      SUBROUTINE SRSTAN (IVSTAN,UNUSED,
     *   STAID,STATE,NBRSTA,DESCRP,STAELV,STALOC,STACOR,
     *   ICSTAN,NGPS,GPS,IPARM,
     *   IPPP24,IPPPVR,ITPPVR,IPCHAR,
     *   IPTM24,IPTAVR,ITTAVR,IPTF24,TF24FE,
     *   IPEA24,
     *   NSRCCD,SRCCD,NSRCID,SRCID,NGOESN,GOESN,NCDASN,CDASN,
     *   NUGPA,
     *   LARRAY,ARRAY,IPRERR,IPTR,DISP,IPTRNX,
     *   ISTAT)
C
      CHARACTER*4 DISP
C
      DIMENSION ARRAY(LARRAY)
      DIMENSION UNUSED(1)
C      
      INCLUDE 'scommon/dimstan'
C
      INCLUDE 'uio'
      INCLUDE 'scommon/sudbgx'
C
C    ================================= RCS keyword statements ==========
      CHARACTER*68     RCSKW1,RCSKW2
      DATA             RCSKW1,RCSKW2 /                                 '
     .$Source: /fs/hseb/ob72/rfc/ofs/src/ppinit_read/RCS/srstan.f,v $
     . $',                                                             '
     .$Id: srstan.f,v 1.2 1998/04/07 18:07:49 page Exp $
     . $' /
C    ===================================================================
C
C
C
C  SET TRACE LEVEL
      LTRACE=ISTRC('STAN')
C
      IF (LTRACE.GT.0) THEN
         WRITE (IOSDBG,230)
         CALL SULINE (IOSDBG,1)
         ENDIF
C
C  SET DEBUG LEVEL
      LDEBUG=ISBUG('STAN')
C
      IF (LDEBUG.GT.0) THEN
         WRITE (IOSDBG,*)
     *      ' LARRAY=',LARRAY,
     *      ' DISP=',DISP,
     *      ' '
         CALL SULINE (IOSDBG,1)
         ENDIF
C
      ISTAT=0
C
C  INITIALIZE POINTERS
      IPPP24=0
      IPPPVR=0
      ITPPVR=0
      IPCHAR=0
      IPTM24=0
      IPTAVR=0
      ITTAVR=0
      IPTF24=0
      TF24FE=0.0
      IPEA24=0
      NGPS=0
      NSRCCD=0
      NGOESN=0
      NCDASN=0
C
C  OPEN DATA BASE
      CALL SUDOPN (1,'PPP ',IERR)
      IF (IERR.NE.0) THEN
         ISTAT=1
         GO TO 210
         ENDIF
C
C  READ PARAMETER RECORD
      CALL RPPREC (STAID,'GENL',IPTR,LARRAY,ARRAY,NFILL,IPTRNX,
     *   IERR)
      IF (IERR.NE.0) THEN
         ISTAT=IERR
         IF (ISTAT.NE.6) THEN
            IF (IPRERR.EQ.1) THEN
               CALL SRPPST (STAID,'GENL',IPTR,LARRAY,NFILL,IPTRNX,IERR)
               ENDIF
            ENDIF
         GO TO 210
         ENDIF
C
      NPOS=0
C
C  SET PARAMETER ARRAY VERSION NUMBER
      NPOS=NPOS+1
      IVSTAN=ARRAY(NPOS)
C
C  SET STATION IDENTIFIER
      NCHAR=4
      NWORDS=LEN(STAID)/NCHAR
      NCHK=2
      IF (NWORDS.NE.NCHK) THEN
         WRITE (LP,240) 'STAID',NWORDS,NCHK,STAID
         CALL SUERRS (LP,2,-1)
         ISTAT=1
         GO TO 210
         ENDIF
      DO 10 I=1,NWORDS
         NPOS=NPOS+1
         N=(I-1)*NCHAR+1
         CALL SUBSTR (ARRAY(NPOS),1,4,STAID(N:N),1)
10       CONTINUE
C
C  SET USER SPECIFIED STATION NUMBER
      NPOS=NPOS+1
      NBRSTA=ARRAY(NPOS)
C
C  SET STATION DESCRIPTION
      NCHAR=4
      NWORDS=LEN(DESCRP)/NCHAR
      NCHK=5
      IF (NWORDS.NE.NCHK) THEN
         WRITE (LP,240) 'DESCRP',NWORDS,NCHK,STAID
         CALL SUERRS (LP,2,-1)
         ISTAT=1
         GO TO 210
         ENDIF
      DO 20 I=1,NWORDS
         NPOS=NPOS+1
         N=(I-1)*NCHAR+1
         CALL SUBSTR (ARRAY(NPOS),1,NCHAR,DESCRP(N:N),1)
20       CONTINUE
C
C  SET STATION ELEVATION
      NPOS=NPOS+1
      STAELV=ARRAY(NPOS)
C
C  SET LATITUDE AND LONGITUDE
      DO 30 I=1,2
         NPOS=NPOS+1
         STALOC(I)=ARRAY(NPOS)
30       CONTINUE
C
C  SET NWSRFS/HRAP COORDINATES
      DO 40 I=1,2
         NPOS=NPOS+1
         STACOR(I)=ARRAY(NPOS)
40       CONTINUE
C
C  SET COMPLETE INDICATOR
      NPOS=NPOS+1
      ICSTAN=ARRAY(NPOS)
C
C  SET STATE IDENTIFIER
      NPOS=NPOS+1
      STATE=ARRAY(NPOS)
C
C  SET GRID POINT ADDRESS
      NPOS=NPOS+1
      NUGPA=ARRAY(NPOS)
C
      NUNUSD=0
      IF (NUNUSD.GT.0) THEN
C     UNUSED POSITIONS
         DO 50 I=1,NUNUSD
            NPOS=NPOS+1
            UNUSED(I)=ARRAY(NPOS)
50          CONTINUE
         ENDIF
C
C  SET NUMBER OF DATA GROUPS
      NPOS=NPOS+1
      NGPS=ARRAY(NPOS)
C
      IF (LDEBUG.GT.0) THEN
         WRITE (IOSDBG,*)
     *      ' ICSTAN=',ICSTAN,
     *      ' NGPS=',NGPS,
     *      ' '
         CALL SULINE (IOSDBG,1)
         ENDIF
C
      IF (NGPS.EQ.0) GO TO 130
C
C  SET DATA GROUP CODES    
      ITEMP=0
      IPCPN=0
      IPE=0
      DO 80 I=1,NGPS
         NPOS=NPOS+1
         CALL SUBSTR (ARRAY(NPOS),1,4,GPS(I),1)
         IF (GPS(I).EQ.'????'.OR.GPS(I).EQ.'PCPN') IPCPN=1
         IF (GPS(I).EQ.'????'.OR.GPS(I).EQ.'TEMP') ITEMP=1
         IF (GPS(I).EQ.'????'.OR.GPS(I).EQ.'PE') IPE=1
80       CONTINUE
C
C  SET RECORD LOCATION OF PARAMETRIC DATA
      DO 90 I=1,NGPS
         NPOS=NPOS+1
         IPARM(I)=ARRAY(NPOS)
90       CONTINUE
C
      IF (IPCPN.EQ.0) GO TO 110
C
C  SET ARRAY LOCATION OF POINTERS IN PPDB FOR 24-HR PCPN DATA
      NPOS=NPOS+1
      IPPP24=ARRAY(NPOS)
C
C  SET ARRAY LOCATION OF POINTERS IN PPDB FOR <24-HR PCPN DATA
      NPOS=NPOS+1
      IPPPVR=ARRAY(NPOS)
C
C SET TIME INTERVAL OF <24-HR PCPN DATA
      NPOS=NPOS+1
      ITPPVR=ARRAY(NPOS)
C
C  SET ARRAY LOCATION OF PRECIPITATION CHARACTERISTICS
      NPOS=NPOS+1
      IPCHAR=ARRAY(NPOS)
C
110   IF (ITEMP.EQ.0) GO TO 120
C
C  SET ARRAY LOCATION OF POINTERS IN PPDB FOR MAX/MIN TEMP DATA
      NPOS=NPOS+1
      IPTM24=ARRAY(NPOS)
C
C  SET ARRAY LOCATION OF POINTERS IN PPDB FOR INST TEMP DATA
      NPOS=NPOS+1
      IPTAVR=ARRAY(NPOS)
C
C  SET TIME INTERVAL OF INST TEMP DATA
      NPOS=NPOS+1
      ITTAVR=ARRAY(NPOS)
C
C  SET ARRAY LOCATION OF POINTERS IN PPDB FOR FCST MAX/MIN TEMP DATA
      NPOS=NPOS+1
      IPTF24=ARRAY(NPOS)
C
C  SET FE FACTOR FOR TEMP DATA
      NPOS=NPOS+1
      TF24FE=ARRAY(NPOS)
C
120   IF (IPE.EQ.0) GO TO 130
C
C  SET ARRAY LOCATION OF POINTERS IN PPDB FOR PE DATA
      NPOS=NPOS+1
      IPEA24=ARRAY(NPOS)
C
C  SET NUMBER OF DATA ENTRY SOURCE CODES
130   NPOS=NPOS+1
      NSRCCD=ARRAY(NPOS)
C
      IF (NSRCCD.EQ.0) GO TO 160
C
C  SET DATA ENTRY SOURCE CODES, NUMBER OF WORD OF ADDITIONAL
C  INFORMATION AND ADDITIONAL INFORMATION
      DO 150 I=1,NSRCCD
         NPOS=NPOS+1
         CALL SUBSTR (ARRAY(NPOS),1,4,SRCCD(I),1)
         NPOS=NPOS+1
         NSRCID=ARRAY(NPOS)
         DO 140 J=1,NSRCID
            NPOS=NPOS+1
            CALL SUBSTR (ARRAY(NPOS),1,4,SRCID(J,I),1)
140         CONTINUE
150      CONTINUE
C
160   IF (IVSTAN.LT.2) GO TO 200
C
C  SET NUMBER OF GOES DATA TYPES NOT TO BE TRANSFERRED
      NPOS=NPOS+1
      NGOESN=ARRAY(NPOS)
C
      IF (NGOESN.EQ.0) GO TO 180
C
C  SET GOES DATA TYPES NOT TO BE TRANSFERRED
      DO 170 I=1,NGOESN
         NPOS=NPOS+1
         GOESN(I)=ARRAY(NPOS)
170      CONTINUE
C
180   IF (IVSTAN.LT.3) GO TO 200
C
C  SET NUMBER OF CDAS DATA TYPES NOT TO BE TRANSFERRED
      NPOS=NPOS+1
      NCDASN=ARRAY(NPOS)
C
      IF (NCDASN.EQ.0) GO TO 200
C
C  SET CDAS DATA TYPES NOT TO BE TRANSFERRED
      DO 190 I=1,NCDASN
         NPOS=NPOS+1
         CDASN(I)=ARRAY(NPOS)
190      CONTINUE
C
200   IF (LDEBUG.GT.0) THEN
         WRITE (IOSDBG,250) NPOS,NFILL,IPTRNX,IVSTAN
         CALL SULINE (IOSDBG,1)
         WRITE (IOSDBG,260) NGPS,(GPS(I),I=1,NGPS)
         CALL SULINE (IOSDBG,1)
         WRITE (IOSDBG,270) NSRCCD,(SRCCD(I),I=1,NSRCCD)
         CALL SULINE (IOSDBG,1)
         WRITE (IOSDBG,280) NGOESN,(GOESN(I),I=1,NGOESN)
         CALL SULINE (IOSDBG,1)
         WRITE (IOSDBG,290) NCDASN,(CDASN(I),I=1,NCDASN)
         CALL SULINE (IOSDBG,1)
         CALL SUPDMP ('GENL','BOTH',0,NFILL,ARRAY,ARRAY)
         ENDIF
C
210   IF (LTRACE.GT.0) THEN
         WRITE (IOSDBG,320) ISTAT
         CALL SULINE (IOSDBG,1)
         ENDIF
C
      RETURN
C
C- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C
230   FORMAT (' *** ENTER SRSTAN')
240   FORMAT ('0*** ERROR - IN SWSTAN - NUMBER OF WORDS IN VARIABLE ',
     *   A,'(',I2,') IS NOT ',I2,' FOR STATION ',A,'.')
250   FORMAT (' NPOS=',I3,3X,'NFILL=',I3,3X,'IPTRNX=',I3,3X,
     *   'IVSTAN=',I3)
260   FORMAT (' NGPS=',I2,3X,'GPS=',5(A4,1X))
270   FORMAT (' NSRCCD=',I2,3X,'SRCCD=',10(A4,1X))
280   FORMAT (' NGOESN=',I2,3X,'GOESN=',10(A4,1X))
290   FORMAT (' NCDASN=',I2,3X,'CDASN=',10(A4,1X))
320   FORMAT (' *** EXIT SRSTAN : STATUS CODE=',I2)
C
      END
