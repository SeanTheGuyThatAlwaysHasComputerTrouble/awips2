C$PRAGMA C (GET_APPS_DEFAULTS)
C
C  MODULE BATCHPST
C======================================================================
C   Program BATCHPST
C    Originally written by Kevin Hlywiak (MARFC)
C    Modified by JTOstrowski - HRL - 4/92
C     Reads ASCII file generated by program OFS_DE containing the
C     filtered list of new data to be written to V5 files on PRIME.
C     BATCHPST must be executed after completion of OFS_DE to protect
C     V5 files from corruption.
C    Modified by George Smith and Russ Erb - HRL - 8/96
C     Add check on staid and dtypes immediately after reading line
C     from input file to be sure that station and data type specified
C     exists in the PPDB.  This will eliminate the problem of batchpost
C     improperly passing PPO1 into WPD1S for a station that has only
C     PP06 as a data type in the PPDB.
C    Made output for 8/96 changes compatible with rest of output;
C     Also commented out call to PDTRRS since it is called in RPPDCO;
C     Sep 1996 - DWS
C    HSD Bug R25-53: If a -999.00 is posted as an observation at the
C     top of the hour(i.e. 0600) and there is oberservation which
C     come in after the hour (i.e. 0615 2.7) the value that is shown
C     in the preprocessor, ppdutil dumpobs done, should be the good
C     value. 01/05 Xiaobiao Fan
C    Enhancement: two tokens were added to for backward/forward windows.
C     If the observation at the top of the hour is missing, it will
C     find the closed valid value in the window and use it instead.
C     11/05 XiaoBiao Fan
C    DR18436: in the small window only look the value for the same data
C     type in the file vl2v5.buf (it is the output of OFSDE and
C     the input for BATCHPST) and use it if the data value of the top
C     of the hour is missing   01/2007 Xiaobiao Fan
C    DR18515: not posting all data to the fs5files. Most significantly,
C     none of the MAT data was being transfered.  01/2007 Xiaobiao Fan
C    DR18889: when input file vl2v5.buf is too large (> 50000 lines),
C     a Memory Fault Error will be created.       04/2007 Xiaobiao Fan
C
C   Note: All times are in Z time.
C======================================================================
      SUBROUTINE BATCHPST_MAIN
      EXTERNAL FREE_OFS_LOCK

      PARAMETER (I24WIN=2, I06WIN=1, NHOPDB=12)
      CHARACTER*4  DTYPES,XTYPES,KTYPES,UNITS,PNTR
      CHARACTER*4  DTYPES0(500000)                        !cfan01052007
      CHARACTER*8  STAID0 (500000)                        !cfan01202007
      CHARACTER*8  STAID
      CHARACTER*6  ROUTINE
      CHARACTER*60 DESCRP(10)
      CHARACTER*100 VAR_NAME,VAR_VALUE
      CHARACTER*3  FUTSTR
      REAL         OBS(3)
      INTEGER*4    IOBS(3)
      INTEGER      WBUFF(2000),IERWR(10),JER
      LOGICAL      ITSRRS,TMSHFT
      INTEGER*2    ISIBUF(2000)

      REAL         TMPVALUE(500000),val(10),dif(10)
      INTEGER      TMPDA(500000),TMPHR(500000),TMPMN(500000)

      INCLUDE 'uiox'
      INCLUDE 'pdbcommon/pdtrrx'

      EQUIVALENCE(OBS,IOBS), (WBUFF,ISIBUF)
C
C    ================================= RCS keyword statements ==========
      CHARACTER*68     RCSKW1,RCSKW2
      DATA             RCSKW1,RCSKW2 /                                 '
     .$Source: /fs/hseb/ob81/ohd/ofs/src/batchpst/RCS/batchpst.f,v $
     . $',                                                             '
     .$Id: batchpst.f,v 1.14 2007/02/20 18:12:40 xfan Exp $
     . $' /
C    ===================================================================
C
      DATA DESCRP/
     . 'Station not defined in PPDB                                 ',
     . 'Data type not defined for station                           ',
     . 'Obs. time not in proper sequence with PPDB contents dates   ',
     . 'Invalid units specified for data type                       ',
     . 'Invalid revision flag specified                             ',
     . 'Invalid data value specified (e.g. - out of allowable range)',
     . 'Invalid minute specified for observation time               ',
     . 'Notice only: Obs. time shifted to closest synoptic time     ',
     . 'Error in routine PDFNDR, cannot read PPDB for given station ',
     . 'Miscellaneous error, see actual status code returned        '/
      DATA NERCK  /  10/
      DATA LWBUFF /2000/
      DATA LISIBF /2000/

C======================================================================
C  Execution Section

C     Subroutine ARGVER outputs the version/date info and exits the
C      program if the first command line argument is "-version"
C
      CALL ARGVER()
C
C  Set up i/o unit numbers, output header with version number

      CALL UPRIMO_BAT()
      CALL USETO1 ('NOPAGNUM',IERR)
      CALL UPAGE (LP)

C  Initialize local variables

      DO 10 I=1,NERCK
      IERWR(I) = 0
   10 CONTINUE

C                    IDTYPE = 0   Station id is identifier, not number
C                    NTYPES = 1   Number of data types per PPDB write
C                    IREV   = 1   Always tell PPDB data is a revision

      NINP   = 0
      NBAD   = 0
      NENT   = 0
      NNONZ  = 0
      NTMSHF = 0
      IDTYPE = 0
      NTYPES = 1
      IREV   = 1

C======================================================================
C  Initialize the OFS PPDB

C                               Read database control records
C                               RPPDCO calls PDTRRS, reads V5 PPDB RRS
            CALL RPPDCO(IERR)
            IF(IERR.NE.0) THEN
              WRITE(LPE,930) IERR
              GOTO 800
            ENDIF
C                               Read V5 int and character hash records
            IKEY=0
            CALL RPDHSH(IKEY,IERR)
            IF(IERR.NE.0) THEN
              WRITE(LPE,935) IERR
              GOTO 800
            ENDIF


C====================================================================
C  First Read in all input.  When end-of-file detected, rewind it
       NN=1                ! NN is number of values in the input file.

   11  READ(ICD,'(A8,1X,I4,4I2,1X,A4,1X,F11.2,1X,A3,1X,I2)',IOSTAT=JER)
cf   . STAID,IYR,IMO,TMPDA(NN),TMPHR(NN),TMPMN(NN),DTYPES,TMPVALUE(NN),
cf   . FUTSTR,IDUR
     . STAID0(NN),IYR,IMO,TMPDA(NN),TMPHR(NN),TMPMN(NN),       !cfan01202007
     . DTYPES0(NN),TMPVALUE(NN),FUTSTR,IDUR                    !cfan01052007
       IF (JER.EQ.0) THEN
         NN=NN+1
         GOTO 11
       ELSE
         NN=NN-1
         REWIND (ICD)
       ENDIF

C==================================================================
C  Find the the alloable window

       VAR_NAME='rrs_upper_window'
       VAR_VALUE=' '
       CALL GET_APPS_DEFAULTS(VAR_NAME,LENSTR(VAR_NAME),
     &                        VAR_VALUE,LENGTH)
       READ(VAR_VALUE(1:LENGTH),'(F5.2)')WINDF
       VAR_NAME='rrs_lower_window'
       VAR_VALUE=' '
       CALL GET_APPS_DEFAULTS(VAR_NAME,LENSTR(VAR_NAME),
     &                        VAR_VALUE,LENGTH)
       READ(VAR_VALUE(1:LENGTH),'(F5.2)')WINDB

       IF (WINDF .GT. 0.5) THEN
       WRITE(LP,*)'**WARNING** rrs_upper_window cannot be bigger than
     &  0.5, reset it to 0.5'
       WINDF=0.5
       ENDIF
       IF (WINDB .GT. 0.5) THEN
       WRITE(LP,*)'**WARNING** rrs_lower_window cannot be bigger than
     &  0.5, reset it to 0.5'
       WINDB=0.5
       ENDIF

       WRITE(LP,*) 'rrs_upper_window =',WINDF, ' hour'
       WRITE(LP,*) 'rrs_lower_window =',WINDB, ' hour'

C====================================================================
C  Write a header line

      WRITE(LP,620)

C====================================================================
C  Read in line of input.  When end-of-file detected, see if any
C   data has been processed.

   15 READ(ICD,'(A8,1X,I4,4I2,1X,A4,1X,F11.2,1X,A3,1X,I2)',IOSTAT=JER)
     . STAID,IYR,IMO,IDA,IHR,IMN,DTYPES,VALUE,FUTSTR,IDUR

      NINP = NINP + 1

      IF (JER .NE. 0) GOTO 20

      IF (VALUE .LT. -998. .AND. IMN .EQ. 0) then
      write(*,'(A8,1X,I4,4I2.2,1X,A4,1X,F11.2,1X,A3,1X,I2)')
     . STAID,IYR,IMO,IDA,IHR,IMN,DTYPES,VALUE,FUTSTR,IDUR    !cfan

C==================================================================
C  Find the all data values with OBS time within alloable window

       xintf=IHR+WINDF
       xintb=IHR-WINDB
       if (xintb .LT. 0) xintb=xintb+24.

       MM=0
       DO I=1,NN
        IF (STAID  .EQ. STAID0 (I)) THEN
         IF (DTYPES .EQ. DTYPES0(I)) THEN
          IF (IDA .EQ. TMPDA(I)) THEN
           IF ((TMPHR(I)+TMPMN(I)/60. .GE. xintb-0.01)  .AND.
     &       (TMPHR(I)+TMPMN(I)/60. .LE. xintf+0.01)) THEN
             MM=MM+1
             val(MM)=TMPVALUE(I)
             dif(MM)=abs(TMPHR(I)+TMPMN(I)/60.-IHR)
           ENDIF
          ENDIF
         ENDIF
        ENDIF
       ENDDO

C==================================================================
C  Find valid value CLOSET to the time

       IF (MM .GT. 0) THEN
        dd=1.
        DO I=1,MM
         IF (val(I) .LT. -998.) THEN
          ELSE
           IF (dif(I) .LT. dd) THEN
            dd=dif(I)
            VALUE=val(I)
      write(*,*)'========================================='
      write(*,'(A8,1X,I4,4I2.2,1X,A4,1X,F11.2,1X,A3,1X,I2)')
     . STAID,IYR,IMO,IDA,IHR,IMN,DTYPES,VALUE,FUTSTR,IDUR    !cfan
      write(*,*)
           ENDIF
         ENDIF
        ENDDO
       ENDIF
      ENDIF

CC    CALL DDYCDL(IYR,IMO,IDA)     Not needed, input MUST be 4-digit


C====================================================================
C  Code added 960812 to check if station and datatype read in exists
C   on the PPDB.  Check all datatypes.

C         Find the station in the PPDB using routine 'PDFNDR':
C           1) Check rtn 'PDFNDR' for error (if so set JSTAT = 9)
C           2) Check IFIND to see if station exists (else JSTAT = 1)
C           3) Check if data type to be written exists,
C                a) 24 hour precip and type exists is ok
C                b) 24 hour temperature max/min and type exists is ok
C                c) Else check if other type is defined and is ok
C              (else set JSTAT = 2)

      CALL PDFNDR(STAID, LISIBF, IFIND, ISIREC, ISIBUF, IFREE, ISTAT)

      JSTAT = 0
      IF (ISTAT .GT. 0) THEN
          JSTAT = 9
       ELSE IF (IFIND .EQ. 0) THEN
          JSTAT = 1
       ELSE IF (DTYPES.EQ.'PP24' .AND. ISIBUF(8).GT.0) THEN
          CONTINUE
       ELSE IF (DTYPES.EQ.'TX24' .AND. ISIBUF(9).GT.0) THEN
          CONTINUE
       ELSE IF (DTYPES.EQ.'TN24' .AND. ISIBUF(9).GT.0) THEN
          CONTINUE
       ELSE IF (ISIBUF(10) .GT. 0) THEN
          XTYPES = DTYPES
          IF (DTYPES.EQ.'TFMN' .OR. DTYPES.EQ.'TFMX') THEN
                     XTYPES = 'TF24'
          ELSEIF (DTYPES.EQ.'TA24' .OR. DTYPES.EQ.'TD24' .OR.
     $            DTYPES.EQ.'US24' .OR. DTYPES.EQ.'RC24' .OR.
     $            DTYPES.EQ.'RP24' .OR. DTYPES.EQ.'RI24') THEN
                     XTYPES = 'EA24'
          ENDIF
            DO 12 I = 1, ISIBUF(10)
             CALL UMEMOV(ISIBUF(11 + (I-1)*3),KTYPES,1)
             IF (XTYPES .EQ. KTYPES) GOTO 18
   12       CONTINUE
            JSTAT = 2
   18     CONTINUE
       ELSE
            JSTAT = 2
      ENDIF

C         If message is bad (PDFNDR error, station not defined, or data
C          type for given station not defined) then increment
C          'bad-message' counter (NBAD), increment error code (IERWR),
C          and output message with error indicator; go read new message

      IF (JSTAT .NE. 0) THEN
          ROUTINE = 'PDFNDR'
          NBAD  = NBAD + 1
          PNTR = '<==='
          IERWR(JSTAT) = IERWR(JSTAT) + 1
          ISTERR = 100 + JSTAT

          WRITE(LP,650) STAID,DTYPES,IYR,IMO,IDA,IHR,IMN,VALUE,ROUTINE,
     $                  ISTERR,PNTR

          GOTO 15
      ENDIF

C  End of changes to check on valid station and datatype.
C====================================================================
C  Check for RRS data

   30   ITSRRS = .FALSE.
        IRX = IPDCKR(DTYPES)
        IF (IRX .GT. 0) ITSRRS = .TRUE.

C  Process particular data type, checking for RRS first.

        IF (ITSRRS) THEN
          NVLPOB = NVALPO(IRX)
          CALL SUBSTR(IRSUNT(IRX),1,4,UNITS,1)

          CALL DDGCD2(JDAY,IYR,IMO,IDA)
          JHOUR=(JDAY-1)*24 + IHR
C                    LMIN=1     Length of array min
C                    MIN=IMN    Minutes of ob
C                    NUMOBS=1   Number of obs per data type
C                    LOBS=2     Length of obs array
          LMIN=1
          MIN=IMN
          IF(IMN.GT.30) JHOUR = JHOUR + 1
          IOBS(1)=JHOUR

          NUMOBS=1

          LOBS=2
C                                 NVLPOB=3 for MEAN Q data types
          IF (NVLPOB .EQ. 3) THEN
            IOBS(3) = IDUR
            LOBS=3
            ENDIF
C                                 OBS(2)=   observation
C                                 IFUT to see if data is proposed
          OBS(2)=VALUE

          IFUT=INDEX(FUTSTR,'FUT')
          CALL WPDRRS(STAID,IDTYPE,NTYPES,DTYPES,NVLPOB,UNITS,NUMOBS,
     .     LOBS,OBS,LMIN,MIN,LWBUFF,WBUFF,IWRITE,IFUT,LSTHR,IREV,ISTAT)

          NENT = NENT + 1

C  Set up message string based on success of data insert

          ROUTINE = 'WPDRRS'
          IF (ISTAT .EQ. 0) THEN
            PNTR = '    '
            ISTERR = 0
          ELSE
            NNONZ = NNONZ + 1
            PNTR = '<==='
            IF (ISTAT .EQ. 1) THEN
              IERWR(1) = IERWR(1) + 1
              ISTERR = 101
            ELSE IF (IWRITE .EQ. 1) THEN
              IERWR(2) = IERWR(2) + 1
              ISTERR = 102
            ELSE IF (IWRITE .EQ. -1 .OR. IWRITE .EQ. 2) THEN
              IERWR(3) = IERWR(3) + 1
              ISTERR = 103
            ELSE IF (IWRITE .EQ. 4) THEN
              IERWR(4) = IERWR(4) + 1
              ISTERR = 104
            ELSE IF (IWRITE .EQ. 6) THEN
              IERWR(5) = IERWR(5) + 1
              ISTERR = 105
            ELSE IF (IWRITE .EQ. 8) THEN
              IERWR(6) = IERWR(6) + 1
              ISTERR = 106
            ELSE IF (IWRITE .EQ. 7) THEN
              IERWR(7) = IERWR(7) + 1
              ISTERR = 107
            ELSE
              IERWR(10) = IERWR(10) + 1
              ISTERR = ISTAT
            END IF
          END IF
          WRITE(LP,650) STAID,DTYPES,IYR,IMO,IDA,IHR,IMN,VALUE,ROUTINE,
     .                  ISTERR,PNTR

C  Check for future temperature data

        ELSE IF (DTYPES .EQ.'TFMN' .OR. DTYPES.EQ.'TFMX')
     .   THEN
          UNITS = 'DEGF'
          CALL DDGCD2(JDAY,IYR,IMO,IDA)
          JHOUR = (JDAY-1)*24 + IHR
          IF(IMN.GT.30) JHOUR = JHOUR + 1

C  Shift observation time (Z-based) to PPDB time (NHOPDB hrs behind Z)

          JHOUR = JHOUR - NHOPDB
          LDATA = 1
          CALL WPD1SF(STAID,IDTYPE,NTYPES,DTYPES,UNITS,JHOUR,JHOUR,
     .     LDATA,VALUE,LWBUFF,WBUFF,IWRITE,IREV,ISTAT)
          NENT = NENT + 1

C  Set up message string based on success of data insert

          ROUTINE = 'WPD1SF'
          IF (ISTAT .EQ. 0) THEN
            PNTR = '    '
            ISTERR = 0
          ELSE
            NNONZ = NNONZ + 1
            PNTR = '<==='
            IF (ISTAT .EQ. 1) THEN
              IERWR(1) = IERWR(1) + 1
              ISTERR = 101
            ELSE IF (ISTAT .EQ. 2) THEN
              IERWR(2) = IERWR(2) + 1
              ISTERR = 102
            ELSE IF (ISTAT .EQ. 3) THEN
              IERWR(3) = IERWR(3) + 1
              ISTERR = 103
            ELSE IF (ISTAT .EQ. 4) THEN
              IERWR(4) = IERWR(4) + 1
              ISTERR = 104
            ELSE IF (ISTAT .GE. 20  .AND. ISTAT .LT. 30) THEN
              IERWR(5) = IERWR(5) + 1
              ISTERR = 105
            ELSE IF (ISTAT .GE. 30) THEN
              IERWR(6) = IERWR(6) + 1
              ISTERR = 106
            ELSE
              IERWR(10) = IERWR(10) + 1
              ISTERR = ISTAT
            END IF
          END IF
          WRITE(LP,650) STAID,DTYPES,IYR,IMO,IDA,IHR,IMN,VALUE,ROUTINE,
     .                  ISTERR,PNTR

C   Non-RRS or non-future temperature data

        ELSE
          UNITS='DEGF'
          IF(DTYPES(1:2).EQ.'PP') UNITS='IN  '
          IF(DTYPES(1:2).EQ.'RC') UNITS='PCTD'
          IF(DTYPES(1:2).EQ.'US') UNITS='MI/H'
          IF(DTYPES(1:2).EQ.'RP') UNITS='PCTD'
          IF(DTYPES(1:2).EQ.'RI') UNITS='LY  '
          CALL DDGCD2(JDAY,IYR,IMO,IDA)
          JHOUR=(JDAY-1)*24 + IHR
          IF(IMN.GT.30) JHOUR = JHOUR + 1

C  Check for daily and 6-hr reports that are not exactly on synoptic
C   intervals and shift obs times to proper intervals if obs times
C   are close enough.  (Note: 24-hr reports should be at 12 Z)

          TMSHFT = .FALSE.
          IF (DTYPES(3:4) .EQ. '24') THEN
            IF (MOD(JHOUR,12) .NE. 0) THEN
              NHR=IHR
              IF(IMN.GT.30) NHR = NHR + 1
              IOFF = 12 - NHR
              IF (IABS(IOFF) .LE. I24WIN) THEN
                JHOUR = JHOUR + IOFF
                TMSHFT = .TRUE.
                ENDIF
              ENDIF
          ELSE IF (DTYPES(3:4) .EQ. '06') THEN
            IF (MOD(JHOUR,6) .NE. 0) THEN
              IOFF = MOD(JHOUR,6)
              DO 300 I=1,I06WIN
                IF (IOFF .EQ. I) THEN
                  JHOUR = JHOUR - I
                  TMSHFT = .TRUE.
                  ENDIF
                IF (IOFF .EQ. (6-I)) THEN
                  JHOUR = JHOUR + I
                  TMSHFT = .TRUE.
                  ENDIF
  300           CONTINUE
              ENDIF
            ENDIF
C                     End of 24 and 6 hr type checking

C  Shift observation time (Z-based) to PPDB time (NHOPDB hrs behind Z)

          JHOUR = JHOUR - NHOPDB
          LDATA = 1
          CALL WPD1S(STAID,IDTYPE,NTYPES,DTYPES,UNITS,JHOUR,JHOUR,LDATA,
     .     VALUE,IWRITE,IREV,ISTAT)
          NENT = NENT + 1

C  Set up message string based on success of data insert

          ROUTINE = 'WPD1S'
          IF (ISTAT .EQ. 0) THEN
            PNTR = '    '
            ISTERR = 0
          ELSE
            NNONZ = NNONZ + 1
            PNTR = '<==='
            IF (ISTAT .EQ. 1) THEN
              IERWR(1) = IERWR(1) + 1
              ISTERR = 101
            ELSE IF (ISTAT .EQ. 2) THEN
              IERWR(2) = IERWR(2) + 1
              ISTERR = 102
            ELSE IF (ISTAT .EQ. 3) THEN
              IERWR(3) = IERWR(3) + 1
              ISTERR = 103
            ELSE IF (ISTAT .EQ. 4) THEN
              IERWR(4) = IERWR(4) + 1
              ISTERR = 104
            ELSE IF (ISTAT .GE. 20  .AND. ISTAT .LT. 30) THEN
              IERWR(5) = IERWR(5) + 1
              ISTERR = 105
            ELSE IF (ISTAT .GE. 30) THEN
              IERWR(6) = IERWR(6) + 1
              ISTERR = 106
            ELSE
              IERWR(10) = IERWR(10) + 1
              ISTERR = ISTAT
            END IF
          END IF

          IF (TMSHFT .AND. ISTAT.EQ.0) THEN
            IERWR(8) = IERWR(8) + 1
            ISTERR = 108
            PNTR = '<==='
            NTMSHF = NTMSHF + 1
            ENDIF

          WRITE(LP,650) STAID,DTYPES,IYR,IMO,IDA,IHR,IMN,VALUE,ROUTINE,
     .                  ISTERR,PNTR

C                 End of DTYPES IF, then get next data line
        ENDIF
      GOTO 15

C====================================================================

   20 CLOSE(ICD)

C====================================================================
C  All done with input file, tidy up shop.
C    Update V5 control records, then close files

  800 CALL WPPDCO(IERR)
      CALL UCLOSL

C  Output summary messages

      WRITE(LP,660) NINP,NBAD,NENT,NNONZ,NTMSHF
      IF (NNONZ.GT.0 .OR. NTMSHF.GT.0 .OR. NBAD.GT.0) THEN
        WRITE(LP,670)
        DO 950 I=1,NERCK
        IF (IERWR(I) .GT. 0) THEN
          NUMBER = 100 + I
          WRITE(LP,675) NUMBER, IERWR(I)
          END IF
  950   CONTINUE
        WRITE(LP,680)
        WRITE(LP,685)
        DO 960 I=1,NERCK
        IF (IERWR(I) .GT. 0) THEN
          NUMBER = 100 + I
          WRITE(LP,690) NUMBER, DESCRP(I)
          END IF
  960   CONTINUE
        WRITE(LP,680)
      END IF

      WRITE(LP,699)

          IF( ICD    .NE. 1 ) CALL UPCLOS(ICD,'  ',ISTAT)
          IF( LP     .NE. 1 ) CALL UPCLOS(LP,'  ',ISTAT)
          IF( ICDPUN .NE. 1 ) CALL UPCLOS(ICDPUN,'  ',ISTAT)

CHDH  Change made on 2004-06-22 by Hank Herr.  Use the new unlocking
CHDH  mechanism.
        CALL HUNLOCKFILES('BATCHPST',JER)
C          CALL FREE_OFS_LOCK(JER)

C======================================================================
C  Format Statements

  620 FORMAT(/' STAID     DTYPE    Date-Time      Value     Routine',
     .           '  Status'/,
     .           ' --------  -----  -------------  ---------   ',
     .           '-------  ------')
  650 FORMAT(1X,A8,2X,A4,I7.4,2I2.2,'-',2I2.2,F11.2,3X,A6,I7,2X,A4)
  660 FORMAT(/,'Number of Input Messages ......... ',I4,/
     .        ,'Number of Bad Messages ........... ',I4,//
     .        ,'Number of Attempted Entries ...... ',I4,/
     .        ,'Number of Unsuccessful Entries ... ',I4,/
     .        ,'Number of Shifted Obs Times ...... ',I4)
  670 FORMAT(/,
     .'     Error Code Summary... See Error Descriptions Below',/,
     .'============================================================',//,
     .'         Error #     Occurrences'/,
     .'         -------     -----------')
  675 FORMAT(11X,I3,10X,I4)
  680 FORMAT(/,
     .'============================================================',/)
  685 FORMAT(/,
     .'                  Error Code Descriptions',/,
     .'============================================================',/,/,
     .' Error #  Error Description',/,
     .' -------  --------------------------------------------------')
  690 FORMAT(2X,I4,4X,A60)
  699 FORMAT(/,'===> Normal End of BATCHPST Program <===')
  930 FORMAT(' *** IERR=',I3,' While Reading V5 Control Records -',
     .       ' Program Terminated ***')
  935 FORMAT(' *** IERR=',I3,' While Reading V5 Hash Records - ',
     .       'Program Terminated ***')
  940 FORMAT(' *** IERR=',I3,' While Reading V5 RRSTYPE ',
     .       'Characteristics - Program Terminated ***')

      STOP
      END
