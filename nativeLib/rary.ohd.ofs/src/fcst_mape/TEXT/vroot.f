C MODULE VROOT
C-----------------------------------------------------------------------
C
C  THIS ROUTINE READS THE CONTROL INFORMATION FOR THE PREPROCESSOR AND
C  PARAMETRIC DATA BASES AND GETS THE HCL RUN OPTIONS.
C
C  HCL TECHNIQUES USED:
C    NOUTZ    - PROVIDES THE OUTPUT TIME ZONE.
C    PRINT    - PROVIDES THE UNIT FOR LISTING OUTPUT.
C    NOUTDS   - DAYLIGHT SAVINGS TIME INDICATOR
C    STARTRUN - FIRST DAY FOR THE RUN
C    LSTCMPDY - LAST DAY OF OBSERVED DATA.
C    ENDRUN   - LAST DAY FOR THE RUN
C    STNPE    - OPTION TO LIST THE STATION MET DATA:
C                 0 = NO LISTING
C                 1 = LISTS THE INPUT DATA AND THE COMPUTED PE
C                 2 = LISTS ONLY THE COMPUTED PE
C    PRTMAPE  - OPTION TO PRINT THE MAPE VALUES:
C                 0 = NO LISTING
C                 1 = LISTS THE DATA  A 0 LISTS NOTHING.
C    METRIC   - PRINTOUT UNITS OPTION
C
      SUBROUTINE VROOT
C
      CHARACTER*8 OLDOPN,PARMID,TECHNM
      INTEGER*2 DDATA,JPNTRS
C
      PARAMETER (LWORK=1000)
      DIMENSION WORK(LWORK)
      DIMENSION KPETIM(7)
      PARAMETER (LPEPP=10000)
      DIMENSION PEPP(LPEPP)
      DIMENSION UNUSED(2)
      DIMENSION DDATA(600),JPNTRS(100)
C
      INCLUDE 'common/ionum'
      INCLUDE 'common/pudbug'
      INCLUDE 'prdcommon/pmaxdm'
      COMMON /VTIME/ JDAYO,IYRS,MOS,JDAMOS,IHRO,IHRS,JDAMO,JDAYYR
      COMMON /VOPT/ JAPTN,JPTN,JMAPE,LSTDY
      COMMON /VSTUP/ PTYPE,DTYPE,METRIC,CPETIM(2),UTYPE,BTYPE,EST(3)
      COMMON /VFIXD/ LRY,MRY,NDAYS,NDAYOB,LARFIL,LPDFIL
      COMMON /FCTIME/ IDARUN,IHRRUN,LDARUN,LHRRUN,LDACPD,LHRCPD,
     *   NOW(5),LOCAL,NOUTZ,NOUTDS,NLSTZ,IDA,IHR,LDA,LHR,IDADAT
      COMMON /FCTIM2/ INPTZC,NHOPDB,NHOCAL,NHROFF(8)
      COMMON /HDFLTS/ DX1(2),INPHCL,DFLTNM(2),DX2(16),LCLHCL,LTZHCL,
     *   KOFSET,DX3
C
C    ================================= RCS keyword statements ==========
      CHARACTER*68     RCSKW1,RCSKW2
      DATA             RCSKW1,RCSKW2 /                                 '
     .$Source: /fs/hseb/ob72/rfc/ofs/src/fcst_mape/RCS/vroot.f,v $
     . $',                                                             '
     .$Id: vroot.f,v 1.8 2002/02/11 20:32:37 dws Exp $
     . $' /
C    ===================================================================
C
      DATA JZTIM/4hZ   /
C
C
      IOPNUM=-1
      CALL FSTWHR ('VROOT   ',IOPNUM,OLDOPN,IOLDOP)
C
      IF (IPTRCE.GT.0) WRITE (IOPDBG,*) 'ENTER VROOT'
C
      IBUG=IPBUG('VROO')
C
      KZTIM=JZTIM
      LRY=600
      MRY=100
C
C  READ CONTROLS FOR PREPROCESSOR AND PARAMETRIC DATA BASES
      CALL RPPDCO (ISTAT)
      IF (ISTAT.NE.0) THEN
         WRITE (IPR,21) 'PREPROCESSOR DATA BASE'
21    FORMAT ('0**ERROR** READING ',A,'CONTROL RECORDS.')
         CALL ERROR
         GO TO 740
         ENDIF
      CALL RPPPCO (ISTAT)
      IF (ISTAT.NE.0) THEN
         WRITE (IPR,21) 'PREPROCESSOR PARAMETRIC DATA BASE'
         CALL ERROR
         GO TO 740
         ENDIF
C
C  READ 'NTWK' PARAMETERS
      IPRERR=0
      CALL SRNTWK (LWORK,WORK,IVNTWK,INWDTE,NNWFLG,INWFLG,
     *   UNUSED,IPRERR,ISTAT)
      IF (ISTAT.NE.0) THEN
         IPTR=0
         PARMID=' '
         CALL RPPREC (PARMID,'NTWK',IPTR,LWORK,WORK,NFILL,IPTRNX,ISTAT)
         CALL PSTRDC (ISTAT,'NTWK',PARMID,IPTR,LWORK,NFILL)
         WRITE (IPR,30)
30    FORMAT ('0**ERROR** ENCOUNTERD READING NTWK PARAMETERS.')
         CALL ERROR
         GO TO 740
         ENDIF
C
C  CHECK NETWORK FLAG
      INTWKF=0
      INTWK=WORK(17)
      IF (INTWK.EQ.1) INTWKF=1
      INTWK=WORK(21)
      IF (INTWK.EQ.1) INTWKF=1
      IF (INTWKF.EQ.1) THEN
         CALL SPNTWK (IVNTWK,INWDTE,NNWFLG,INWFLG,UNUSED,ISTAT)
         WRITE (IPR,40)
40    FORMAT ('0**ERROR** ONE OR MORE OF THE MAPE RELATED ',
     *   'NETWORK COMPUTATION INDICATORS IS SET.')
         CALL ERROR
         GO TO 740
         ENDIF
C
C  INITIALIZE POINTERS TO ZERO
      DO 50 J=1,100
         JPNTRS(J)=0
50       CONTINUE
      IF (IBUG.GT.0) WRITE (IOPDBG,60)LCLHCL,LTZHCL,JOFFST
60    FORMAT (' IN VROOT AFTER POINTER INITIALIZATION LOOP ',
     1' LCLHCL=',I10,' LTZHCL=',I10,' JOFFST=',I10)
C
C  SET TIME VARIABLES
      LOCAL=LCLHCL
      NLSTZ=LTZHCL
C
C  COMPUTE ZDAY
      JOFFST=LOCAL-NLSTZ
      IF (JOFFST.GT.23)JOFFST=JOFFST-24
      IF (JOFFST.LT.0)JOFFST=JOFFST+24
      NHOPDB=KOFSET
      INPTZC=INPHCL
C
C  GET AND CHECK VALUE OF HCL TECHNIQUES:
C    HPAST AND HPASTA GET THE TECHNIQUE VALUES
C    FTEKCK CHECKS THE TECHNIQUE VALUE
C
      TECHNM='NOUTZ'
      CALL HPAST (TECHNM,NOUTZ,ISTAT)
      CALL FPHPWN (ISTAT,TECHNM)
      CALL FTEKCK (NOUTZ,TECHNM,-6,NOUTZ,-12,12)
C
      IOUNT=0
      IF (IOUNT.EQ.1) THEN
C
      TECHNM='PRINT'
      CALL HPAST (TECHNM,IPR,ISTAT)
      CALL FTEKCK ( IPR,TECHNM,6,IPR,1,9)
      IF (IPR.EQ.6.OR.IPR.EQ.8.OR.IPR.EQ.9) THEN
         ELSE
            IPR=6
            WRITE (IPR,100) TECHNM,IPR
100   FORMAT ('0**WARNING** THE VALUE FOR TECHNIQUE ',A,
     1  'MUST BE 6, 8 OR 9. THE UNIT WILL BE SET TO ',I3,'.')
            CALL WARN
            ENDIF
C
      TECHNM='PPPRINT'
      CALL HPAST (TECHNM,IPPPR,ISTAT)
      IF (ISTAT.NE.0) CALL FPHPWN (ISTAT,TECHNM)
      IF (IPPPR.EQ.6.OR.IPPPR.EQ.8.OR.IPPPR.EQ.9) THEN
            IPPPR=6
            WRITE (IPR,100) TECHNM,IPPPR
            CALL WARN
            ENDIF
140   IF (IPPPR.GT.0) IPR=IPPPR
C
      ENDIF
C
C  CHECK TECHNIQUE TO PRINT ONLY THE LAST DAY OF OBSERVED DATA
      TECHNM='PRLASTDY'
      CALL HPAST (TECHNM,LSTDY,ISTAT)
      IF (ISTAT.NE.0) CALL FPHPWN (ISTAT,TECHNM)
C
C  CHECK TECHNIQUUE TO SET THE DAYLIGHT SAVINGS TIME SWITCH
      TECHNM='NOUTDS'
      CALL HPAST (TECHNM,NOUTDS,ISTAT)
      CALL FPHPWN (ISTAT,TECHNM)
      CALL FTEKCK (NOUTDS,TECHNM,0,NOUTDS,0,1)
C
C  SET THE MAX NUMBER OF DAYS CAN STORED IN TIME SERIES
      MAXDAY=IPRDMD(BTYPE)
      IF (MAXDAY.LT.1) THEN
         WRITE (IPR,170) MAXDAY
170   FORMAT ('0**ERROR** THE MAXIMUM DAYS FOR DATA TYPE ',A4,' IS ',I4,
     *   ' WHICH IS LESS THAN 1. THIS MAY BE CAUSED BY THE TYPE ',
     *   'MAPE NOT BEING DEFINED.')
         CALL ERROR
         GO TO 740
         ENDIF
C
      IF (IBUG.GT.0) WRITE (IOPDBG,180)CPETIM
180   FORMAT (' IN VROOT BEFORE CALLING HPASTA: CPETIM ARE ',2A4)
C
      IHRO=0
C
C  GET DATE RUN STARTS
      TECHNM='STARTRUN'
      CALL HPASTA (TECHNM,7,JTVAL,KDARY,KPETIM,ISTAT)
      CALL FPHPWN (ISTAT,TECHNM)
      IF (ISTAT.NE.0) THEN
         WRITE (IPR,190) TECHNM(1:LENSTR(TECHNM))
190   FORMAT ('0**ERROR** PROCESSING TECHNIQUE ',A,'.')
         CALL ERROR
         GO TO 740
	 ENDIF
      JIHR=KPETIM(1)
C
C  CHECK IF A MULITIPLE OF 24
      IHR=JIHR
      IF ((JIHR/24)*24.EQ.JIHR) GO TO 220
         JIHR=(JIHR/24)*24
         JDAY=(JIHR+24+JOFFST+24)/24
         CALL MDYH2 (JDAY,IHRO,MOS,JDAMOS,IYRS,IHRS,XD1,XD2,INPTZC)
         WRITE (IPR,210) IHRS,INPTZC,MOS,JDAMOS,IYRS
210   FORMAT ('0**WARNING** INITIAL HOUR FOR MAPE ',
     *   'MUST BE 12Z. INITIAL HOUR RESET TO ',I2.2,A4,
     *   ' ON ',I2.2,'/',I2.2,'/',I4,'.')
         CALL WARN
C
C  COMPUTE JULIAN Z TIME CALANDER DAY
220   IF (IBUG.GT.0) WRITE (IOPDBG,230) JOFFST,LOCAL,NLSTZ,JIHR
230   FORMAT (' IN VROOT BEFORE COMPUTING JDAY.  JOFFST=',I4,
     *   ' LOCAL=',I5,' AND NLSTZ=',I5,' JIHR=',I10)
      JDAY=(JIHR+24+JOFFST+24)/24
C
C  SET ORIGINAL INTERNAL HOUR FOR COMPUTING CURRENT DAY AND TIME LATER
      JDAYO=JDAY
      CALL MDYH2 (JDAYO,IHRO,MOS,JDAMOS,IYRS,IHRS,XD1,XD2,INPTZC)
C
C  GET THE DATE OF THE LAST OBSERVED DATA
      TECHNM='LSTCMPDY'
      CALL HPASTA (TECHNM,7,JTVAL,KDARY,KPETIM,ISTAT)
      CALL FPHPWN (ISTAT,TECHNM)
      IF (ISTAT.NE.0) THEN
         WRITE (IPR,190) TECHNM(1:LENSTR(TECHNM))
         CALL ERROR
         GO TO 740
	 ENDIF
      LCHR=KPETIM(1)
      IF (IBUG.GT.0) WRITE (IOPDBG,260) LCHR,JIHR,JOFFST
260   FORMAT (' AFTER HPASTA FOR ',A,' : LCHR=',I8,' JIHR=',I8,
     *   ' JOFFST=',I3)
C
C  CHECK IF THAT THE START TIME PRECEDES THE ENDING TIME
      IF (LCHR-JIHR.GT.0) GO TO 280
         JDAY=(LCHR+JOFFST+24)/24
         CALL MDYH2 (JDAYO,IHRO,MOS,JDAMOS,IYRS,IHRS,XD1,XD2,INPTZC)
         CALL MDYH2 (JDAY,IHRO,MOL,JDAMOL,IYRL,IHRS,XD1,XD2,INPTZC)
         WRITE (IPR,270) MOS,JDAMOS,IYRS,MOL,JDAMOL,IYRL
270   FORMAT ('0**ERROR** THE DAY REQUESTED TO BEGIN ',
     1  'THE RUN (',I2.2,'/',I2.2,'/',I4,') IS AFTER THE LAST DAY OF ',
     2  'EXPECTED OBSERVED DATA (',I2.2,'/',I2.2,'/',I4)
         CALL ERROR
         GO TO 740
C
280   IHR=LCHR
      IF ((LCHR/24)*24.EQ.LCHR) GO TO 300
         LCHR=(LCHR/24)*24
         JDAY=(LCHR+JOFFST+24)/24
         CALL MDYH2 (JDAY,IHRO,MOS,JDAMOS,IYRS,IHRS,XD1,XD2,INPTZC)
         WRITE (IPR,290) IHRS,INPTZC,MOS,JDAMOS,IYRS
290   FORMAT ('0**WARNING** FINAL OBSERVED HOUR FOR MAPE ',
     *   'MUST BE 12Z. FINAL OBSERVED HOUR RESET TO ',I2,A4,
     *   ' ON ',I2.2,'/',I2.2,'/',I4,'.')
         CALL WARN
300   JDAY=(LCHR+JOFFST+24)/24
      JDAYOB=JDAY
C
C  DETERMINE THE NUMBER OF DAYS OF OBSERVED DATA
      NDAYOB=JDAYOB-JDAYO+1
      IF (IBUG.GT.0) WRITE (IOPDBG,310)JDAYO,JDAYOB,NDAYOB
310   FORMAT (' AFTER COMPUTING THE LAST EXPECTED DAY OF DATA: ',
     1   ' JDAYO=',I8,' JDAYOB=',I8,' NUMBER OF OBS DAYS. ',I5)
       IF (IBUG.GT.0) WRITE (IOPDBG,*) 'JIHR=',JIHR
C
C  GET DATE OF RUN ENDS
      TECHNM='ENDRUN'
      CALL HPASTA (TECHNM,7,JTVAL,KDARY,KPETIM,ISTAT)
      IF (IBUG.GT.0) WRITE (IOPDBG,330) TECHNM,JIHR,KPETIM(1)
330   FORMAT (' JUST AFTER HPASTA FOR ',A,': JIHR=',I6,' JEHR=',I6)
      CALL FPHPWN (ISTAT,TECHNM)
      IF (ISTAT.NE.0) THEN
         WRITE (IPR,190) TECHNM(1:LENSTR(TECHNM))
         CALL ERROR
         GO TO 740
	 ENDIF
      JEHR=KPETIM(1)
C
C  CHECK IF STARTING TIME PRECEDES THE ENDING DATES
      IF (JEHR-JIHR.GT.0) GO TO 370
         JDAY=(JEHR+JOFFST+24)/24
         CALL MDYH2 (JDAYO,IHRO,MOS,JDAMOS,IYRS,IHRS,XD1,XD2,INPTZC)
         CALL MDYH2 (JDAY,IHRO,MOL,JDAMOL,IYRL,IHRS,XD1,XD2,INPTZC)
         WRITE (IPR,360) MOS,JDAMOS,IYRS,MOL,JDAMOL,IYRL
360   FORMAT ('0**ERROR** THE DAY REQUESTED TO BEGIN ',
     *   'THE RUN (',I2.2,'/',I2.2,'/',I4,') FOLLOWS THE LAST DAY ',
     *   'REQUESTED FOR THE RUN (',I2.2,'/',I2.2,'/',I4,').')
         CALL ERROR
         GO TO 740
C
C  CHECK IF FINAL JULIAN HOUR IS A MULITIPLE OF 24
370   IHR=JEHR
      IF ((JEHR/24)*24.EQ.IHR) GO TO 390
         JEHR=(JEHR/24)*24
         JDAY=(JEHR+JOFFST+24)/24
         CALL MDYH2 (JDAY,IHRO,MOS,JDAMOS,IYRS,IHRS,XD1,XD2,INPTZC)
         WRITE (IPR,380) IHRS,INPTZC,MOS,JDAMOS,IYRS
380   FORMAT ('0**WARNING** END RUN HOUR FOR MAPE ',
     *   'MUST BE 12Z. END RUN HOUR RESET TO ',I2,A4,
     *   ' ON ',I2.2,'/',I2.2,'/',I4,'.')
         CALL WARN
390   JDAY=(JEHR+JOFFST+24)/24
      JDAYL=JDAY
C
C  CHECK IF DATA IS AVAILABLE ON THE PPDB
      IF (IBUG.GT.0) WRITE (IOPDBG,400) DTYPE
400   FORMAT (' IN VROOT BEFORE CALL TO RPDDTE: DTYPE=',A4)
      CALL RPDDTE (DTYPE,JDAYPP,JDAYLO,ISTAT)
      IF (ISTAT.NE.0) THEN
         IF (ISTAT.EQ.1) THEN
            WRITE (IPR,401) DTYPE
401   FORMAT ('0**ERROR** ',A4,' IS AN PREPROCESSOR DATA BASE ',
     *   'DATA TYPE.')
            CALL ERROR
            ENDIF
         IF (ISTAT.EQ.2) THEN
            WRITE (IPR,402) DTYPE
402   FORMAT ('0**ERROR** DATA TYPE ',A4,' IS NOT DEFINED IN THE ',
     *   'PREPROCESSOR DATA BASE')
            CALL ERROR
            ENDIF
         IF (ISTAT.EQ.3) THEN
            WRITE (IPR,60) DTYPE
403   FORMAT ('0**ERROR** NO STATIONS DEFINED IN THE ',
     *   'PREPROCESSOR DATA BASE WITH DATA TYPE ',A4,'.')
            CALL ERROR
            ENDIF
         GO TO 740
         ENDIF
C
C  ADJUST FOR THE DIFFERENCE IN DATES BETWEEN THE DATA BASE AND THE
C  INTERNAL CALENDARS AND CLOCKS
      JOB=JDAYPP
      JOL=JDAYLO
      IF (JOB.GT.JDAYO )THEN
         CALL MDYH2 (JDAYO,IHRO,MOSO1,JDAYS1,IYRS1,IHRS1,XD1,XD2,KZTIM)
         CALL MDYH2 (JOB,IHRO,MOSO2,JDAYS2,IYRS2,IHRS2,XD1,XD2,KZTIM)
         WRITE (IPR,650) MOSO1,JDAYS1,IYRS1,MOSO2,JDAYS2,IYRS2,IHRS1,
     *      JZTIM
650   FORMAT ('0**WARNING** THE FIRST DAY REQUESTED WAS FOR ',
     1 I2.2,'/',I2.2,'/',I4,' BUT THE FIRST DAY ON THE FILE WAS FOR ',
     2 I2.2,'/',I2.2,'/',I4,'.' /
     3 ' FIRST DAY WILL BE RESET TO THE FIRST DAY ON THE DATA FILE. ',
     4 'ALL TIMES ARE FOR ',I4,1X,A4,'.')
         CALL WARN
         JDAYO=JOB
         NDAYOB=JDAYOB-JDAYO+1
         CALL MDYH2 (JDAYO,IHRO,MOS,JDAMOS,IYRS,IHRS,XD1,XD2,INPTZC)
         ENDIF
      IF (JOL.LT.JDAYOB) THEN
         CALL MDYH2 (JDAYOB,IHRO,MOSO1,JDAYS1,IYRS1,IHRS1,XD1,XD2,KZTIM)
         CALL MDYH2 (JOL,IHRO,MOSO2,JDAYS2,IYRS2,IHRS2,XD1,XD2,KZTIM)
         WRITE (IPR,670 )MOSO1,JDAYS1,IYRS1,MOSO2,JDAYS2,IYRS2,IHRS2,
     *      JZTIM
670   FORMAT ('0**WARNING** LAST EXPECTED DAY OF OBSERVED DATA WAS ',
     1 I2.2,'/',I2.2,'/',I4,' BUT THE LAST DAY ON THE FILE IS ',
     2 I2.2,'/',I2.2,'/',I4,'.' /
     3 13X,'THE LAST DAY WILL BE RESET TO THE EARLIER DATE. ',
     4     'THE TIME FOR EACH DAY IS ',I2,A4,'.')
         JDAYOB=JOL
         NDAYOB=JDAYO-JDAYOB+1
         CALL WARN
         ENDIF
C
C  DETERMINE THE NUMBER OF DAYS TO BE RUN
      NDAYS=JDAYL-JDAYO+1
      IF (NDAYS.LE.0) THEN
         WRITE (IPR,440) NDAYS
440   FORMAT ('0**WARNING** NUMBER OF DAYS (',I5,') FOR RUN ',
     *   'IS LESS THAN OR EQUAL TO ONE.')
         CALL WARN
	 ENDIF
      IF (IBUG.GT.0) WRITE (IOPDBG,460) JOB,JDAYO,NDAYS,JDAYL
460   FORMAT (' IN VROOT AFTER DATA FILE DATE CHECK:',
     *   ' FIRST DAY ON FILE=',I5,' FIRST DAY OF RUN=',I5,' NDAYS=',I4 /
     *   ' LAST REQUESTED DAY OF RUN (JDAYL)=',I5)
C
C  CHECK THAT NUMBER OF OBSERVED DAYS LESS THAN TOTAL DAYS
      IF (NDAYOB.GT.NDAYS) THEN
         NDAYOB=NDAYS
         JDAYOB=JDAYL
         LCHR=JEHR
         IF (IBUG.GT.0) WRITE (IOPDBG,470) NDAYOB,JDAYOB
470   FORMAT (' NDAYOB RESET TO ',I6,' JDAYOB RESET TO',I6)
         ENDIF
C
C  CHECK IF NDAYS EXCEEDS THE MAXIMUM NUMBER OF DAYS THAT CAN BE
C  COMPUTED
      NMAX=30
      IF (NDAYS.GT.NMAX) THEN
         WRITE (IPR,730) NDAYS,'THAT CAN BE COMPUTED',NMAX
730   FORMAT ('0**WARNING** THE NUMBER OF DAYS ',
     *    'REQUESTED (',I5,') EXCEEDS THE MAXIMUM ',A,' (',I5,
     *    ').' /
     * 13X,'THE FIRST DAY WILL BE RESET TO THE LAST DAY MINUS THE ',
     *     'ALLOWED NUMBER OF DAYS.')
         CALL WARN
         NDAYS=NMAX
         JDAYO=JDAYL-NMAX+1
         NDAYOB=NMAX-(JDAYL-JDAYOB)
         ENDIF
C
C  CHECK IF NDAYS EXCEEDS THE MAXIMUM NUMBER OF DAYS OF TIME SERIES DATA
      IF (NDAYS.GT.MAXDAY) THEN
         WRITE (IPR,730) NDAYS,'FOR THE MAPE TIME SERIES',MAXDAY
         CALL WARN
         NDAYS=MAXDAY
         JDAYO=JDAYL-MAXDAY+1
         NDAYOB=MAXDAY-(JDAYL-JDAYOB)
         ENDIF
C
C  COMPUTE THE ALLOWED DAYS OF FUTURE DATA AS THE DIFFERENCE BETWEEN
C  THE MAX DAYS AND THE MIN DAYS
      MAXFTR=MAXDAY-MINDAY
      IF (IBUG.GT.0) WRITE (IOPDBG,500) MAXFTR,MAXDAY,MINDAY,JDAYL,
     *   JDAYOB
500   FORMAT (' IN VROOT BEFORE TEST ON MAXFTR: MAXFTR=',I5,
     * ' MAXDAY=',I5,' MINDAY=',I5,' JDAYL=',I8,' JDAYOB=',I8)
      IF (MAXFTR.GE.(JDAYL-JDAYOB)) GO TO 520
         NDAYS=NDAYOB+MAXFTR
         JDAYL=JDAYO+NDAYS-1
         CALL MDYH2 (JDAYL,IHRO,LMOS,LDAYS,LIYRS,LIHRS,XD1,XD2,INPTZC)
         WRITE (IPR,510)LMOS,LDAYS,LIYRS,LIHRS,INPTZC
510   FORMAT ('0**WARNING** THE NUMBER OF DAYS BETWEEN THE ',
     *    'LAST DAY OF OBSERVED DATA AND THE LAST DAY REQUESTED ' /
     * T14,'EXCEEDS THE SPACE AVAILABLE TO WRITE FUTURE MAPE VALUES ',
     *    'TO THE PROCESSED DATA BASE.' /
     * T14,'THE NUMBER OF FORECAST DAYS WAS REDUCED BY RESETTING THE ',
     *    'LAST DAY TO ',I2.2,'/',I2.2,'/',I4,'-',I2,A4,'.')
         CALL WARN
C
C  GET THE NUMBER OF WORDS TO BE FILLED IN THE POINTER AND DATA ARRAYS
520   CALL RPDFIL (DTYPE,JDAYO,LPDFIL,LARFIL,ISTAT)
      IF (ISTAT.NE.0) THEN
         IF (ISTAT.EQ.1) THEN
            WRITE (IPR,401) DTYPE
            CALL ERROR
            ENDIF
         IF (ISTAT.EQ.2) THEN
            WRITE (IPR,403) DTYPE
            CALL ERROR
            ENDIF
         ENDIF
C
C  SET JDAY EQUAL TO THE FIRST JULIAN DAY TO BE PROCESSED
      JDAY=JDAYO
C
C  PRINT HEADER
      CALL UPAGE (IPR)
      CALL MDYH2 (JDAY,IHRO,LSMO,LSDA,LSYR,LIHRS,XD1,XD2,INPTZC)
      LHRO=IHRO
      CALL MDYH2 (JDAYL,LHRO,LLMO,LLDA,LLYR,LIHRS,XD1,XD1,INPTZC)
      WRITE (IPR,540)
540   FORMAT (1H0,45X,'MAPE FUNCTION')
      WRITE (IPR,550) LSMO,LSDA,LSYR,LIHRS,INPTZC,
     *  LLMO,LLDA,LLYR,LIHRS,INPTZC
550   FORMAT (1H0,30X,'RUN PERIOD',2X,
     *  I2.2,'/',I2.2,'/',I4.4,'-',I2.2,A4,' THRU ',
     *  I2.2,'/',I2.2,'/',I4.4,'-',I2.2,A4)
C
      TECHNM='STNPE'
      CALL HPAST (TECHNM,JOPT,ISTAT)
      CALL FPHPWN (ISTAT,TECHNM)
      CALL FTEKCK (JOPT,TECHNM,0,JOPT,0,2)
      IF (ISTAT.GT.0) THEN
         WRITE (IPR,690) TECHNM(1:LENSTR(TECHNM))
690   FORMAT ('0**ERROR** TECHNIQUE ',A,' NOT FOUND.')
         CALL ERROR
         GO TO 580
         ENDIF
      IF (JOPT.GT.0) GO TO 570
         JAPTN=0
         JPTN=0
         GO TO 590
570   IF (JOPT.LT.2) GO TO 580
         JAPTN=0
         JPTN=1
         GO TO 590
580   JAPTN=1
      JPTN=0
C
590   TECHNM='PRTMAPE'
      CALL HPAST (TECHNM,JMAPE,ISTAT)
      CALL FPHPWN (ISTAT,TECHNM)
      CALL FTEKCK (JMAPE,TECHNM,1,JMAPE,0,1)
C
C  GET THE ENGLISH/METRIC PRINT VALUE - DEFAULT IS ENGLISH
      TECHNM='METRIC'
      CALL HPAST (TECHNM,METRIC,ISTAT)
      CALL FPHPWN (ISTAT,TECHNM)
      IDEFLT=0
      MINVAL=0
      MAXVAL=1
      CALL FTEKCK (METRIC,TECHNM,IDEFLT,METRIC,MINVAL,MAXVAL)
      IF (ISTAT.NE.0) THEN
         WRITE (IPR,710) TECHNM
710   FORMAT ('0**WARNING** THE ARGUMENT FOR TECHNIQUE ',A,
     *   'WAS NOT FOUND.')
         CALL WARN
         ENDIF
      IF (IBUG.GT.0) WRITE (IOPDBG,630) METRIC
630   FORMAT (' METRIC=',I2)
C
C  COMPUTE POINTER INFORMATION NEEDED TO PROCESS PE STATIONS
      IF (IBUG.GT.0) WRITE (IOPDBG,620)MOS,JDAMOS,IYRS,IHRS
620   FORMAT (' BEFORE CALL TO VPTR: MOS=',I5,' JDAMOS=',I5,
     1 ' IYRS=',I4,' IHRS=',I5)
      CALL VPTR (DDATA,LPEPP,PEPP,JPNTRS)
C
740   CALL FSTWHR (OLDOPN,IOLDOP,OLDOPN,IOLDOP)
C
      IF (IPTRCE.GT.0) WRITE (IOPDBG,*) 'EXIT VROOT'
C
      RETURN
C
      END
