C MODULE EILSGO
C-----------------------------------------------------------------------
C
      SUBROUTINE EILSGO
C
C     THIS ROUTINE FILLS THE VARIABLES IN FORECAST COMPONENT COMMON
C     BLOCKS WHICH CAN CHANGE SEGMENT BY SEGMENT
C
C   THIS ROUTINE WAS WRITTEN BY GERALD N. DAY .
C
      INCLUDE 'common/ionum'
      INCLUDE 'common/fdbug'
      INCLUDE 'common/sysbug'
      INCLUDE 'common/fnopr'
      INCLUDE 'common/fpltab'
      INCLUDE 'common/fsnw'
      INCLUDE 'common/fpwarn'
      INCLUDE 'common/fengmt'
      COMMON/FSNWUP/IUPWE,IUPSC
cf    COMMON /FSACPR/ IPRSAC,NOFRZE
      INCLUDE 'common/fsacpr'
      INCLUDE 'common/etime'
      INCLUDE 'common/eswtch'
      INCLUDE 'common/eperm'
      INCLUDE 'common/eunit'
      INCLUDE 'common/efdate'
      INCLUDE 'common/emod'
      INCLUDE 'common/elimit'
      INCLUDE 'common/where'
      INCLUDE 'common/efutp'
      INCLUDE 'common/eoutpt'
      INCLUDE 'common/espres'
      INCLUDE 'common/etsunt'
C
      CHARACTER*8 TECHNAME
      DIMENSION IOPRNM(2),SBNAME(2),OPHOLD(2)
      PARAMETER (LIARGS=100)
      DIMENSION IARGS(LIARGS)
      DIMENSION VARTYP(10)
C
C    ================================= RCS keyword statements ==========
      CHARACTER*68     RCSKW1,RCSKW2
      DATA             RCSKW1,RCSKW2 /                                 '
     .$Source: /fs/hseb/ob72/rfc/ofs/src/shared_esp/RCS/eilsgo.f,v $
     . $',                                                             '
     .$Id: eilsgo.f,v 1.6 2002/02/11 20:28:21 dws Exp $
     . $' /
C    ===================================================================
C
      DATA IBLNK/4H    /,IYES/4HYES /
      DATA ICBG/4HFILS/
      DATA VARTYP/4HMXMD,4HMNMD,4HMD  ,4HSUM ,4HMXIN,4HMNIN,
     1 4HNDTO,4HNDIS,4H    ,4H    /
      DATA SBNAME/4HEILS,4HGO  /
C
C
C   SET TRACE LEVEL FROM ARGUMENT OF TECHNIQUE FCDEBUG
C
      CALL HPASTA (8HFCDEBUG ,LIARGS,IFCDBG,NWORDS,IARGS,ISTAT)
      IF(ISTAT.NE.0) CALL FPHPWN(ISTAT,8HFCDEBUG )
      ITRACE=IARGS(84)
C
      IF(ITRACE.GT.0)WRITE(IODBUG,600)
  600 FORMAT(' ENTER EILSGO')
C
      DO 2 I=1,2
      OPHOLD(I)=OPNAME(I)
    2 OPNAME(I)=SBNAME(I)
      IOPHLD=IOPNUM
      IOPNUM=0
C
      IDBALL=0
C
C   EXTRACT ARGUMENT IDBALL WHICH TELLS WHETHER OR NOT TO TURN ON
C   DEBUG PRINTOUT FOR ALL OPERATIONS
C
      CALL HGTSTR (1,IARGS(80),ICKYES,IFL,ISTAT)
      IF(ISTAT.EQ.0)GO TO 3
      WRITE(IPR,602)ISTAT
      CALL ERROR
      GO TO 4
C
    3 IF(ICKYES.EQ.IYES)IDBALL=1
    4 NDEBUG=0
C
      IF(IDBALL.EQ.1)GO TO 15
C
C   LOOP THROUGH 8 CHARACTER OPERATION TYPES, UNTIL A BLANK ONE IS
C   FOUND -- UNPACK TYPES, GET OPERATION NUMBER FROM ROUTINE
C   FOPCDE, AND STORE NUMBER IN ARRAY IDEBUG IN CB /FDBUG/
C
      DO 10 I=1,20
         CALL HGTSTR (2,IARGS(1+(I-1)*4),IOPRNM,IFL,ISTAT)
         IF (ISTAT.EQ.0)GO TO 5
           WRITE(IPR,602)ISTAT
  602 FORMAT('0**ERROR** STATUS OF ',I3,' RETURNED FROM ',
     1  'HGTSTR')
           CALL ERROR
           GO TO 10
    5    IF(IOPRNM(1).EQ.IBLNK.AND.IOPRNM(2).EQ.IBLNK)GO TO 10
         NDEBUG=NDEBUG+1
         CALL FOPCDE(IOPRNM,IDEBUG(NDEBUG))
   10    CONTINUE
C
   15 IALL=0
C
C   GET TECH AND ARGUMENTS FOR SYSDEBUG
C
      CALL HPASTA (8HSYSDEBUG,LIARGS,ISYDBG,NWORDS,IARGS,ISTAT)
      IF(ISTAT.NE.0) CALL FPHPWN(ISTAT,8HSYSDEBUG)
C
C   EXTRACT ARGUMENT IALL WHICH TELLS WHETHER OR NOT TO TURN
C   ON ALL SYSTEM DEBUG CODES.
C
      CALL HGTSTR (1,IARGS(63),ICKYES,IFL,ISTAT)
      IF(ISTAT.EQ.0)GO TO 16
      WRITE(IPR,602)ISTAT
      CALL ERROR
      GO TO 17
C
   16 IF(ICKYES.EQ.IYES)IALL=1
   17 NDEBGS=0
C
      IF(IALL.EQ.1)GO TO 25
C
C   LOOP THROUGH 4 CHARACTER DEBUG CODES UNTIL A BLANK ONE IS
C   FOUND, UNPACK CODES AND STORE IN IDEBGS OF CB /SYSBUG/
C
      DO 20 I=1,20
      CALL HGTSTR (1,IARGS(1+(I-1)*3),ICDS,IFL,ISTAT)
      IF(ISTAT.EQ.0)GO TO 18
      WRITE(IPR,602)ISTAT
      CALL ERROR
C
   18 IF(ICDS.EQ.IBLNK)GO TO 20
C
      NDEBGS=NDEBGS+1
      IDEBGS(NDEBGS)=ICDS
C
   20 CONTINUE
C
C    SET DEBUG FLAG
C
   25 IBUG=IFBUG(ICBG)
C
      IF(IBUG.EQ.0)GO TO 30
C
      WRITE(IODBUG,903)IALL,NDEBGS
  903 FORMAT(1H0,5X,'*** IN EILSGO - IALL,NDEBGS= ',2I11)
C
      IF(NDEBGS.GT.0)WRITE(IODBUG,904)
     1  (IDEBGS(I),I=1,NDEBGS)
  904 FORMAT(' THE CURRENTLY ACTIVE SYSTEM DEBUG CODES ARE'/
     1  (11X,10(A4,1X)))
C
      WRITE(IODBUG,901)IDBALL,NDEBUG
  901 FORMAT(1H0,5X,'*** IN EILSGO - IDBALL,NDEBUG= ',2I11)
C
      IF(NDEBUG.GT.0)WRITE(IODBUG,902)
     1  (IDEBUG(I),I=1,NDEBUG)
  902 FORMAT(' THE OPERATION NUMBERS BEING DEBUGGED ARE'/
     1  (11X,5I11))
C
   30 NOPROT=0
C
C   LOAD TECHNIQUE PRINTOUT
C
      CALL HPAST(8HPRINTOUT,IPROUT,ISTAT)
      IF(ISTAT.NE.0) CALL FPHPWN(ISTAT,8HPRINTOUT)
      CALL FTEKCK(IPROUT,8HPRINTOUT,0,IPROUT,0,1)
      IF(IPROUT.EQ.0)NOPROT=1
C
C     SET VALUES IN /FPLTAB/
C     VALUE OF 0 FOR TECHNIQUE GIVES VALUE OF -1 IN /FPLTAB/
C     VALUE OF 1 FOR TECHNIQUE GIVES VALUE OF  1 IN /FPLTAB/
C     VALUE OF 2 FOR TECHNIQUE GIVES VALUE OF  0 IN /FPLTAB/
C
C   TECHNIQUE TABLES
C
      CALL HPAST(8HTABLES  ,ITABLE,ISTAT)
      IF(ISTAT.NE.0) CALL FPHPWN(ISTAT,8HTABLES  )
      CALL FTEKCK(ITABLE,8HTABLES  ,0,ITABLE,0,2)
C
      IPRHY=0
      IF(ITABLE.EQ.0)IPRHY=-1
      IF(ITABLE.EQ.1)IPRHY=1
C
C   TECHNIQUE PLOTHYD
C
      CALL HPAST(8HPLOTHYD ,IPLOTH,ISTAT)
      IF(ISTAT.NE.0) CALL FPHPWN(ISTAT,8HPLOTHYD )
      CALL FTEKCK(IPLOTH,8HPLOTHYD ,0,IPLOTH,0,2)
      IPLHY=0
      IF(IPLOTH.EQ.0)IPLHY=-1
      IF(IPLOTH.EQ.1)IPLHY=1
C
C     SET VALUE IN /FSNW/
C     VALUE OF 0 FOR TECHNIQUE GIVES VALUE OF -1 IN /FSNW/
C     VALUE OF 1 FOR TECHNIQUE GIVES VALUE OF  1 IN /FSNW/
C     VALUE OF 2 FOR TECHNIQUE GIVES VALUE OF  0 IN /FSNW/
C
C   TECHNIQUE PRINTSNW
C
      CALL HPAST(8HPRINTSNW,IPRTSN,ISTAT)
      IF(ISTAT.NE.0) CALL FPHPWN(ISTAT,8HPRINTSNW)
      CALL FTEKCK(IPRTSN,8HPRINTSNW,0,IPRTSN,0,2)
      IPRSNW=0
      IF(IPRTSN.EQ.0)IPRSNW=-1
      IF(IPRTSN.EQ.1)IPRSNW=1
C
C     SET VALUE IN /FSACPR/
C     VALUE OF 0 FOR TECHNIQUE GIVES VALUE OF -1 IN /FSACPR/
C     VALUE OF 1 FOR TECHNIQUE GIVES VALUE OF  1 IN /FSACPR/
C     VALUE OF 2 FOR TECHNIQUE GIVES VALUE OF  0 IN /FSACPR/
C
C   TECHNIQUE PRINTSMA
C
      CALL HPAST(8HPRINTSMA,IPRTSM,ISTAT)
      IF(ISTAT.NE.0) CALL FPHPWN(ISTAT,8HPRINTSMA)
      CALL FTEKCK(IPRTSM,8HPRINTSMA,0,IPRTSM,0,2)
      IPRSAC=0
      IF(IPRTSM.EQ.0)IPRSAC=-1
      IF(IPRTSM.EQ.1)IPRSAC=1

C
C  TECHNIQUE FROST - NO ARGUMENTS
cew added for ncrfc
C
C  VALUE OF 0 FOR TECHNIQUE GIVES VALUE OF  1 IN /FSACPR/
C  VALUE OF 1 FOR TECHNIQUE GIVES VALUE OF  0 IN /FSACPR/
C
      CALL HPAST (8HFROST   ,IFROST,ISTAT)
      IF (ISTAT.GT.0) CALL FPHPWN (ISTAT,8HFROST   )
      CALL FTEKCK (IFROST,8HFROST   ,0,IFROST,0,1)
C
      NOFRZE=0
      IF (IFROST.EQ.0) NOFRZE=1
C
C
C  TECHNIQUE MODWARN - NO ARGUMENTS
cew added for ssarr res mods
C
      CALL HPAST (8HMODWARN ,MODWRN,ISTAT)
      IF (ISTAT.GT.0) CALL FPHPWN (ISTAT,8HMODWARN )
      CALL FTEKCK (MODWRN,8HMODWARN ,1,MODWRN,0,1)

      IF(IBUG.EQ.1)WRITE(IODBUG,905)NOPROT,IPLHY,IPRHY,NOSNOW,IUPWE,
     1  IUPSC,IPRSNW,IPRSAC,MODWRN,METRIC
  905 FORMAT(1H0,5X,'*** IN EILSGO - NOPROT,IPLHY,IPRHY,NOSNOW,IUPWE,',
     1  'IUPSC,IPRSNW,IPRSAC,MODWRN,METRIC='/11X,10I11)
C
C   TECHNIQUE PERMWRIT
C
      CALL HPAST(8HPERMWRIT,IPERM,ISTAT)
      IF(ISTAT.NE.0) CALL FPHPWN(ISTAT,8HPERMWRIT)
      CALL FTEKCK(IPERM,8HPERMWRIT,0,IPERM,0,1)
C
C   TECHNIQUE PERMDATE
C
      CALL HPASTA (8HPERMDATE,LIARGS,IDATE,NWORDS,IARGS,ISTAT)
      IF(ISTAT.NE.0) CALL FPHPWN(ISTAT,8HPERMDATE)
      CALL FARGCK(IFDATE(1),8HPERMDATE,8HMONTH   ,0,IARGS(1),0,12)
      CALL FARGCK(IFDATE(2),8HPERMDATE,8HDAY     ,0,IARGS(2),0,31)
      CALL FARGCK(IFDATE(3),8HPERMDATE,8HYEAR    ,0,IARGS(3),0,1999)
      CALL FARGCK(IFDATE(4),8HPERMDATE,8HHOURMIN ,0,IARGS(4),0,2359)
      CALL FARGCK(IFDATE(5),8HPERMDATE,8HSECMLSEC,0,IARGS(5),0,5959)
C
C   TECHNIQUE CRITERIA
C
      CALL HPASTA (8HCRITERIA,LIARGS,ICRIT,NWORDS,IARGS,ISTAT)
      IF(ISTAT.NE.0) CALL FPHPWN(ISTAT,8HCRITERIA)
      CALL FTEKCK(ICRIT,8HCRITERIA,0,ICRIT,0,1)
      CALL HGTSTR (1,IARGS(1),VTYPE,IFL,ISTAT)
      IF(ISTAT.EQ.0) GO TO 40
      WRITE(IPR,602) ISTAT
      CALL ERROR
      GO TO 50
   40 CONTINUE
      DO 45 I=1,MAXVAR
      IF(VTYPE.NE.VARTYP(I)) GO TO 45
      IOVAR=I
      GO TO 60
   45 CONTINUE
   50 ICRIT=0
      GO TO 100
   60 CALL FARGCK(KODSEG,8HCRITERIA,8HKODE     ,0,IARGS(4),0,2)
      CALL UMEMOV(IARGS(5),VALSEG,1)
  100 CONTINUE
C
C   TECHNIQUE VAROFF
C
      CALL HPASTA (8HVAROFF  ,LIARGS,IVAL,NWORDS,IARGS,ISTAT)
      IF(ISTAT.NE.0) CALL FPHPWN(ISTAT,8HVAROFF  )
C
      DO 110 I=1,MAXVAR
      DO 105 J=1,MAXWIN
      K=(I-1)*MAXWIN+J
      CALL FARGCK(JVAR(J,I),8HVAROFF  ,8HARG     ,0,IARGS(K),0,1)
  105 CONTINUE
  110 CONTINUE
C
C   TECHNIQUE DISPOFF
C
      CALL HPASTA (8HDISPOFF ,LIARGS,ID,NWORDS,IARGS,ISTAT)
      IF(ISTAT.NE.0) CALL FPHPWN(ISTAT,8HDISPOFF )
      DO 140 I=1,MAXVAR
      DO 130 J=1,MAXDSP
      K=(I-1)*MAXDSP+J
      CALL FARGCK(JDSPS(I,J),8HDISPOFF ,8HARG     ,0,IARGS(K),0,1)
  130 CONTINUE
  140 CONTINUE
C
C   TECHNIQUE FREQPLOT
C
      CALL HPAST(8HFREQPLOT,IFPLT,ISTAT)
      IF(ISTAT.NE.0) CALL FPHPWN(ISTAT,8HFREQPLOT)
      CALL FTEKCK(IFPLT,8HFREQPLOT,1,IFPLT,0,1)
C
C   TECHNIQUE BLENPREC
C
      CALL HPASTA (8HBLENPREC,LIARGS,JBLENP,NWORDS,IARGS,ISTAT)
      IF(ISTAT.NE.0) CALL FPHPWN(ISTAT,8HBLENPREC)
      CALL FTEKCK(JBLENP,8HBLENPREC,0,JBLENP,0,1)
      IF(JBLENP.EQ.0) GO TO 200
C
      CALL UMEMOV(IARGS(1),PWT1,1)
      CALL UMEMOV(IARGS(2),PWT2,1)
      IF(PWT1.GT.1.0.OR.PWT1.LT.0.0) GO TO 180
      IF(PWT2.GT.1.0.OR.PWT2.LT.0.0) GO TO 180
C
      CALL FARGCK(IPWTLN,8HBLENPREC,8HWTLENGTH,0,IARGS(3),0,360)
      CALL FARGCK(IPBLEN,8HBLENPREC,8HBLENGTH ,0,IARGS(4),0,30)
      GO TO 200
  180 JBLENP=0
C
C   TECHNIQUE BLENTEMP
C
  200 CALL HPASTA (8HBLENTEMP,LIARGS,JBLENT,NWORDS,IARGS,ISTAT)
      IF(ISTAT.NE.0) CALL FPHPWN(ISTAT,8HBLENTEMP)
      CALL FTEKCK(JBLENT,8HBLENTEMP,0,JBLENT,0,1)
      IF(JBLENT.EQ.0) GO TO 300
      CALL UMEMOV(IARGS(1),TWT1,1)
      CALL UMEMOV(IARGS(2),TWT2,1)
      IF(TWT1.GT.1.0.OR.TWT1.LT.0.0) GO TO 280
      IF(TWT2.GT.1.0.OR.TWT2.LT.0.0) GO TO 280
      CALL FARGCK(ITWTLN,8HBLENTEMP,8HWTLENGTH,0,IARGS(3),0,360)
      CALL FARGCK(ITBLEN,8HBLENTEMP,8HBLENGTH ,0,IARGS(4),0,30)
      GO TO 300
  280 JBLENT=0
  300 CONTINUE
C
C   TECHNIQUE FCPRECP
C
      CALL HPAST(8HFCPRECP ,IFUTP,ISTAT)
      IF(ISTAT.NE.0) CALL FPHPWN(ISTAT,8HFCPRECP )
      CALL FTEKCK(IFUTP,8HFCPRECP ,0,IFUTP,0,1)
C
C   TECHNIQUE REGULATE
C
      CALL HPAST(8HREGULATE,IREG,ISTAT)
      IF(ISTAT.NE.0) CALL FPHPWN(ISTAT,8HREGULATE)
      CALL FTEKCK(IREG,8HREGULATE,1,IREG,0,1)
C
C   TECHNIQUE ESPINDIR - SET ESP INPUT DIRECTORY
      TECHNAME='ESPINDIR'
C
      CALL HPASTA (TECHNAME,LIARGS,IVAL,NWORDS,IARGS,ISTAT)
      IF(ISTAT.NE.0) CALL FPHPWN (ISTAT,TECHNAME)
C
cew get dirname from iargs    
      lmax=len(esp_in_dir)/4
      CALL HGTSTR (lmax,IARGS,esp_in_dir,indirlen,istat)
      if (istat.eq.1) then 
         write (ipr,305) TECHNAME,len(esp_in_dir)
305   FORMAT ('0**ERROR** ',a,' TECHNIQUE ARGUMENT IS LONGER THAN ',I3,
     +   ' CHARACTERS.')
         call error
         esp_in_dir=' '
         else
            call ulenth (esp_in_dir,len(esp_in_dir),indirlen)       
         endif
C
C   TECHNIQUE ESPOTDIR - SET ESP OUTPUT DIRECTORY
      TECHNAME='ESPOTDIR'
C
      CALL HPASTA (TECHNAME,LIARGS,IAVL,NWORDS,IARGS,ISTAT)
      IF(ISTAT.NE.0) CALL FPHPWN (ISTAT,TECHNAME)
C
cew get dirname from iargs
      lmax=len(esp_out_dir)/4
      CALL HGTSTR (lmax,IARGS,esp_out_dir,ioutdirlen,istat)
      if (istat.eq.1) then 
         write(ipr,305) TECHNAME,len(esp_out_dir)
         call error
         esp_out_dir=' '
         else
            call ulenth (esp_out_dir,len(esp_out_dir),ioutdirlen)       
         endif
C  
      OPNAME(1)=OPHOLD(1)
      OPNAME(2)=OPHOLD(2)
      IOPNUM=IOPHLD
C
      IF(ITRACE.GT.0)WRITE(IODBUG,601)
  601 FORMAT(' EXIT EILSGO')
C
      RETURN
      END
