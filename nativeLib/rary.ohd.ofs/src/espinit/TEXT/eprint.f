C MEMBER EPRINT
C  (from old member EEPRINT)
C
      SUBROUTINE EPRINT(PTYPE,NAME,P,MP,T,MT,TS,MTS,PESP,MPESP,
C                             LAST UPDATE: 06/08/95.13:44:31 BY $WC30EW
C
     *SPESP,MSPESP,TSESP,MTSESP,IPUNCH)
C
C ......................................................................
C
C          PRINT SEGMENT SUBROUTINE
C
C THIS SUBROUTINE IS THE DRIVER FOR PRINTING INFO ABOUT SEGMENT(S)
C FOR AN ENTIRE FORECAST OR CARRYOVER GROUP OR AN INDIVIDUAL
C SEGMENT.
C THE PROCEDURE USED IS CALL FCORDR TO SET UP THE RECORD NUMBERS ON
C FORECAST COMPONENT. THEN, FOR EACH RECORD NUMBER CALL EPRSEG TO SET
C UP CALLS TO GET THE SEGMENT INFO AND PRINT IT.
C
C
C SUBROUTINE ORIGINALLY BY :
C   ED VANBLARGAN - HRL - JULY, 1981
C
C ......................................................................
C
C   VARIABLES:
C NAME-NAME OF GROUP OR SEGMENT(2A4)
C PTYPE-TYPE OF GROUP OR SEGMENT
C IDTYP-NUMBER INDICATOR FOR PTYPE
C IFREC-RECORD NUMBER ON FORECAST FILE
C
      INTEGER T(1)
C
      DIMENSION NAME(2),PTYPE(2),P(1),TS(1),PESP(1),SPESP(1),TSESP(1),
     * SBNAME(2),OLDOPN(2)
C
      INCLUDE 'common/fdbug'
      INCLUDE 'common/ionum'
      INCLUDE 'common/fcrunc'
      INCLUDE 'common/where'
C
C    ================================= RCS keyword statements ==========
      CHARACTER*68     RCSKW1,RCSKW2
      DATA             RCSKW1,RCSKW2 /                                 '
     .$Source: /fs/hseb/ob72/rfc/ofs/src/espinit/RCS/eprint.f,v $
     . $',                                                             '
     .$Id: eprint.f,v 1.2 1999/01/19 20:25:30 page Exp $
     . $' /
C    ===================================================================
C
C
      DATA INAM,SBNAME/4HEPRT,4HEPRI,4HNT  /
      DATA CGR,FGR,SEG/4HCGRO,4HFGRO,4HSEGM/
C
C SET UP ERROR TRACE FOR THIS ROUTINE IN CB/WHERE/
C
      IOLDOP=IOPNUM
      IOPNUM=0
      DO 10 I=1,2
        OLDOPN(I)=OPNAME(I)
        OPNAME(I)=SBNAME(I)
10    CONTINUE
C
C GET TRACE LEVEL AND DEBUG
C
      IF (ITRACE.GE.1) WRITE(IODBUG,100)
100   FORMAT(1H0,14HEPRINT ENTERED)
      IBUG=IFBUG(INAM)
C
C WRITE HEADING
C
cew Add a print to the punch file for the required header
      IF(IPUNCH.EQ.1)  then
	WRITE(IPR,111) NAME,PTYPE
	write(ipu,*)'THIS IS THE REQUIRED HEADER LINE'
      ENDIF
      IF(IPUNCH.EQ.0) WRITE(IPR,110) NAME,PTYPE
110   FORMAT(1H0,32HSEGMENT INFORMATION FOLLOWS FOR ,2A4,
     *   16H. PRINT TYPE IS ,2A4)
  111 FORMAT(1H0,32HSEGMENT INFORMATION FOLLOWS FOR ,2A4,
     *   16H. PUNCH TYPE IS ,2A4)
C
C CHECK IF WE WANT AN ENTIRE CARRYOVER GROUP, OR FORECAST GROUP,
C OR JUST A SEGMENT.
C
      IDTYP=0
      IF (PTYPE(1).EQ.CGR) IDTYP=1
      IF (PTYPE(1).EQ.FGR) IDTYP=2
      IF (PTYPE(1).EQ.SEG) IDTYP=3
C
      IF (IDTYP.GE.1) GO TO 140
      WRITE (IPR,120)
120   FORMAT(1H0,10X,40H**ERROR** PRINT SEG TYPE IDENTIFIER DOES,
     *54H NOT CONFORM TO ANY ALLOWABLE TYPE. PRINT SEG IGNORED.)
      CALL ERROR
      GO TO 999
C
C CALL FCORDER WHICH SETS UP COMMON BLOCK FCRUNC WHICH GIVES
C RECORDS AND ORDER THEY ARE STORED ON THE FORECAST FILES.
C
140   CALL FCORDR(IDTYP,NAME,IER,P,MP)
C
      IF (IER.EQ.0) GO TO 200
      WRITE (IPR,150)
150   FORMAT(1H0,10X,45H**ERROR** IN SUBROUTINE FCORDR-PROGRAM QUITS.)
      GO TO 999
C
C LOOP THRU EACH RECORD NUMBER TO BE CHECKED AND CALL SUBROUTINE EPRSEG
C FOR EACH ONE. ALSO CLOSE CALB FILES AFTER EACH SEGMENT CALL.
C
200   DO 300 ISEGEX=1,NSEGEX
        IFREC=IRSGEX(ISEGEX)
        CALL EPRSEG(IFREC,P,MP,T,MT,TS,MTS,PESP,MPESP,SPESP,
     *  MSPESP,TSESP,MTSESP,IPUNCH)
C CLOSE CALB FILES
CEW CHANGED CLOSED TO CCLOSL
      CALL CCLOSL
300   CONTINUE
C
C ............DEBUG TIME........................
C
      IF (IBUG.EQ.0) GO TO 999
C
      WRITE(IODBUG,910) IDTYP,NAME,PTYPE,IFREC,NSEGEX,
     *   (IRSGEX(I),I=1,NSEGEX)
910   FORMAT(1H0,6HIDTYP=,I2,6H NAME=,2A4,7H PTYPE=,2A4,7H IFREC=,
     *   I3,8H NSEGEX=,I5 / 1X,13HIRSGEX ARRAY:,(27I4))
C ............................................
C
C SET ERROR TRACE BACK THE WAY IT WAS IN CB/WHERE/
C
999   IOPNUM=IOLDOP
      OPNAME(1)=OLDOPN(1)
      OPNAME(2)=OLDOPN(2)
C
C
      RETURN
      END
