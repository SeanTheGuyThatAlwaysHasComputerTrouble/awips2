C MODULE URCRRS
C-----------------------------------------------------------------------
C
      SUBROUTINE URCRRS (LPARAY,PARAY,LRRBUF,IRRBUF,LORRSO,IORRSO,
     *   LORRSN,IORRSN,ISTAT)
C
C   THIS ROUTINE WILL REORDER RRS PARAMETER AND DATA RECORDS
C   FOR THE STATIONS THAT ARE IN THE ORRS PARAMETER RECORD.
C
C   ARGUMENT LIST:
C
C       NAME     TYPE   I/O    DIM       DESCRIPTION
C       ------   ----   ---    ------    -----------
C       LPARAY    I*4    I       1       LENGTH OF ARRAY PARAY
C       PARAY     R*4    I     LPARAY    PARAMETER ARRAY
C       LRRBUF    I*4    I       1       LENGTH OF ARRAY RRBUF
C       IIRBUF    R*4    I     LRRBUF    RRS DATA RECORD
C       LORRSO    I*4    I       1       LENGTH OF ARRAY ORRSO
C       IORRSO    I*2    I     LORRSO    OLD ORRS PARAMETER RECORD
C       LORRSN    I*4    I       1       LENGTH OF ARRAY ORRSN
C       IORRSN    I*2    I     LORRSN    NEW ORRS PARAMETER RECORD
C
      CHARACTER*4 RTYPE,TYPE,PRTYPE
      CHARACTER*4 XRRS/'RRS '/
      CHARACTER*4 XORRS/'ORRS'/
      CHARACTER*8 STAID,PRSTID
C
      INTEGER*2 IORRSO(LORRSO)
      INTEGER*2 IORRSN(LORRSN)
      PARAMETER (LSIBUF=128)
      INTEGER*2 ISIBUF(LSIBUF)
C
      DIMENSION PARAY(LPARAY)
      DIMENSION IRRBUF(LRRBUF)
C
      INCLUDE 'uiox'
      INCLUDE 'udebug'
      INCLUDE 'udatas'
      INCLUDE 'ucommon/uordrx'
      INCLUDE 'pdbcommon/pdrrsc'
      INCLUDE 'pdbcommon/pdsifc'
      INCLUDE 'pdbcommon/pdi2max'
      INCLUDE 'pppcommon/ppdtdr'
      INCLUDE 'urcommon/urrrsc'
      INCLUDE 'urcommon/ursifc'
      INCLUDE 'urcommon/urhshc'
      INCLUDE 'urcommon/urhshi'
      INCLUDE 'urcommon/urunts'
      INCLUDE 'urcommon/urcdta'
      INCLUDE 'urcommon/urppdt'
C
C    ================================= RCS keyword statements ==========
      CHARACTER*68     RCSKW1,RCSKW2
      DATA             RCSKW1,RCSKW2 /                                 '
     .$Source: /fs/hseb/ob72/rfc/ofs/src/reorder/RCS/urcrrs.f,v $
     . $',                                                             '
     .$Id: urcrrs.f,v 1.4 2002/10/10 15:52:02 dws Exp $
     . $' /
C    ===================================================================
C
C
      IF (IPDTR.GT.0) THEN
         CALL SULINE (IOGDB,1)
         WRITE (IOGDB,*) 'ENTER URCRRS'
         ENDIF
C
      IBUG=0
C
      ISTAT=0
C
      LIDX=LRLURI*2
      NFRECN=LFREE1
C
      CALL SULINE (LP,2)
      WRITE (LP,390)
C
      IF (IBUG.EQ.1) THEN
C     PRINT SIF RECORD INFORMATION FROM OLD FILE
         IAMORD=0
         IRESET=0
         WRITE (IOGDB,*) 'IAMORD=',IAMORD
         CALL PDDSIF (LSIBUF,ISIBUF,IRESET,LPARAY,PARAY)
         ENDIF
C
C  CHECK IF RRS PARAMETER TYPE DEFINED IN OLD FILES
      IAMORD=0
      IDXOLD=IPCKDT(XRRS)
      IF (IDXOLD.EQ.0) THEN
         CALL SULINE (LP,2)
         WRITE (LP,400) 'OLD'
         GO TO 360
         ENDIF
C
C  CHECK IF ANY RRS PARAMETER RECORDS IN OLD FILES
      IF (IPDTDR(5,IDXOLD).EQ.0) THEN
         CALL SULINE (LP,2)
         WRITE (LP,410) 'OLD'
         GO TO 370
         ENDIF
C
C  GET ORRS PARAMETER RECORD
20    CALL UMEMST (IBLNK,STAID,2)
      IPTR=0
      IPTRNX=0
      MORRSO=LORRSO/2
      NOORRS=0
      IAMORD=0
      CALL RPPREC (STAID,XORRS,IPTR,MORRSO,IORRSO,NORRSO,IPTRNX,ISTAT)
      IF (ISTAT.EQ.2.OR.ISTAT.EQ.4) GO TO 60
      IF (ISTAT.EQ.0) GO TO 30
         CALL SRPPST (STAID,XORRS,IPTR,MORRSO,NORRSO,IPTRNX,ISTAT)
         GO TO 360
30    NPOS=NORRSO*2
      IF (LORRSN.GE.NPOS) GO TO 40
         CALL SUERRS (LP,2,-1)
         WRITE (LP,420) NPOS,LORRSN
         GO TO 360
40    DO 50 I=1,NPOS
         IORRSN(I)=IORRSO(I)
50       CONTINUE
      IBEGIN=11
      IPOS=IBEGIN
      CALL SUBSTR (IORRSO(9),1,4,REAL,1)
      MRSSTA=REAL
      GO TO 70
C
C  ORRS PARAMETER RECORD DOES NOT EXIST
60    CALL SULINE (LP,2)
      WRITE (LP,430)
      ISTAT=0
      NOORRS=1
      IPNTR=0
C
70    NPASS=1
      CALL SULINE (LP,2)
      WRITE (LP,440)
      NUMSIF=0
      NUMRRS=0
      NRSSTA=0
      NPRIME=0
      NFREEP=0
C
80    IF (NOORRS.EQ.1) GO TO 90
C
C  GET RECORD NUMBER FROM ORRS PARAMETER RECORD
      IPNTR=IORRSO(IPOS)
C
C  CHECK RECORD NUMBER
      NRSSTA=NRSSTA+1
      IF (IPDDB.GT.0) THEN
         CALL SULINE (IOGDB,1)
         WRITE (IOGDB,*) 'NRSSTA=',NRSSTA,
     *      ' MRSSTA=',MRSSTA,
     *      ' IPOS=',IPOS,
     *      ' IPNTR=',IPNTR
         ENDIF
      IF (IPNTR.GE.IPDTDR(3,IDXOLD).AND.IPNTR.LE.IPDTDR(4,IDXOLD))
     *   GO TO 90
         WRITE (LP,460) IPNTR
         CALL SUERRS (LP,2,-1)
         WRITE (LP,460) IPNTR
         CALL SULINE (LP,1)
         WRITE (LP,470) IPDTDR(3,IDXOLD),IPDTDR(4,IDXOLD)
         GO TO 220
C
C  READ RRS PARAMETER RECORD
90    CALL UMEMST (IBLNK,STAID,2)
      IAMORD=0
      CALL RPPREC (STAID,XRRS,IPNTR,LPARAY,PARAY,NPARAY,IPTRNX,ISTAT)
      IF (ISTAT.NE.0) THEN
         CALL SRPPST (STAID,XRRS,IPNTR,LPARAY,NPARAY,IPTRNX,ISTAT)
         CALL SULINE (LP,1)
         GO TO 220
         ENDIF
C
C  SET NUMBER OF DATA TYPES
      NTYPES=PARAY(12)
      IF (IPDDB.GT.0) THEN
         CALL SULINE (IOGDB,1)
         WRITE (IOGDB,*) 'NTYPES=',NTYPES
         ENDIF
C
C  GET STATION INFORMATION RECORD
      IAMORD=1
      CALL PDFNDR (STAID,LSIBUF,IFINDC,ISCREC,ISIBUF,IFREE,ISTAT)
      IF (IFINDC.GT.0) GO TO 110
         WRITE (LP,490) STAID
         CALL SUERRS (LP,2,-1)
         ISTAT=1
         GO TO 220
110   IF (ISTAT.NE.0) GO TO 320
      NUMID=ISIBUF(6)
      IF (NUMID.EQ.0) GO TO 130
      CALL PDFNDI (NUMID,LSIBUF,IFINDI,ISIREC,ISIBUF,IFREE,ISTAT)
      IF (IFINDI.GT.0) GO TO 120
         WRITE (LP,500) NUMID
         CALL SUERRS (LP,2,-1)
         ISTAT=1
         GO TO 220
120   IF (ISTAT.NE.0) GO TO 320
      IF (ISCREC.NE.ISIREC) GO TO 280
C
C  CHECK NUMBER OF RRS DATA TYPES DEFINED
130   NRRS=ISIBUF(10)
      IF (IPDDB.GT.0) THEN
         CALL SULINE (IOGDB,1)
         WRITE (IOGDB,*) 'NRRS=',NRRS
         ENDIF
      IF (NRRS.GT.0) GO TO 140
         WRITE (LP,530) STAID
         CALL SUERRS (LP,2,-1)
         IWURFL=1
         GO TO 220
C
C  PROCESS EACH RRS DATA TYPE
140   JPOS=11
      IUPDTE=0
      DO 190 I=1,NRRS
C     CHECK IF THIS AN RRS TYPE
         CALL UMEMOV (ISIBUF(JPOS),RTYPE,1)
         IRX=IPDCKR(RTYPE)
         IF (IPDDB.GT.0) THEN
            CALL SULINE (IOGDB,1)
            WRITE (IOGDB,*) 'RTYPE=',RTYPE,' IRX=',IRX
            ENDIF
         IF (IRX.EQ.0) GO TO 180
C     FIND DATA TYPE IN RRS PARAMETER ARRAY
         DO 150 ITYPES=1,NTYPES
            CALL UMEMOV (PARAY(14+ITYPES),TYPE,1)
            IF (TYPE.EQ.RTYPE) GO TO 160
150         CONTINUE
         WRITE (LP,540) RTYPE,STAID
         CALL SUERRS (LP,2,-1)
         GO TO 180
C     CHECK IF TIME SERIES IS TO BE GENERATED
160      INTRVL=PARAY(14+ITYPES+NTYPES*2)
         IF (IPDDB.GT.0) THEN
            CALL SULINE (IOGDB,1)
            WRITE (IOGDB,*) 'INTRVL=',INTRVL
            ENDIF
         IF (NPASS.EQ.1.AND.INTRVL.LT.0) GO TO 180
         IF (NPASS.EQ.2.AND.INTRVL.GT.0) GO TO 180
         IRSREC=ISIBUF(JPOS+2)
         IUPDTE=1
C     READ RRS DATA RECORD FOR THIS STATION
         CALL PDRRRR (IRSREC,LRCPDR,LRRBUF,IRRBUF,ISTAT)
         IF (ISTAT.EQ.2) GO TO 300
         IF (ISTAT.NE.0) GO TO 320
         CALL UMEMOV (IRRBUF(2),PRSTID,2)
         IF (IBUG.EQ.1) WRITE (LP,*) 'PRSTID=',PRSTID,
     *      ' PRTYPE=',PRTYPE
         IF (PRSTID.NE.STAID) THEN
            CALL UEROR (LP,0,-1)
            WRITE (LP,570) PRSTID,IRSREC,RTYPE,STAID
            ISTAT=1
            GO TO 180
            ENDIF
C     CHECK FOR RRS FREEPOOL RECORDS
         IF (IRRBUF(13).EQ.0) GO TO 170
            IREC=IRRBUF(13)
C        WRITE FREEPOOL RECORDS TO NEW FILE
            CALL URFPRD (STAID,IREC,NFRECN,NFREC1,ISTAT)
            IF (ISTAT.NE.0) GO TO 340
            IRRBUF(13)=NFREC1
            NFREEP=NFREEP+1
C     COMPUTE NUMBER OF RRS PRIMARY RECORDS
170      NRECS=IUNRCD(IRRBUF(1),LRLURS)
C     CHECK FOR ENOUGH RECORDS IN FILE
         IF (LRRSXR+1+NRECS.LE.MAXRSF) GO TO 175
            WRITE (LP,575) MAXRSF,RTYPE,STAID
            CALL SUERRS (LP,2,-1)
            ISTAT=1
            GO TO 360
175      NR=NRECS*LRLURS
C     SET LENGTH OF LONGEST RRS PRIMARY RECORD
         IF (NR.GT.MXSIZE) MXSIZE=NR
C     WRITE RRS PRIMARY RECORDS TO NEW FILE
         IREC=LRRSXR+1
         IF (IPDDB.EQ.1) THEN
            CALL SULINE (IOGDB,1)
            WRITE (IOGDB,*) 'STAID=',STAID,
     *         ' RTYPE=',RTYPE,
     *         ' KURRRS=',KURRRS,
     *         ' IREC=',IREC,
     *         ' NRECS=',NRECS,
     *         ' IRRBUF(13)=',IRRBUF(13)
            ENDIF
         CALL WVLRCD (KURRRS,IREC,NRECS,IRRBUF,LRLURS,ISTAT)
         IF (ISTAT.NE.0) GO TO 320
         NPRIME=NPRIME+1
CSCV  9/2002 IF IREC IS GREATER THEN I2MAX THEN CONVERT IREC TO A 
C     NEGATIVE NUMBER TO STORE IN THE ISIBUF ARRAY (AN I2 ARRAY). 
C     IF IREC IS GREATER THEN 2*I2MAX THEN YOU HAVE USED ALL POSITIVE 
C     AND NEGATIVE NUMBERS IN THE ISIBUF ARRAY AND CAN NOT ADD ANY 
C     MORE RRS RECORDS. 
         IREC2=IREC
	 IF (IREC2.GT.2*I2MAX) THEN
C        INTEGER*4 VALUE CAN NOT BE STORED AS INTEGER*2
            WRITE (LP,600) STAID
            CALL SUERRS (LP,2,-1)
            ISTAT=1
            GO TO 180
            ENDIF
         IF (IREC2.GT.I2MAX) IREC2=IREC2-2*I2MAX
C     UPDATE RRS RECORD NUMBER IN SIF RECORD
         ISIBUF(JPOS+2)=IREC2
         IF (IPDDB.EQ.1) THEN
            CALL SULINE (IOGDB,1)
            WRITE (IOGDB,*) 'STAID=',STAID,
     *         ' RTYPE=',RTYPE,
     *         ' I2MAX=',I2MAX,
     *         ' IREC=',IREC,
     *         ' IREC2=',IREC2
            ENDIF
C     SET NUMBER OF LAST USED RRS RECORD
         LRRSXR=LRRSXR+NRECS
         IF (IPDDB.GT.0) THEN
            CALL SULINE (IOGDB,1)
            WRITE (IOGDB,*) 'LRRSXR=',LRRSXR
            ENDIF
C     GET NEXT RRS TYPE FROM STATION LIST RECORD
180      JPOS=JPOS+3
190      CONTINUE
C
      IF (NPASS.EQ.2) GO TO 210
C
C  WRITE RRS PARAMETER RECORD TO NEW FILE
      IRECNW=0
      IAMORD=1
      CALL WPPREC (STAID,XRRS,NPARAY,PARAY,IRECNW,ISTAT)
      IF (ISTAT.NE.0) THEN
         CALL SWPPST (STAID,XRRS,NPARAY,IRECNW,ISTAT)
         GO TO 360
         ENDIF
      NUMRRS=NUMRRS+1
C
C  UPDATE RECORD NUMBER IN THE GENL PARAMETER RECORD
      CALL URUDGL (STAID,XRRS,IRECNW,LPARAY,PARAY,ISTAT)
      IF (ISTAT.NE.0) GO TO 360
C
      IF (NOORRS.EQ.1) GO TO 210
C
C  UPDATE RECORD LOCATION IN ORRS PARAMETER ARRAY
      IORRSN(IPOS)=IRECNW
C
C  CHECK IF SIF RECORD NEED TO BE UPDATED
210   IF (IUPDTE.EQ.0) GO TO 220
C
C  WRITE SIF RECORD TO NEW FILE
      NWDS=ISIBUF(1)
      NRECS=IUNRCD(NWDS,LIDX)
      CALL WVLRCD (KURSIF,ISCREC,NRECS,ISIBUF,LRLURI,ISTAT)
      IF (ISTAT.NE.0) GO TO 320
      NUMSIF=NUMSIF+1
C
C  CHECK IF LAST RRS PARAMETER RECORD PROCESSED
220   IF (NOORRS.EQ.0) GO TO 230
      IF (IPTRNX.EQ.0) GO TO 240
         IPNTR=IPTRNX
         GO TO 90
230   IF (NRSSTA+1.GT.MRSSTA) GO TO 240
         IPOS=IPOS+1
         GO TO 80
C
C  PRINT INFORMATION FOR THIS PASS
240   CALL SULINE (LP,2)
      WRITE (LP,620) NUMSIF
      CALL SULINE (LP,2)
      WRITE (LP,630) NPRIME
      CALL SULINE (LP,2)
      WRITE (LP,640) NFREEP
C
C  CHECK IF LAST PASS MADE
      NPASS=NPASS+1
      IF (NPASS.GT.2) GO TO 260
         CALL SULINE (LP,2)
         WRITE (LP,650) NUMRRS
         CALL SULINE (LP,2)
         WRITE (LP,660)
         NRSSTA=0
         NUMSIF=0
         NPRIME=0
         NFREEP=0
         IF (NOORRS.EQ.0) GO TO 250
            IPNTR=0
            GO TO 90
250      IPOS=IBEGIN
         GO TO 80
C
C  WRITE ORRS PARAMETER RECORD TO NEW FILE
260   CALL UMEMST (IBLNK,STAID,2)
      NORRSN=NORRSO
      IRCNEW=0
      IAMORD=1
      CALL WPPREC (STAID,XORRS,NORRSN,IORRSN,IRCNEW,ISTAT)
      IF (ISTAT.NE.0) THEN
         CALL SWPPST (STAID,XORRS,NORRSN,IRCNEW,ISTAT)
         GO TO 360
         ENDIF
C
C  UPDATE RECORD NUMBER OF NEXT AVAILABLE FREEPOOL RECORD
      LFREEN=NFRECN
C
      IVAL=1
      CALL SULINE (LP,2)
      WRITE (LP,670) IVAL
C
      IF (IBUG.EQ.1) THEN
C     PRINT SIF RECORD INFORMATION FROM NEW FILE
         IAMORD=1
         IRESET=0
         WRITE (IOGDB,*) 'IAMORD=',IAMORD
         CALL PDDSIF (LSIBUF,ISIBUF,IRESET,LPARAY,PARAY)
         ENDIF
C
      GO TO 370
C
C- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C
280   WRITE (LP,290)
      CALL SUERRS (LP,2,-1)
290   FORMAT ('0*** ERROR - IN URCRRS - SYSTEM ERROR READING ',
     *   'SIF RECORD.')
      GO TO 360
C
300   WRITE (LP,310)
      CALL SUERRS (LP,2,-1)
310   FORMAT ('0*** ERROR - IN URCRRS - WORK ARRAY TOO SMALL TO ',
     *   'HOLD RRS DATA.')
      GO TO 360
C
320   WRITE (LP,330)
      CALL SUERRS (LP,2,-1)
330   FORMAT ('0*** ERROR - IN URCRRS - READ OR WRITE ERROR.')
      GO TO 360
C
340   WRITE (LP,350)
      CALL SUERRS (LP,2,-1)
350   FORMAT ('0*** ERROR - IN URCRRS - ACCESSING FREEPOOL RECORD.')
C
C  SET ERROR FLAG
360   IWURFL=1
C
370   IF (IPDTR.GT.0) THEN
         CALL SULINE (IOGDB,1)
         WRITE (IOGDB,*) 'EXIT URCRRS : ISTAT=',ISTAT
         ENDIF
C
      RETURN
C
C- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C
390   FORMAT ('0*** NOTE - BEGIN TO REORDER  << RRS PARAMETER AND ',
     *   'DATA >>  RECORDS.')
400   FORMAT ('0*** NOTE - RRS PARAMETER TYPE NOT DEFINED IN THE ',
     *   A4,' PREPROCESSOR PARAMETRIC DATA BASE.')
410   FORMAT ('0*** NOTE - NO RRS PARAMETER RECORDS DEFINED IN THE ',
     *   A4,' PREPROCESSOR PARAMETRIC DATA BASE.')
420   FORMAT ('0*** ERROR - NUMBER OF WORDS IN OLD ORRS PARAMETER ',
     *   'ARRAY (',I5,') EXCEEDS NUMBER OF WORDS IN ARRAY FOR NEW ',
     *   'ORRS PARAMETER ARRAY (',I5,').')
430   FORMAT ('0*** NOTE - PARAMETER TYPE ORRS NOT FOUND. RRS ',
     *   'PARAMETER RECORDS WILL BE COPIED AND NOT REORDERED.')
440   FORMAT ('0*** BEGIN TO REORDER ALL RRS PARAMETER RECORDS ',
     *   'PLUS RRS DATA RECORDS FOR THOSE THAT WILL HAVE ',
     *   'TIME SERIES GENERATED.')
460   FORMAT ('0*** ERROR - THE RRS PARAMETER RECORD NUMBER (',
     *   I6,') OBTAINED FROM THE ORRS PARAMETER RECORD IS ',
     *   'OUT OF THE ALLOWABLE')
470   FORMAT (13X,'RANGE OF ',I5,' THRU ',I5,'.')
490   FORMAT ('0*** ERROR - IN URCRRS - SIF RECORD FOR STATION ',
     *   A,' NOT FOUND IN NEW PREPROCESSOR DATA BASE.')
500   FORMAT ('0*** ERROR - IN URCRRS - SIF RECORD FOR STATION ',
     *   I6,' NOT FOUND IN NEW PREPROCESSOR DATA BASE.')
530   FORMAT ('0*** ERROR - IN URCRRS - NO DATA TYPES FOUND IN SIF ',
     *   'RECORD FOR STATION ',A,'.')
540   FORMAT ('0*** ERROR - RRS TYPE ',A4,' NOT FOUND IN RRS ',
     *   'PARAMETER ARRAY FOR STATION ',A,'.')
570   FORMAT ('0**ERROR** STATION ID (',A,
     *   ') IN RRS PRIMARY RECORD ',I6,' IS INCORRECT ',
     *   'FOR DATA TYPE ',A,' FOR STATION ',A,'.')
575   FORMAT ('0*** ERROR - IN URCRRS - MAXIMUM NUMBER OF RRS PRIMARY ',
     *   'RECORDS (',I5,') EXCEEDED PROCESSING ',A4,
     *   ' DATA FOR STATION ',A,'.')
600   FORMAT ('0*** ERROR - IN URCRRS - INVALID INTEGER*2 VALUE ',
     *   'ENCOUNTERED WHEN TRYING TO UPDATE SIF RECORD ',
     *   'FOR STATION ',A,'.')
620   FORMAT ('0*** NOTE - ',I4,' SIF RECORDS HAVE BEEN ',
     *   'SUCCESSFULLY UPDATED.')
630   FORMAT ('0*** NOTE - ',I4,' RRS PRIMARY DATA RECORD GROUPS ',
     *   'SUCCESSFULLY REORDERED.')
640   FORMAT ('0*** NOTE - ',I4,' RRS FREEPOOL DATA RECORD GROUPS ',
     *   'SUCCESSFULLY COPIED.')
650   FORMAT ('0*** NOTE - ',I4,' RRS PARAMETER RECORDS ',
     *   'HAVE BEEN SUCCESSFULLY REORDERED.')
660   FORMAT ('0*** BEGIN TO REORDER RRS DATA RECORDS ',
     *   'THAT WILL NOT HAVE TIME SERIES GENERATED.')
670   FORMAT ('0*** NOTE - ',I4,' ORRS PARAMETER RECORD HAS BEEN ',
     *   'SUCCESSFULLY COPIED.')
C
      END
