C THIS SUBROUTINE ADDS NEW INTERPOLATED CROSS-SECTIONS
C AND THEIR PROPERTIES (RENUMBERING
      SUBROUTINE INTPXS55(PO,JNK,JN,NB,NP,BS,HS,AS,BSL,BSR,ASL,ASR,ASS,
     * FKEC,X,NN,NBT,SLFI,XT,KRCH,DXM,BSS,NCS,SNC,SNM,CM,CML,CMR,
     * YQCM,NQCM,IFXC,NGAGE,NGS,NJFM,NJTO,NIFM,NITO,NJFMT,NJTOT,NIFMT,
     * NITOT,KRCHT,PR,MIXF,MUD1,IRGM,DXR,HCAV,IFCV,XLAT,XLON,FLDSTG,
     * K1,K2,K4,K5,K7,K8,K9,K10,K13,K14,K16,K18,K22,K23,K30)

C
C MR 1954 - 09/2004 FLDWAV Multi-Scenario Enhancement
C
      CHARACTER RTYP*8,STRUC*6,RSON(3)*20
      COMMON/METR55/METRIC
      COMMON/YQUNT55/UYQCM
      COMMON/FLP55/KFLP
      COMMON/LEV55/NLEV,DHLV,NPOND,DTHLV,IDTHLV
      COMMON/MIXX55/MIXFLO,DFR,FRC
      COMMON/M3055/EPSY,EPSQ,EPSQJ,THETA,XFACT
      COMMON/PRES55/KPRES
      COMMON/TKEP55/DTHII,MDT,NDT,DTHS,TFH1
      COMMON/UNTS55/DSTNCE,XLNGTH,FLOW,SAREA,VOLUME,VELCTY,BSLOPE
      COMMON/FDBUG/IODBUG,ITRACE,IDBALL,NDEBUG,IDEBUG(20)
      COMMON/IONUM/IN,IPR,IPU
      COMMON/DTBRK55/DTFMN
      COMMON/NETWK55/NET
      INCLUDE 'common/fldmap55'
      INCLUDE 'common/ofs55'
cc      INCLUDE 'common/opfil55'

      DIMENSION PO(*),NB(K1),BS(K9,K2,K1),HS(K9,K2,K1),AS(K9,K2,K1)
      DIMENSION BSL(K9,K2,K1),BSR(K9,K2,K1),ASL(K9,K2,K1),PR(K9,K2,K1)
      DIMENSION ASR(K9,K2,K1),ASS(K9,K2,K1),BSS(K9,K2,K1),FKEC(K2,K1)
      DIMENSION X(K2,K1),NN(K23,K1),NBT(K1),SLFI(K2,K1),XT(K23,K1)
      DIMENSION KRCHT(K23,K1),KRCH(K2,K1),DXM(K13,K1),NGAGE(K1)
      DIMENSION SNC(K9,K2,K1),SNM(K9,K2,K1),YQCM(K8,K7,K1),NQCM(K1)
      DIMENSION CM(K8,K7,K1),CML(K8,K7,K1),CMR(K8,K7,K1),NGS(K4,K1)
      DIMENSION IFXC(K2,K1),NJFM(K18),NJTO(K18),NIFM(K18),NITO(K18)
      DIMENSION NJFMT(K22),NJTOT(K22),NIFMT(K22),NITOT(K22),MIXF(K1)
      DIMENSION MUD1(K1),IRGM(K13,K1),XLAT(K2,K1),XLON(K2,K1)
      DIMENSION DXR(K13,K1),HCAV(K9,K2,K1),IFCV(K9,K2,K1),FLDSTG(K2,K1)
      CHARACTER*8 SNAME
C
C    ================================= RCS keyword statements ==========
      CHARACTER*68     RCSKW1,RCSKW2
      DATA             RCSKW1,RCSKW2 /                                 '
     .$Source: /fs/hseb/ob72/rfc/ofs/src/fcinit_fldwav/RCS/intpxs55.f,v $
     . $',                                                             '
     .$Id: intpxs55.f,v 1.7 2004/10/27 16:15:01 jgofus Exp $
     . $' /
C    ===================================================================
C
      DATA FT,FT2,XMI,CFS/3.281,10.765,1.6093,35.32/
      DATA SNAME/ 'INTPXS55' /

      CALL FPRBUG(SNAME, 1, 55, IBUG)

      DO 5 J=1,JN
      NT1=NBT(J)-1
      DO 2 I=1,NT1
      X(I,J)=XT(I,J)
      KRCH(I,J)=KRCHT(I,J)
      IRGM(I,J)=0
    2 CONTINUE
      X(NT1+1,J)=XT(NT1+1,J)
    5 CONTINUE

      IF(NLEV.LE.0) GO TO 15
      DO 10 L=1,NLEV
      NJFM(L)=NJFMT(L)
      NIFM(L)=NIFMT(L)
      NJTO(L)=NJTOT(L)
      NITO(L)=NITOT(L)
      JFM=NJFM(L)
      IFM=NIFM(L)
      JTO=NJTO(L)
      ITO=NITO(L)
   10 CONTINUE
C
C  PRINTING SLOPE AND ROUTING TYPE INFORMATION
C------  CHECK SLOPE, COURANT, ELC --------------------------------------
   15 IF(JNK.LT.4 .OR. NET.GE.1) GO TO 540
      IF(IBUG.EQ.1) WRITE(IODBUG,5500) DSTNCE,XLNGTH,DSTNCE,BSLOPE
      IF(IBUG.EQ.1) WRITE(IODBUG,5511)
      RTYP='        '
      DO 5015 J=1,JN
      MIX=MIXF(J)
      NT=NBT(J)
      DO 5010 I=1,NT
      XTI=XT(I,J)*1.0
      HS1I=HS(1,I,J)
      IF(I.EQ.NT) GOTO 5020
      STRUC='      '
      DH=HS1I-HS(1,I+1,J)
      DXCH=ABS(XT(I,J)-XT(I+1,J))
      SL=DH/DXCH
      KRA=ABS(KRCH(I,J))
      KRB=ABS(KRCH(I+1,J))
      IF(KRA.GE.10.AND.KRA.LE.35) SL=0.0
      IF(KRA.GE.10.AND.KRA.LE.34) STRUC='DAM   '
      IF(KRA.EQ.35) STRUC='BRIDGE'
      IF(KRA.GE.10) GOTO 5011
      IF(MIX.EQ.0) RTYP='IMP(SUB)'
      IF(MIX.EQ.1) RTYP='IMP(SUP)'
      IF(MIX.EQ.5) RTYP='IMP(LPI)'
      IF(MIX.EQ.2) RTYP='IMP(MIX)'
      IF(MIX.EQ.3) RTYP='IMP(MIX)'
      IF(MIX.EQ.4) RTYP='IMP(MIX)'
      IF(KRA.EQ.1) RTYP='IMP(DIF)'
      IF(KRA.EQ.4) RTYP='POOL    '
      IF(KRA.EQ.5) RTYP='EXP     '
 5011 IF(I.EQ.1.AND.KRA.GE.10) THEN
        RTYP='POOL    '
        IF(MIX.EQ.0.AND.KRB.EQ.0) RTYP='IMP(SUB)'
        IF(MIX.GE.2.AND.KRB.EQ.0) RTYP='IMP(MIX)'
        IF(MIX.EQ.5.AND.KRB.EQ.0) RTYP='IMP(LPI)'
        IF(MIX.EQ.5.AND.KRB.EQ.6) RTYP='IMP(LPI)'
        IF(MIX.EQ.0.AND.KRB.EQ.1) RTYP='IMP(DIF)'
      ENDIF
 5020 IF(METRIC.EQ.1) THEN
        XTI=XTI/0.6214
        HS1I=HS1I/3.281
        DXCH=DXCH/0.6214
        SL=SL*0.01894
      ENDIF
      IF(I.LT.NT .AND.IBUG.EQ.1) WRITE(IODBUG,5000)
     . J,I,XTI,HS1I,I,DXCH,SL,RTYP,STRUC
      IF(I.EQ.NT .AND.IBUG.EQ.1) WRITE(IODBUG,5000) J,I,XTI,HS1I
 5010 CONTINUE
      IF (J.LT.JN .AND. IBUG.EQ.1) WRITE(IODBUG,*)
 5015 CONTINUE
      IF(IBUG.EQ.1) WRITE(IODBUG,5511)
 5500 FORMAT(//1X,5HRIVER,2X,4HSECT,4X,1HX,5X,9HBED ELEV.,3X,5HREACH,
     *4X,6HLENGTH,4X,5HSLOPE,3X,7HROUTING,2X,7HSTRUCT.,/3X,2HNO,4X,2HNO,
     *4X,A4,5X,A4,7X,2HNO,7X,A4,6X,A4)
 5511 FORMAT(1X,'-------------------------------------------------------
     *---------------------')
 5000 FORMAT(2I5,2F10.2,3X,I5,2F10.2,3X,A8,2X,A6)

C  CHECKING FOR POSSIABLE SUPERCRITICAL CONDITION AND PROVIDE WARNING FOR MIXF(J)=0
C  IRGM(I,J)=I (SUP WARNING)
      IF (NP.LT.0) GOTO 540
      IF (KFLP.GE.1 .OR. KPRES.EQ.1) GOTO 3400
      DO 3220 J=1,JN
      IF (MIXF(J).NE.0) GOTO 3220
      IF (NQCM(J).NE.0 .OR. MUD1(J).EQ.1) GOTO 3220
      KKSUP=0
          DO 3210 I=1,NBT(J)-1
          KRA=KRCH(I,J)
          IF (KRA.NE.0) GOTO 3210
          SLOPB=(HS(1,I,J)-HS(1,I+1,J))/ABS(XT(I,J)-XT(I+1,J))
                DO 3200 K=2,NCS
                HK=HS(K,I,J)
                BK=BS(K,I,J)
                IF (BK.LE.0.0001) GOTO 3200
                RK=AS(K,I,J)/BK
                CMK=CM(K,I,J)
                SLOPC=77000.0*CMK*CMK/(RK**0.333333)
                    IF (SLOPB.GT.SLOPC) THEN
                    KKSUP=KKSUP+1
                    IRGM(KKSUP,J)=I
                    GOTO 3210
                    ENDIF
 3200           CONTINUE
 3210 CONTINUE
      IRGM(NBT(J),J)=KKSUP
      IF (KKSUP.EQ.0) GOTO 3220
      IF(IBUG.EQ.1) WRITE(IODBUG,3201) J
      IF(IBUG.EQ.1) WRITE(IODBUG,3202) (IRGM(KK,J),KK=1,KKSUP)
 3201 FORMAT(/1X,74HWARNING: SUPERCRITICAL FLOW MAY OCCUR AT FOLLOWING C
     .ROSS SECTIONS IN RIVER,I3/10X,33HYOU MAY NEED TO RESET MIXF(J) > 0
     .)
 3202 FORMAT(6X,14I5)
 3220 CONTINUE
C  CHECKING FOR POSSIABLE SUBCRITICAL CONDITION AND PROVIDE WARNING FOR MIXF(J)=1
C  IRGM(I,J)<0 SUB WARNING
      DO 3320 J=1,JN
      IF (MIXF(J).NE.1) GOTO 3320
      IF (NQCM(J).NE.0 .OR. MUD1(J).EQ.1) GOTO 3320
      DO 3310 I=1,NBT(J)-1
      KKSUB=0
      KRA=KRCH(I,J)
      IF (KRA.GE.2) GOTO 3310
      SLOPB=(HS(1,I,J)-HS(1,I+1,J))/ABS(XT(I,J)-XT(I+1,J))
            DO 3300 K=2,NCS
            HK=HS(K,I,J)
            BK=BS(K,I,J)
            IF (BK.LE.0.0001) GOTO 3300
            RK=AS(K,I,J)/BK
            CMK=CM(K,I,J)
            SLOPC=77000.0*CMK*CMK/(RK**0.333333)
                  IF (SLOPB.LT.SLOPC) THEN
                  KKSUB=KKSUB+1
                  IRGM(KKSUB,J)=-I
                  GOTO 3310
                  ENDIF
 3300       CONTINUE
 3310 CONTINUE
      IRGM(NBT(J),J)=-KKSUB
      IF (KKSUB.EQ.0) GOTO 3320
      IF(IBUG.EQ.1) WRITE(IODBUG,3301) J
      IF(IBUG.EQ.1) WRITE(IODBUG,3202) (-1*IRGM(KK,J),KK=1,KKSUB)
 3301 FORMAT(/1X,72HWARNING: SUBCRITICAL FLOW MAY OCCUR AT FOLLOWING CRO
     .SS SECTIONS IN RIVER,I3/10X,38HYOU MAY NEED TO RESET MIXF(J) > OR
     .< 1)
 3320 CONTINUE
C    CHECH DXM BASED ON EXPENSION/CONTRACTION,COURANT CONDITION AND SLOPE CHANGE
C    AND PROVIDE WARNING IF INAPPROPRITE
 3400 KKDXM=0
      RSON(1)='EXP/CON  CRITERIA   '
      RSON(2)='COURANT CONDITION   '
      RSON(3)='ABRUPT SLOPE CHANGE '
      DO 3500 J=1,JN
      IF (MUD1(J).EQ.1) GOTO 3500
      DO 3450 I=1,NBT(J)-1
      DXS=1000.
      DXC=1000.
      DXN=1000.
      DXMI=DXM(I,J)
      IF (DXMI.LT.0.0001) DXMI=1000.0
      ADX=ABS(XT(I,J)-XT(I+1,J))
      KRA=KRCH(I,J)
      IF (KRA.GE.10) GOTO 3450
      IF (DXMI.GT.ADX+0.001) GOTO 3450
C  DXC BASED ON COURANT CONDITION
      SLOPB=(HS(1,I,J)-HS(1,I+1,J))/ADX
      IF (SLOPB.LE.0.01) GOTO 3450
      CC=2.0*(SLOPB)**0.5
      IF (DTHII.GE.0.0001) DXC=CC*DTHII
      IF (DTFMN.LE.DTHII .AND. DTFMN.GE.0.0001) DXC=CC*DTFMN
      IF (DTFMN.GE.0.001 .AND. DTHII.LE.0.0001) DXC=CC*DTFMN
C  DXN BASED ON EXP/CONTRACTION CRITERIA
      NXS=1
      DO 3420 K=2,NCS
      A1=AS(K,I,J)
      A2=AS(K,I+1,J)
      AH=A1
      IF (A2.LT.AH) AH=A2
      MDXM=1.0+2.0*ABS(A1-A2)/AH
      IF (MDXM.GT.NXS) NXS=MDXM
 3420 CONTINUE
      DXN=ADX/NXS
C  DXS BASED ON BOTTOM SLOPE
      IF (I.EQ. NBT(J)-1) GOTO 3430
      IF (AS(1,I,J).GE.10.0) GOTO 3430
      IF (KRCH(I+1,J).GE.10) GOTO 3450
      SLOP2=(HS(1,I+1,J)-HS(1,I+2,J))/ABS(XT(I+1,J)-XT(I+2,J))
      SLOPB=ABS(SLOPB)
      SLOP2=ABS(SLOP2)
      IF (SLOPB.GE.30.0 .AND. SLOPB.GT.2*SLOP2) DXS=SLOP2/SLOPB
      IF (SLOP2.GE.30.0 .AND. SLOP2.GT.2*SLOPB) DXS=SLOPB/SLOP2
 3430 DXREC=AMIN1(DXN,DXC,DXS)
      KR=1
      IF (DXC.LT.DXN .AND. DXC.LT.DXS) KR=2
      IF (DXS.LT.DXN .AND. DXS.LT.DXC) KR=3
      IF (DXMI.LE.DXREC+0.01) GOTO 3450
      KKDXM=KKDXM+1
           IF (METRIC.EQ.1) THEN
             DXMI=DXMI*1.6093
             DXREC=DXREC*1.6093
           ENDIF
      IF (KKDXM.EQ.1 .AND. IBUG.EQ.1) WRITE(IODBUG,3501)
      IF (KKDXM.GE.1 .AND. IBUG.EQ.1) WRITE(IODBUG,3502)
     .  J,I,DXMI,DXREC,RSON(KR)
      IF (KR.EQ.1) DXR(I,J)=DXREC+10000.0
      IF (KR.EQ.2) DXR(I,J)=DXREC+20000.0
      IF (KR.EQ.3) DXR(I,J)=DXREC+30000.0
 3450 CONTINUE
 3500 CONTINUE
      PO(309)=KKDXM+0.01
 3501 FORMAT(//2X,45HWARNING: THE FOLLOWING DXMs SHOULD BE CHANGED,//6X,
     .1HJ,4X,1HI,6X,8HDXM(I,J),3X,11HRECOMMENDED,8X,6HREASON)
 3502 FORMAT(2X,2I5,2F12.3,8X,A20)
C----------------------------------------------------------------------------
C       DETERMINE THE FOLLOWING:
C       X(I,J) -- X-LOCATION OF ALL CROSS-SECTIONS
C       NN(I,J)-- NEW NUMBER OF EACH ORIGINAL X-SECTION
C       NB(J)  -- NEW TOTAL NUMBER OF X-XECTIONS INCLUDING
C                 INTERPOLATED ONES.
  540 CONTINUE
c  move this line to ex55
c...................................
cc      IF (MIXF(1).EQ.5) MIXF(1)=2
c...................................
      DO 90 J=1,JN
      NT=NBT(J)
      ICKVAL=999999
      IF (NT.GT.ICKVAL) THEN
         WRITE (IPR,997) 'NT',NT,ICKVAL
 997     FORMAT ('0**ERROR** IN INTPXS55 - VALUE OF VARIABLE ',A,' (',
     *   I11, ') IS GREATER THAN ',I7,'.')
         CALL ERROR
         GO TO 999
      ENDIF
      NN(1,J)=1
      I=1
      DO 76 K=2,NT
      TL=XT(K,J)-XT(K-1,J)
      KRA=KRCHT(K-1,J)
      TX=DXM(K-1,J)
      IF (TX.LT.0.0001) TX=1000.0
      IF (KRA.GE.10) TX=1000.0
      NX=ABS(TL)/TX+0.05
      IF(NX.EQ.0) NX=1
      ICKVAL=999999
      IF (NX.GT.ICKVAL) THEN
         WRITE (IPR,997) 'NX',NX,ICKVAL
         CALL ERROR
         GO TO 999
      ENDIF
      FNX=TL/NX
      DO 74 L=1,NX
      I=I+1
      X(I,J)=X(I-1,J)+FNX
   74 CONTINUE
      X(I,J)=XT(K,J)
      NN(K,J)=I
   76 CONTINUE
C-------------------
C  Move lat/long info to the correct locations
      IF(NMAP.EQ.0) GO TO 80
      DO 78 I=NT,2,-1
          I2=NN(I,J)-1
          I1=NN(I-1,J)+1
          IF(I1.GT.I2) THEN
            XLAT(I1,J)=XLAT(I,J)
            XLON(I1,J)=XLON(I,J)
          ELSE
            XLAT(I2+1,J)=XLAT(I,J)
            XLON(I2+1,J)=XLON(I,J)
            DO 77 K=I1,I2
              XLAT(K,J)=0.
              XLON(K,J)=0.
   77       CONTINUE
          ENDIF
   78 CONTINUE
C-------------------
   80 DO 85 I=NT,2,-1
          I2=NN(I,J)-1
          I1=NN(I-1,J)+1
           IF(I1.GT.I2) THEN
             FLDSTG(I1,J)=FLDSTG(I,J)
           ELSE
            FLDSTG(I2+1,J)=FLDSTG(I,J)
            DO 82 K=I1,I2
              FLDSTG(K,J)=0.
   82       CONTINUE
           ENDIF
   85 CONTINUE
C-------------------
   90 CONTINUE
      IF (JNK.LT.4) GO TO 83
      IF(IBUG.EQ.1) WRITE(IODBUG,1286)
      IF(IBUG.EQ.1) WRITE(IODBUG,500)
  500 FORMAT(//10X,'NEW INPUT CROSS SECTION NO. AFTER INTERPOLATION')
      DO 92 J=1,JN
      NT=NBT(J)
      IF(IBUG.EQ.1) WRITE(IODBUG,501) J,(NN(I,J),I=1,NT)
   92 CONTINUE
C RENUMBERING INTERNAL BOUNDARIES, GAGE STATION, JUNCTION,
C LATERAL INFLOW, AND LEVEE ETC AFTER INTERPOLATION OF CROSS-SECTIONS

   83 CALL RENO55(NN,PO(LONJUN),NBT,KRCH,PO(LONLAD),PO(LOLAD),
     . PO(LONCM1),PO(LONCM),PO(LOLQ1),PO(LCLQN),PO(LCLQT),PO(LONQL),
     . NGAGE,NGS,PO(LOLROT),PO(LCKRTP),PO(LCKRT1),PO(LCKRTN),PO(LOMRV),
     . PO(LOMRU),PO(LONJUM),PO(LOMPLC),PO(LOMPRV),
     . K1,K2,K4,K5,K7,K10,K16,K23,K30)

C       DETERMINE THE FOLLOWING:
C       X(I,J)--RIVER MILE LOCATION OF INTERPOLATED X-SECTIONS.
      DO 200 J=1,JN
      N=NB(J)
      NQCMJ=NQCM(J)
      NCML=ABS(NQCMJ)
      IF(NCML.EQ.0) NCML=NCS
      NT=NBT(J)
      NTM=NT-1
C       STORE INPUT CHANNEL PROPERTY INTO NEW SECTION AS INPUTTED
C         HS---ELEV. ASSOC. WITH BS
C         BS---TOPWIDTH OF X-SECTION
C         BSL---LEFT FLOOD PLAIN TOP WIDTH OF X-SECTION
C         BSR---RIGHT FLOOD PLAIN TOP WIDTH OF X-SECTION
C         FKEC--EXPANSION/CONTRACTION COEFF.
C         AS---CHANNEL AREA OF X-SECTION
C         ASL---LEFT FLOOD PLAIN AREA OF X-SECTION
C         ASR---RIGHT FLOOD PLAIN AREA OF X-SECTION
C         BSS--TOPWIDTH OF OFF-CHANNEL STORAGE OF X-SECTION
C         ASS---DEAD STORAGE AREA OF X-SECTION
C
      DO 125 II=1,NT
      ICKVAL=999999
      IF (NT.GT.ICKVAL) THEN
         WRITE (IPR,997) 'NT',NT,ICKVAL
         CALL ERROR
         GO TO 999
      ENDIF
      I=NT-II+1
      IF(NP.LE.-3.AND.IFXC(I,J).EQ.0) GO TO 118
      IF(HS(NCS,I,J).GT.0.0) GO TO 118
      IF(NBT(J).NE.NB(J)) THEN
        IF(IBUG.EQ.1) WRITE(IODBUG,515) I,J
  515   FORMAT(//5X,'***** WARNING WARNING ***** ',
     &  'CAN NOT INTERPOALTE WITH HS(NCS,',I3,1H,,I2,')=0.0')
      END IF
      DO 111 K=1,NCS
      KT=NCS-K+1
      IF(HS(KT,I,J).GT.0.0) GO TO 112
  111 CONTINUE
  112 KTM=KT-1
      KT1=KT+1
      DO 113 K=KT1,NCS
      HS(K,I,J)=HS(KT,I,J)+K-KT
      XR=0.0
      DH=HS(KT,I,J)-HS(KTM,I,J)
      IF(ABS(DH).GE.0.01) XR=(K-KT)/DH
      BS(K,I,J)=BS(KT,I,J)+(BS(KT,I,J)-BS(KTM,I,J))*XR
      IF(KFLP.EQ.1) THEN
        BSL(K,I,J)=BSL(KT,I,J)+(BSL(KT,I,J)-BSL(KTM,I,J))*XR
        BSR(K,I,J)=BSR(KT,I,J)+(BSR(KT,I,J)-BSR(KTM,I,J))*XR
      ENDIF
      BSS(K,I,J)=BSS(KT,I,J)+(BSS(KT,I,J)-BSS(KTM,I,J))*XR
      SNC(K,I,J)=SNC(KT,I,J)+(SNC(KT,I,J)-SNC(KTM,I,J))*XR
      SNM(K,I,J)=SNM(KT,I,J)+(SNM(KT,I,J)-SNM(KTM,I,J))*XR
      IF(NQCM(J).NE.0) GO TO 113
      CM(K,I,J)=CM(KT,I,J)
      IF(KFLP.EQ.1) THEN
        CML(K,I,J)=CML(KT,I,J)
        CMR(K,I,J)=CMR(KT,I,J)
      ENDIF
  113 CONTINUE
  118 INN=NN(I,J)
      IFXC(INN,J)=IFXC(I,J)
      AS(1,INN,J)=AS(1,I,J)
      DO 120 K=1,NCS
      HS(K,INN,J)=HS(K,I,J)
      BS(K,INN,J)=BS(K,I,J)
      IF(KFLP.EQ.1) THEN
        BSL(K,INN,J)=BSL(K,I,J)
        BSR(K,INN,J)=BSR(K,I,J)
      ENDIF
      BSS(K,INN,J)=BSS(K,I,J)
      SNC(K,INN,J)=SNC(K,I,J)
      SNM(K,INN,J)=SNM(K,I,J)
  120 CONTINUE
      KRCH(INN,J)=KRCH(I,J)
      FKEC(INN,J)=FKEC(I,J)
      ICKVAL=999999
      IF (NCML.GT.ICKVAL) THEN
         WRITE (IPR,997) 'NCML',NCML,ICKVAL
         CALL ERROR
         GO TO 999
      ENDIF
      DO 121 K=1,NCML
      CM(K,INN,J)=CM(K,I,J)
      IF(KFLP.EQ.1) THEN
        CML(K,INN,J)=CML(K,I,J)
        CMR(K,INN,J)=CMR(K,I,J)
      ENDIF
      YQCM(K,INN,J)=YQCM(K,I,J)
  121 CONTINUE
  125 CONTINUE
      IF(N.GE.1) GO TO 140
      IF(NQCM(J).LT.0) GO TO 140
      DO 135 I=1,NTM
      IF(DXM(I,J).LE.0.00001) GO TO 135
      N0=NN(I,J)
      N2=NN(I+1,J)
      DH=HS(1,N0,J)-HS(1,N2,J)
      DX=ABS(X(N2,J)-X(N0,J))
      DYQCM=0.5*(1.-DXM(I,J)/DX)*DH
      DO 134 K=1,NCML
      YQCM(K,N0,J)=YQCM(K,N0,J)+DYQCM
  134 CONTINUE
  135 CONTINUE
C
C       COMPUTE INTERPOLATED SECTIONAL PROPERTIES
C         FKEC
C         AS
C         BS
C         HS
C
  140 DO 145 I=1,NTM
      N0=NN(I,J)
      N1=N0+1
      N2=NN(I+1,J)
      N3=N2-1
      IF(N3.LT.N1) GO TO 145
      DO 143 L=N1,N3
      IFXC(L,J)=IFXC(N0,J)
      IF(IFXC(N0,J).NE.IFXC(N2,J)) IFXC(L,J)=2
      FX=ABS(X(L,J)-X(N0,J))/ABS(X(N2,J)-X(N0,J))
      DO 143 K=1,NCS
      DELHS=HS(K,N2,J)-HS(K,N0,J)
      HS(K,L,J)=HS(K,N0,J)+DELHS*FX
  143 CONTINUE
  145 CONTINUE
      IF(NP.GE.-2) GO TO 150
      NGAGM=NGAGE(J)-1
      IF(NGAGM.LE.0) NGAGM=1
      DO 148 LK=1,NGAGM
      I1=NGS(LK,J)
      IN1=NGS(LK+1,J)
      CALL CALXS55(I1,IN1,J,LK,HS,AS,BS,X,PO(LOFKC),PO(LOFMC),PO(LOFKF),
     * PO(LOFMF),PO(LOFKO),PO(LOFMO),BSS,ASS,IFXC,K2,K4,K9)
  148 CONTINUE
  150 DO 155 I=1,NTM
      N0=NN(I,J)
      N1=N0+1
      N2=NN(I+1,J)
      N3=N2-1
      IF(N3.LT.N1) GO TO 155
      DO 154 L=N1,N3
      IF(IFXC(L,J).EQ.0) GO TO 154
      FX=ABS(X(L,J)-X(N0,J))/ABS(X(N2,J)-X(N0,J))
      DELAS=AS(1,N2,J)-AS(1,N0,J)
      AS(1,L,J)=AS(1,N0,J)+DELAS*FX
      DO 153 K=1,NCS
      DELBS=BS(K,N2,J)-BS(K,N0,J)
      IF(KFLP.EQ.1) THEN
        DELBSL=BSL(K,N2,J)-BSL(K,N0,J)
        DELBSR=BSR(K,N2,J)-BSR(K,N0,J)
      ENDIF
      DELBSS=BSS(K,N2,J)-BSS(K,N0,J)
      BS(K,L,J)=BS(K,N0,J)+DELBS*FX
      IF(KFLP.EQ.1) THEN
        BSL(K,L,J)=BSL(K,N0,J)+DELBSL*FX
        BSR(K,L,J)=BSR(K,N0,J)+DELBSR*FX
      ENDIF
      BSS(K,L,J)=BSS(K,N0,J)+DELBSS*FX
  153 CONTINUE
  154 CONTINUE
  155 CONTINUE
C
      DO 600 I=1,N
      IF(KPRES.EQ.1) PR(1,I,J)=BS(1,I,J)
      ASS(1,I,J)=0.
      HCAV(1,I,J)=0.
      IFCV(1,I,J)=0
      IF(KFLP.EQ.1) THEN
        ASL(1,I,J)=0.
        ASR(1,I,J)=0.
      ENDIF
      DO 600 K=2,NCS
      L=K-1
      DH=HS(K,I,J)-HS(L,I,J)
      DB=0.5*(BS(K,I,J)-BS(L,I,J))
      IF(KPRES.EQ.1) PR(K,I,J)=PR(L,I,J)+2.*SQRT(DH*DH+DB*DB)
      AS(K,I,J)=AS(L,I,J)+0.5*(BS(L,I,J)+BS(K,I,J))*DH
      ASS(K,I,J)=ASS(L,I,J)+0.5*(BSS(L,I,J)+BSS(K,I,J))*DH
      IF(KFLP.EQ.1) THEN
        ASL(K,I,J)=ASL(L,I,J)+0.5*(BSL(L,I,J)+BSL(K,I,J))*DH
        ASR(K,I,J)=ASR(L,I,J)+0.5*(BSR(L,I,J)+BSR(K,I,J))*DH
      ENDIF
      HCAV(K,I,J)=0.
      IFCV(K,I,J)=0
      IF(K.GT.2) THEN
        KL2=K-2
        DHCV=HS(K,I,J)-HS(KL2,I,J)
        IF(BSS(L,I,J).GT.BSS(K,I,J).AND.DHCV.LE.1.0)
     .              HCAV(K,I,J)=HS(K,I,J)
      ENDIF
 600  CONTINUE
C
C      COMPUTE INTERPOLATED REACH PROPERTIES
C
      DO 160 I=1,NTM
      N0=NN(I,J)
      N1=N0+1
      N2=NN(I+1,J)
      N3=N2-1
      IF(N3.LT.N1) GO TO 160
      DO 165 L=N1,N3
      KRCH(L,J)=KRCH(N0,J)
      FKEC(L,J)=FKEC(N0,J)
      DO 161 K=1,NCS
      SNC(K,L,J)=SNC(K,N0,J)
      SNM(K,L,J)=SNM(K,N0,J)
  161 CONTINUE
      LN0=L-1
      LN=LN0+1
      HLN0=0.0
      HLN=0.0
      DO 162 K=1,NCML
      CM(K,L,J)=CM(K,N0,J)
      YQCM(K,LN,J)=YQCM(K,LN0,J)-HLN0+HLN
      IF(KFLP.EQ.1) THEN
        CML(K,L,J)=CML(K,N0,J)
        CMR(K,L,J)=CMR(K,N0,J)
      ENDIF
  162 CONTINUE
  165 CONTINUE
  160 CONTINUE
      N=NB(J)
      ICKVAL=-999999
      IF (N.LT.ICKVAL) THEN
      WRITE (IPR,998) 'N',N,ICKVAL
 998     FORMAT ('0**ERROR** IN INITCM55 - VALUE OF VARIABLE ',A,' (',
     *   I11,') IS LESS THAN ',I7,'.')
         CALL ERROR
         GO TO 999
      ENDIF
      ICKVAL=999999
      IF (N.GT.ICKVAL) THEN
         WRITE (IPR,997) 'N',N,ICKVAL
         CALL ERROR
         GO TO 999
      ENDIF
      NM=N-1
      KRCH(N,J)=KRCH(NM,J)
      FKEC(N,J)=FKEC(NM,J)
      DO 171 K=1,NCS
      SNC(K,N,J)=SNC(K,NM,J)
      SNM(K,N,J)=SNM(K,NM,J)
  171 CONTINUE
      IF(NQCM(J).NE.0) GO TO 200
      DO 175 I=1,NM
      IP1=I+1
      DO 175 K=1,NCS
      YQCM(K,I,J)=0.5*(HS(K,I,J)+HS(K,IP1,J))
      IF(I.EQ.NM) YQCM(K,N,J)=HS(K,N,J)
  175 CONTINUE
  200 CONTINUE
      IF(JNK.LE.100) GO TO 895
      DO 220 J=1,JN
      IF(METRIC.EQ.0) THEN
        UYQCM=1.
      ELSE
        UYQCM=FT
        IF(NQCM(J).LT.0) UYQCM=CFS
      ENDIF
      N=NB(J)
      NM=N-1
      IF(IBUG.EQ.1) WRITE(IODBUG,1286)
      IF(IBUG.EQ.1) WRITE(IODBUG,610)
 610  FORMAT(4X,1HJ,9X,1HI,'    X(I,J)',10X,'(HS(K,I,J),K=1,NCS)')
      DO 615 I=1,N
      XMIL=X(I,J)
      IF(METRIC.EQ.1) XMIL=XMIL*XMI
      IF(METRIC.EQ.1) THEN
        DO 612 K=1,NCS
          HS(K,I,J)=HS(K,I,J)/FT
  612   CONTINUE
      ENDIF
      IF(IBUG.EQ.1) WRITE(IODBUG,1280) J,I,XMIL,(HS(K,I,J),K=1,NCS)
 1280 FORMAT(I5,I10,F10.3,2X,10F10.1,/(27X,10F10.1))
      IF(METRIC.EQ.1) THEN
        DO 614 K=1,NCS
          HS(K,I,J)=HS(K,I,J)*FT
  614   CONTINUE
      ENDIF
  615 CONTINUE
      IF(IBUG.EQ.1) WRITE(IODBUG,1286)
      IF(IBUG.EQ.1) WRITE(IODBUG,620)
 620  FORMAT(4X,1HJ,9X,1HI,'    X(I,J)',10X,'(BS(K,I,J),K=1,NCS)')
      DO 625 I=1,N
      XMIL=X(I,J)
      IF(METRIC.EQ.1) XMIL=XMIL*XMI
      IF(METRIC.EQ.1) THEN
        DO 622 K=1,NCS
          BS(K,I,J)=BS(K,I,J)/FT
  622   CONTINUE
      ENDIF
      IF(IBUG.EQ.1) WRITE(IODBUG,1280) J,I,XMIL,(BS(K,I,J),K=1,NCS)
      IF(METRIC.EQ.1) THEN
        DO 624 K=1,NCS
          BS(K,I,J)=BS(K,I,J)*FT
  624   CONTINUE
      ENDIF
 625  CONTINUE
      IF(KFLP.EQ.0) GO TO 638
      IF(IBUG.EQ.1) WRITE(IODBUG,1286)
      IF(IBUG.EQ.1) WRITE(IODBUG,630)
 630  FORMAT(4X,1HJ,9X,1HI,'    X(I,J)',10X,'(BSL(K,I,J),K=1,NCS)')
      DO 635 I=1,N
      XMIL=X(I,J)
      IF(METRIC.EQ.1) XMIL=XMIL*XMI
      IF(METRIC.EQ.1) THEN
        DO 632 K=1,NCS
          BSL(K,I,J)=BSL(K,I,J)/FT
  632   CONTINUE
      ENDIF
      IF(IBUG.EQ.1) WRITE(IODBUG,1280) J,I,XMIL,(BSL(K,I,J),K=1,NCS)
      IF(METRIC.EQ.1) THEN
        DO 634 K=1,NCS
          BSL(K,I,J)=BSL(K,I,J)*FT
  634   CONTINUE
      ENDIF
  635 CONTINUE
      IF(IBUG.EQ.1) WRITE(IODBUG,1286)
      IF(IBUG.EQ.1) WRITE(IODBUG,640)
 640  FORMAT(4X,1HJ,9X,1HI,'    X(I,J)',10X,'(BSR(K,I,J),K=1,NCS)')
      DO 645 I=1,N
      XMIL=X(I,J)
      IF(METRIC.EQ.1) XMIL=XMIL*XMI
      IF(METRIC.EQ.1) THEN
        DO 642 K=1,NCS
          BSR(K,I,J)=BSR(K,I,J)/FT
  642   CONTINUE
      ENDIF
      IF(IBUG.EQ.1) WRITE(IODBUG,1280) J,I,XMIL,(BSR(K,I,J),K=1,NCS)
      IF(METRIC.EQ.1) THEN
        DO 644 K=1,NCS
          BSR(K,I,J)=BSR(K,I,J)*FT
  644   CONTINUE
      ENDIF
  645 CONTINUE
      IF(IBUG.EQ.1) WRITE(IODBUG,1286)
      IF(IBUG.EQ.1) WRITE(IODBUG,650)
 650  FORMAT(4X,1HJ,9X,1HI,'    X(I,J)',10X,'(ASL(K,I,J),K=1,NCS)')
      DO 655 I=1,N
      XMIL=X(I,J)
      IF(METRIC.EQ.1) XMIL=XMIL*XMI
      IF(METRIC.EQ.1) THEN
        DO 652 K=1,NCS
          ASL(K,I,J)=ASL(K,I,J)/FT2
  652   CONTINUE
      ENDIF
      IF(IBUG.EQ.1) WRITE(IODBUG,1280) J,I,XMIL,(ASL(K,I,J),K=1,NCS)
      IF(METRIC.EQ.1) THEN
        DO 654 K=1,NCS
          ASL(K,I,J)=ASL(K,I,J)*FT2
  654   CONTINUE
      ENDIF
  655 CONTINUE
      IF(IBUG.EQ.1) WRITE(IODBUG,1286)
      IF(IBUG.EQ.1) WRITE(IODBUG,660)
 660  FORMAT(4X,1HJ,9X,1HI,'    X(I,J)',10X,'(ASR(K,I,J),K=1,NCS)')
      DO 665 I=1,N
      XMIL=X(I,J)
      IF(METRIC.EQ.1) XMIL=XMIL*XMI
      IF(METRIC.EQ.1) THEN
        DO 662 K=1,NCS
          ASR(K,I,J)=ASR(K,I,J)/FT2
  662   CONTINUE
      ENDIF
      IF(IBUG.EQ.1) WRITE(IODBUG,1280) J,I,XMIL,(ASR(K,I,J),K=1,NCS)
      IF(METRIC.EQ.1) THEN
        DO 664 K=1,NCS
          ASR(K,I,J)=ASR(K,I,J)*FT2
  664   CONTINUE
      ENDIF
  665 CONTINUE
      IF(IBUG.EQ.1) WRITE(IODBUG,1286)
      IF(IBUG.EQ.1) WRITE(IODBUG,670)
 670  FORMAT(4X,1HJ,9X,1HI,'    X(I,J)',10X,'(CML(K,I,J),K=1,NCML)')
      DO 675 I=1,N
      XMIL=X(I,J)
      IF(METRIC.EQ.1) XMIL=XMIL*XMI
      IF(IBUG.EQ.1) WRITE(IODBUG,1281) J,I,XMIL,(CML(K,I,J),K=1,NCML)
  675 CONTINUE
      IF(IBUG.EQ.1) WRITE(IODBUG,1286)
      IF(IBUG.EQ.1) WRITE(IODBUG,680)
 680  FORMAT(4X,1HJ,9X,1HI,'    X(I,J)',10X,'(CMR(K,I,J),K=1,NCML)')
      DO 685 I=1,N
      XMIL=X(I,J)
      IF(METRIC.EQ.1) XMIL=XMIL*XMI
      IF(IBUG.EQ.1) WRITE(IODBUG,1281) J,I,XMIL,(CMR(K,I,J),K=1,NCML)
  685 CONTINUE
      IF(IBUG.EQ.1) WRITE(IODBUG,1286)
      IF(IBUG.EQ.1) WRITE(IODBUG,690)
 690  FORMAT(4X,1HJ,9X,1HI,'    X(I,J)',10X,'(SNC(K,I,J),K=1,NCS)')
      DO 695 I=1,N
      XMIL=X(I,J)
      IF(METRIC.EQ.1) XMIL=XMIL*XMI
      IF(IBUG.EQ.1) WRITE(IODBUG,1281) J,I,XMIL,(SNC(K,I,J),K=1,NCS)
  695 CONTINUE
      IF(IBUG.EQ.1) WRITE(IODBUG,1286)
      IF(IBUG.EQ.1) WRITE(IODBUG,700)
 700  FORMAT(4X,1HJ,9X,1HI,'    X(I,J)',10X,'(SNM(K,I,J),K=1,NCS)')
      DO 705 I=1,N
      XMIL=X(I,J)
      IF(METRIC.EQ.1) XMIL=XMIL*XMI
      IF(IBUG.EQ.1) WRITE(IODBUG,1281) J,I,XMIL,(SNM(K,I,J),K=1,NCS)
  705 CONTINUE
  638 IF(IBUG.EQ.1) WRITE(IODBUG,1286)
      IF(IBUG.EQ.1) WRITE(IODBUG,710)
 710  FORMAT(4X,1HJ,9X,1HI,'    X(I,J)',10X,'(BSS(K,I,J),K=1,NCS)')
      DO 715 I=1,N
      XMIL=X(I,J)
      IF(METRIC.EQ.1) XMIL=XMIL*XMI
      IF(METRIC.EQ.1) THEN
        DO 712 K=1,NCS
          BSS(K,I,J)=BSS(K,I,J)/FT
  712   CONTINUE
      ENDIF
      IF(IBUG.EQ.1) WRITE(IODBUG,1280) J,I,XMIL,(BSS(K,I,J),K=1,NCS)
      IF(METRIC.EQ.1) THEN
        DO 714 K=1,NCS
          BSS(K,I,J)=BSS(K,I,J)*FT
  714   CONTINUE
      ENDIF
 715  CONTINUE
      IF(IBUG.EQ.1) WRITE(IODBUG,1286)
      IF(IBUG.EQ.1) WRITE(IODBUG,720)
 720  FORMAT(4X,1HJ,9X,1HI,4X,7HFKEC(I),10X,2HDX,5X,4HKRCH)
      DO 725 I=1,NM
      DX=ABS(X(I+1,J)-X(I,J))
      IF(METRIC.EQ.1) DX=DX*XMI
      IF(IBUG.EQ.1) WRITE(IODBUG,726) J,I,FKEC(I,J),DX,KRCH(I,J)
 725  CONTINUE
 726  FORMAT(I5,I10,1X,F10.2,2X,F10.3,2X,I7)
      IF(IBUG.EQ.1) WRITE(IODBUG,1286)
      IF(IBUG.EQ.1) WRITE(IODBUG,730)
 730  FORMAT(4X,1HJ,9X,1HI,'    X(I,J)',10X,'(CM(K,I,J),K=1,NCML)')
      DO 735 I=1,N
      XMIL=X(I,J)
      IF(METRIC.EQ.1) XMIL=XMIL*XMI
      IF(IBUG.EQ.1) WRITE(IODBUG,1281) J,I,XMIL,(CM(K,I,J),K=1,NCML)
 735  CONTINUE
1281  FORMAT(I5,I10,F10.3,2X,10F10.4,/(27X,10F10.4))
      IF(IBUG.EQ.1) WRITE(IODBUG,1286)
      IF(IBUG.EQ.1) WRITE(IODBUG,740)
 740  FORMAT(4X,1HJ,9X,1HI,'    X(I,J)',10X,'(AS(K,I,J),K=1,NCS)')
      DO 745 I=1,N
      XMIL=X(I,J)
      IF(METRIC.EQ.1) XMIL=XMIL*XMI
      IF(METRIC.EQ.1) THEN
        DO 742 K=1,NCS
          AS(K,I,J)=AS(K,I,J)/FT2
  742   CONTINUE
      ENDIF
      IF(IBUG.EQ.1) WRITE(IODBUG,1280) J,I,XMIL,(AS(K,I,J),K=1,NCS)
      IF(METRIC.EQ.1) THEN
        DO 744 K=1,NCS
          AS(K,I,J)=AS(K,I,J)*FT2
  744   CONTINUE
      ENDIF
  745 CONTINUE
      IF(KPRES.EQ.1) THEN
        IF(IBUG.EQ.1) WRITE(IODBUG,1286)
        IF(IBUG.EQ.1) WRITE(IODBUG,746)
 746    FORMAT(4X,1HJ,9X,1HI,'    X(I,J)',10X,'(PR(K,I,J),K=1,NCS)')
        DO 749 I=1,N
        XMIL=X(I,J)
        IF(METRIC.EQ.1) XMIL=XMIL*XMI
        IF(METRIC.EQ.1) THEN
        DO 747 K=1,NCS
          PR(K,I,J)=PR(K,I,J)/FT
  747   CONTINUE
      ENDIF
        IF(IBUG.EQ.1) WRITE(IODBUG,1280) J,I,XMIL,(PR(K,I,J),K=1,NCS)
      IF(METRIC.EQ.1) THEN
        DO 748 K=1,NCS
          PR(K,I,J)=PR(K,I,J)*FT
  748   CONTINUE
        ENDIF
  749   CONTINUE
        ENDIF

      IF(IBUG.EQ.1) WRITE(IODBUG,1286)
      IF(IBUG.EQ.1) WRITE(IODBUG,750)
 750  FORMAT(4X,1HJ,9X,1HI,'    X(I,J)',10X,'(YQCM(K,I,J),K=1,NCML)')
      DO 755 I=1,N
      XMIL=X(I,J)
      IF(METRIC.EQ.1) XMIL=XMIL*XMI
      IF(IBUG.EQ.1)
     . WRITE(IODBUG,1280) J,I,XMIL,((YQCM(K,I,J)/UYQCM),K=1,NCML)
  755 CONTINUE
  220 CONTINUE
  895 DO 230 J=1,JN
      N=NB(J)
      CALL SLOPE55(J,N,XFACT,X,HS,KRCH,SLFI,K1,K2,K9)
  230 CONTINUE
  501 FORMAT(/2X,'RIVER NO.',I5/5X,'NN=   ',20I4,100(/11X,20I4))
  510 FORMAT(//5X,35HPROGRAM STOPS BECAUSE TOTAL NUMBER(,I3,') OF X-SECT
     *IONS(ORIGINAL+INTERPOLATED EXCEED THE K2 OR K7 VALUE OF ',2I4,')',
     *14H FOR RIVER NO.,I2//)
 1285 FORMAT(////)
 1286 FORMAT(//)
520   CONTINUE
      IF(IBUG.EQ.1) WRITE (IODBUG,*) 'EXIT INTPXS55'

cc      IF(NFGRF.EQ.2) THEN
ccc ...................
cc      CALL OPNCRS55(IOPNERR)
cc      IF(IOPNERR.EQ.1) GO TO 999
cc
ccc ... write cross section info
cc        DO 2010 J=1,JN
cc          N=NB(J)
cc          DO 2000 I=1,N
cccc            WRITE(JFCRS,3000) J,I
cc            WRITE(JFCRS,3010) (HS(K,I,J),K=1,NCS)
cc            WRITE(JFCRS,3010) (BS(K,I,J),K=1,NCS)
cc            WRITE(JFCRS,3010) (BSS(K,I,J),K=1,NCS)
cc            IF(KFLP.GT.0) THEN
cc              WRITE(JFCRS,3010) (BSL(K,I,J),K=1,NCS)
cc              WRITE(JFCRS,3010) (BSR(K,I,J),K=1,NCS)
cc            ENDIF
cc 2000     CONTINUE
cc 2010   CONTINUE
cc      ENDIF

cc 3000 FORMAT(2I5,F12.3)
cc 3005 FORMAT(F12.3,1X,A1)
cc 3010 FORMAT(100F12.3)
 999  RETURN
      END
