C MODULE PRC26
C
C DESC CARRYOVER PRINT FOR OPERATION 26 - RES-SNGL
C
      SUBROUTINE PRC26(PO,CO)
C
C  CARRYOVER PRINT ROUTINE FOR OPERATION 26 - RES-SNGL.
C
C--------------------------------------------------
C  WRITTEN BY - JTOSTROWSKI - HRL - MARCH 1984
C  WRITTEN BY -  KSHSU - HRL - JUNE 1988 -- SPECIFIC CARRYOVER PRINTOUT
C---------------------------------------------------
C
      INCLUDE 'common/ionum'
      INCLUDE 'common/fdbug'
      COMMON/FENGMT/METRIC
      COMMON/FATLGK/IATL,C1,C2
      REAL*8 SUBNAM
      LOGICAL FOP7
      DIMENSION PO(*),CO(*),X(365),RATG(2),ITRIB(2)
      CHARACTER*5 STFLX
C
C    ================================= RCS keyword statements ==========
      CHARACTER*68     RCSKW1,RCSKW2
      DATA             RCSKW1,RCSKW2 /                                 '
     .$Source: /fs/hseb/ob72/rfc/ofs/src/fcinit_prpc/RCS/prc26.f,v $
     . $',                                                             '
     .$Id: prc26.f,v 1.6 1999/01/19 17:10:05 page Exp $
     . $' /
C    ===================================================================
C
C
      DATA BLANK/4H    /
      DATA SUBNAM/8HPRC26   /
      DATA UNTL,UNTQ,UNTST/4HM   ,4HCMS ,4HCMSD/
      DATA DIML,DIMQ,DIMST/4HL   ,4HL3/T,4HL3  /
      DATA ACFT,CFSD/4HACFT,4HCFSD/
C
C----------------------------
C  SET DEBUG AND TRACE LEVELS
C
      IBUG = 0
      CALL FPRBUG(SUBNAM,1,26,IPBUG)
      IF (ITRACE .GT. 0) IBUG=1
      IF (IPBUG .GT. 0) IBUG=2
C
C-------------------------
C  SET DEFAULT CONVERSIONS.
C
      CONVL = 1.0
      CONVQ = 1.0
      CONVST = 1.0
C
C--------------------------
C  SET DEFAULT UNITS FOR PRINTING
C
      UNITL = UNTL
      UNITQ = UNTQ
      UNITST = UNTST
C
C----------------------------
C  DETERMINE UNITS USED FOR INPUT AND UNITS REQUESTED FOR OUTPUT
C  AND DETERMIN WHAT CONVERSIONS NEED TO BE MADE.
C
      IMETEN = PO(8)
      ME = METRIC
      IF (METRIC .EQ. -1) ME=IMETEN
C  METRIC IS AN INDECATOR FOR DESIRED PRINTOUT UNITS
C  METRIC = 0, ENGLISH UNITS
C         = 1, METRIC UNITS
C         =-1, DEFAULT TO UNITS WHEN SEGMENT WAS INITIALLY DEFINED
C  IMETEN IN AN INDECATOR FOR UNITS USED WHEN SEGMENT WAS DEFINED
C  IMETEN = 1,  METRIC UNITS USED
C         = 0,  ENGLISH UNITS USED (W/STORAGE=ACFT)
C         =-1,  ENGLISH UNITS USED (W/STORAGE=TIMD -- TO BE PHASED OUT)
C         =-2,  ENGLISH UNITS USED (W/STORAGE=CFSD)
C
      IF (ME .GE. 1) GO TO 20
C
C----------------------------------
C  COMPUTE CONVERSION FACTORS FOR LENGTH AND FLOW
C
C  THE FOLLOWING CHANGE MADE ON 7/1/90
C      CALL FCONVT(UNTL,DIML,UNITL,CONVL,0.,IER)
C      CALL FCONVT(UNTQ,DIMQ,UNITQ,CONVQ,0.,IER)
      ZERO=0.
      CALL FCONVT(UNTL,DIML,UNITL,CONVL,ZERO,IER)
      CALL FCONVT(UNTQ,DIMQ,UNITQ,CONVQ,ZERO,IER)
C  END OF CHANGE OF 7/1/90
C
C--------------------------------------
C  STORAGE IN ACRE-FEET
C  COMPUTE CONVERSION FACTORS FOR STORAGE
C
      ISTOR = 1
C  STORAGE IN CFSD
      IF (ME .LE. -1) ISTOR = 0
      CALL CNVT26(UNTST,DIMST,UNITST,CONVST,CADD,ISTOR,IER)
C
C-------------------------------------
C  SET UNITS FOR STORAGE OUTPUT IN ENGLISH
C
      UNITST = ACFT
      IF (ISTOR .EQ. 0) UNITST = CFSD
C
C------------------------------------
C  NOW SEE IF DISPLAY FOR STORAGE IS IN 'CFSD' OR 'CMSD'
C
   20 CONTINUE
C
      MINODT = PO(7)
      DELTAT = MINODT
      NTIM24 = 24/MINODT
      NCON = NTIM24
      IF (ME .EQ. -1) NCON=1
      CONVST =CONVST/NCON
C
C
C
      IF (IBUG.GE.1) WRITE(IODBUG,1601) METRIC,IMETEN,CONVL,CONVQ,
     .               CONVST
 1601 FORMAT(10X,'METRIC, IMETEN = ',2I5/
     .       10X,'CONVL, CONVQ, CONVST = ',3F10.4)
C
C-----------------------------------------
C  CONVERT GENERAL STORAGES HERE
C
      QIN = CO(1)*CONVQ
      QOM = CO(2)*CONVQ
      QOI = CO(3)*CONVQ
      EL0 = CO(4)*CONVL
      EL1 = CO(5)*CONVL
      STO = CO(6)*CONVST
C
      WRITE(IPR,601) QIN,UNITQ,QOM,UNITQ,
     .                QOI,UNITQ,EL0,UNITL,EL1,UNITL,STO,UNITST
  601 FORMAT(//41X,'***** CARRYOVER INFORMATION *****'/
     .       11X,'GENERAL CARRYOVER:'//
     .       17X,'INSTANTANEOUS INFLOW = ',10X,F12.2,1X,A4/
     .       17X,'MEAN DISCHARGE =       ',10X,F12.2,1X,A4/
     .       17X,'INSTANTANEOUS DISCHARGE = ',7X,F12.2,1X,A4/
     .       17X,'POOL ELEVATION ONE PERIOD BACK = ',F12.2,1X,A4/
     .       17X,'POOL ELEVATION = ',16X,F12.2,1X,A4/
     .       17X,'STORAGE CONTENTS = ',14X,F12.2,1X,A4)
C
C***********************************************************************
C***********************************************************************
C
C     PRINT SPECIFIC REGULATION SCHEME/UTILITY INFORMATION
C
      LOC=PO(9)
      NCOMPS=PO(LOC)
      LOC=LOC+1
      NSPEC=0
      IF(NCOMPS.EQ.0)GO TO 501
      WRITE(IPR,745)
 745  FORMAT(/11X,'SPECIFIC CARRYOVER:')
      DO 500 I=1,NCOMPS
      NUM=PO(LOC)
      LP=PO(LOC+1)
      LT=PO(LOC+2)
      LC=PO(LOC+3)
      LOC=LOC+4
C
      NM=NUM/10
      RNM=NUM/10.
      RNM=(RNM-NM)*10.+.01
      KNM=RNM
      IF(NUM .GT. 1500)GO TO 250
C     SELECTION IS A COMPUTATIONAL SCHEME
      NUM=NM -100
      GO TO (500,110,120,500,140,150,500,170,500,190,200,210,220),NUM
C***********************************************************************
C
C     PRESCRIBED DISCHARGE COMPUTATIONAL SCHEME -- SETQ
C
  110 CONTINUE
      IOPT = PO(LP)
      IF (IOPT .LE. 0) GO TO 500
      NOLDQ = PO(LP+1)
      IF (NOLDQ .EQ. 0) GO TO 500
      WRITE(IPR,772)KNM
 772  FORMAT(/17X,'PRESCRIBED DISCHARGE SCHEME -- SETQ(',I1,1H))
      NSPEC=NSPEC+1
      DTYPE = PO(LT+2)
      CALL FDCODE(DTYPE,X,DIM,IX,IX,X,IX,IX)
      UDUMY = UNITQ
      IF (DIM .EQ. DIMST) GO TO 318
      WRITE(IPR,775) UNITQ
  775 FORMAT(20X,'INITIAL INSTANTANEOUS DISCHARGE (OLDQ  IN ',A4,
     &') USED TO REPLACE MISSING PRESCRIBED DATA ')
      GO TO 319
  318 WRITE(IPR,776) UNITQ
  776 FORMAT(20X,'INITIAL MEAN DISCHARGE (OLDQ IN ',A4,
     &') USED TO REPLACE MISSING PRESCRIBED DATA ')
  319 CONTINUE
      DO 317 J=1,NOLDQ
 317  X(J)=CO(LC+J-1)*CONVQ
      WRITE(IPR,777) (X(J),J=1,NOLDQ)
  777 FORMAT(20X,8F11.2)
      IF(IBUG .LT. 1) GO TO 500
      WRITE(IODBUG,900) LP,LT,LC,PO(LP),PO(LT),CO(LC)
  900 FORMAT(5X,'LP,LT,LC,PO(LP),PO(LT),CO(LC)= ',3I5,E15.5,5X,A4,E15.5)
      GO TO 500
C***********************************************************************
C
C     PRESCRIBED ELEVATION COMPUTATIONAL SCHEME -- SETH
C
  120 CONTINUE
      IOPT = PO(LP)
      IF (IOPT .LE. 0) GO TO 500
      NOLDH = PO(LP+1)
      IF(NOLDH.EQ.0)GO TO 500
      WRITE(IPR,792)KNM
 792  FORMAT(/17X,'PRESCRIBED ELEVATION SCHEME -- SETH(',I1,1H))
      NSPEC=NSPEC+1
      DO 327 J=1,NOLDH
 327  X(J)=CO(LC+J-1)*CONVL
      WRITE(IPR,795) UNITL
  795 FORMAT(20X,'INITIAL ELEVATION (OLDH IN ',A4,
     &') USED TO REPLACE MISSING PRESCRIBED DATA ')
      WRITE(IPR,777) (X(J),J=1,NOLDH)
      IF(IBUG .LT. 1) GO TO 500
      WRITE(IODBUG,900) LP,LT,LC,PO(LP),PO(LT),CO(LC)
      GO TO 500
C***********************************************************************
C
C     FILL AND SPILL COMPUTATIONAL SCHEME -- FILLSPILL
C
 140  WRITE(IPR,840)KNM
 840  FORMAT(/17X,'FILL AND SPILL SCHEME -- FILLSPILL(',I1,1H))
      NSPEC=NSPEC+1
 896  CONTINUE
      C=CO(LC)*CONVQ
      WRITE(IPR,897) C,UNITQ
 897  FORMAT(20X,'INITIAL NON-SPILLWAY DISCHARGE (OLDQ) = ',
     &F11.2,1X,A4)
      IF(IBUG .LT. 1) GO TO 500
      WRITE(IODBUG,900) LP,LT,LC,PO(LP),PO(LT),CO(LC)
      GO TO 500
C***********************************************************************
C
C     SPILLWAY ROUTING COMPUTATIONAL SCHEME -- SPILLWAY
C
 150  WRITE(IPR,890) KNM
  890 FORMAT(/17X,'SPILLWAY ROUTING SCHEME -- SPILLWAY(',I1,1H))
      NSPEC=NSPEC+1
      GO TO 896
C  USE SAME STATEMENTS AS FILL AND SPILL COMPUTATIONAL SCHEME
C***********************************************************************
C
C  D/S STAGE AND POOL ELEV. CONTL'D POOL RELEASE SCHEME -- STPOOLQ
C
 170  WRITE(IPR,812) KNM
  812 FORMAT(/17X,'D/S STAGE AND POOL ELEV. CONTROLLED POOL RELEASE ',
     &'SCHEME -- STPOOLQ(',I1,1H))
      NSPEC=NSPEC+1
      NGAGES = ABS(PO(LP))
C
C  SET UP TRIBUTARY CONTROL INDICATOR IF USED
C  = 0, D/S FLOW CONDITION CONTROL, =1, TRIBUTARY CONTROL
      ITRIB(1)=0
      ITRIB(2)=0
      IF(NGAGES.GT.2) THEN
         NGAGES=NGAGES/100
         DUM=PO(LP)-NGAGES*100
         ITRIB(1)=DUM/10
         ITRIB(2)=DUM-ITRIB(1)*10
      ENDIF
      LO=LP+1
      IDA=PO(LO)
      IF(IDA.EQ.0)GO TO 1704
      IDT=NTIM24
      LO=LO+IDT
 1704 LO=LO+1
      LOCCLK = LC + 1
      RATG(1)=0
      RATG(2)=0
      DO 1700 JJ=1,NGAGES
      LAG=PO(LO)
      IF(PO(LO+1).NE.BLANK .AND. PO(LO+2).NE.BLANK) RATG(JJ)=1
      LO=LO+3
      NREL=PO(LO)
      LO=LO+1
      DO 1708 J=1,NREL
      NPAIR=PO(LO)*.5
      LO=LO+NPAIR
      LO=LO+NPAIR+1
 1708 CONTINUE
      NRISE=PO(LO)
      LO=LO+NRISE
      LO=LO+NRISE+1
      NFALL=PO(LO)
      IF(NFALL.LE.0)GO TO 1722
      LO=LO+NFALL
      LO=LO+NFALL
 1722 LO=LO+1
      IF(JJ.EQ.2)GO TO 1731
      NRULE=PO(LO)
      IF(NRULE .LE. 0)GO TO 1730
      NVAL=PO(LO)
      LO=LO+NVAL
      LO=LO+NVAL+1
 1730 LO=LO+1
 1731 NLK=PO(LO)
      LO=LO+1
      DO 1734 K=1,NLK
      IF(IBUG .LT. 1) GO TO 1733
      WRITE(IODBUG,900) LO,LT,LOCCLK,PO(LO),PO(LT),CO(LOCCLK)
 1733 CALL PRC7(PO(LO),CO(LOCCLK))
      LOCCLK = LOCCLK + CO(LOCCLK)
      LR=LO+15
      NUMLGK=PO(LR)
      LOCK1=PO(LR+2) + LO - 1
      LOCK2=LOCK1+1
      IATL = 1
      IF(PO(LO-1 + 11) .GT. 0.0)IATL = 0
      IF(.NOT.FOP7(PO(LOCK1),PO(LOCK2)).OR.IATL.EQ.0)GO TO 1734
      NV7LK=PO(LO+NUMLGK)
      NV72LK=PO(LO+NUMLGK+1+2*NV7LK)
      NUMLGK=NUMLGK + 2 + 2*NV7LK + 2*NV72LK
 1734 LO=LO+NUMLGK
 1700 CONTINUE
      LOCA1 = 0
      IF(PO(LT).NE.BLANK .OR. PO(LT+1).NE.BLANK) LOCA1=1
      LOCCO=LOCCLK
      IF (LOCA1 .EQ. 0) GO TO 815
C  USED TIME-SERIES FOR LOCAL FLOW AT FIRST GAGE
      G1 = CO(LOCCO)*CONVQ
      WRITE(IPR,814) G1,UNITQ
  814 FORMAT(20X,'INITIAL LOCAL FLOW AT GAGE 1 (GAGE1)',F10.3,1X,A4)
      LOCCO=LOCCO+1
C
ccc  815 LOOP=CO(LC)
ccc      IF(LOOP.EQ.0)GO TO 832
C
 815  CONTINUE
      DO 830 J=1,NGAGES
      LOCCO = LOCCO + (J-1)*4
      PS=CO(LOCCO)*CONVL
      PQ=CO(LOCCO+1)*CONVQ
      STFLX='STAGE'
      CONVX=CONVL
      UNITX=UNITL
      IF(RATG(J).EQ.0) THEN
         CONVX=CONVQ
         UNITX=UNITQ
         STFLX='FLOW '
      ENDIF
      PC=CO(LOCCO+2)*CONVX
      NMS=CO(LOCCO+3)
      WRITE(IPR,816) J
  816 FORMAT(20X,'PREVIOUS VALUES FOR D/S GAGE ',I1,1H:)
      WRITE(IPR,818) PS,UNITL
  818 FORMAT(22X,'PREVIOUS STAGE = ',F10.3,1X,A4)
      WRITE(IPR,820) PQ,UNITQ
  820 FORMAT(22X,'PREVIOUS FLOW = ',F10.3,1X,A4)
      WRITE(IPR,822) STFLX,PC,UNITX
  822 FORMAT(22X,'RATE CHANGE OF ',A5,' = ',F10.3,1X,A4,
     &'/TIME-PERIOD')
      WRITE(IPR,823) NMS
 823  FORMAT(22X,'NO. OF PREVIOUS MISSING VALUES = ',I5)
  830 CONTINUE
  832 IF(IBUG .LT. 1) GO TO 500
      WRITE(IODBUG,900) LP,LT,LC,PO(LP),PO(LT),CO(LC)
      GO TO 500
C***********************************************************************
C
C     UPSTREAM STAGE MINIMIZATION SCEME -- MINH
C
 190  WRITE(IPR,930)KNM
 930  FORMAT('MINH(',I1,1H))
      NSPEC=NSPEC+1
      WRITE(IPR,982)CO(LC)
 982  FORMAT(3HUPQ,F11.2)
      LC=LC+1
      WRITE(IPR,984)CO(LC),CO(LC+1)
 984  FORMAT(7HUPSTAGE,2(F11.2))
      WRITE(IPR,985)
 985  FORMAT(7HENDMINH)
      IF(IBUG .LT. 1) GO TO 500
      WRITE(IODBUG,900) LP,LT,LC,PO(LP),PO(LT),CO(LC)
      GO TO 500
C***********************************************************************
C
C     INDUCED SURCHARGE COMPUTATIONAL SCHEME -- INDSRCHGE
C
 200  WRITE(IPR,852)KNM
  852 FORMAT(/17X,'INDUCED SURCHARGE SCHEME -- INDSRCHGE(',I1,1H))
      NSPEC=NSPEC+1
      C1=CO(LC)*CONVQ
      WRITE(IPR,854) C1,UNITQ
  854 FORMAT(20X,'INSTANTANEOUS INFLOW 2 PERIODS BEFORE RUN (BACKQI)= ',
     &F11.2,1X,A4)
      C2=CO(LC+1)*CONVL
      WRITE(IPR,856) C2,UNITL
  856 FORMAT(20X,'POOL ELEVATION 2 PERIODS BEFORE RUN (BACKPOOL)= ',
     &F11.2,1X,A4)
      LO=LC+2
      TEND=CO(LO)
      IF(TEND.LE.-999.)GO TO 8002
      TEND=TEND*CONVL
      WRITE(IPR,858) TEND,UNITL
  858 FORMAT(20X,'INITIAL POOL RISING/FALLING TENDENCY (TENDENCY)= ',
     &F11.2,1X,A4)
 8002 RMAX=CO(LO+1)
      IF(RMAX.LE.-999.)GO TO 8004
      RMAX=RMAX*CONVL
      WRITE(IPR,860) RMAX,UNITL
  860 FORMAT(20X,'INITIAL MAX ELEV IN SURCHARGE OPERATION (MAXEL)=',
     &F11.2,1X,A4)
      QMAX=CO(LO+2)*CONVQ
      WRITE(IPR,862) QMAX,UNITQ
  862 FORMAT(20X,'DISCHARGE CORRESPONDING TO ''MAXEL'' (QMAXEL)= ',
     &F11.2,1X,A4)
 8004 RMQ=CO(LO+3)
      IF(RMQ.LE.-999.)GO TO 8006
      RMQ=RMQ*CONVQ
      WRITE(IPR,864) RMQ,UNITQ
  864 FORMAT(20X,'INITIAL MAX DISCHARGE IN SURCHARGE OPERATION (QMAX)= '
     &,F11.2,1X,A4)
 8006 IF(IBUG .LT. 1) GO TO 500
      WRITE(IODBUG,900) LP,LT,LC,PO(LP),PO(LT),CO(LC)
      GO TO 500
C***********************************************************************
C
C     FLASHBOARDS COMPUTATIONAL SCHEME -- FLASHBDS
C
 210  WRITE(IPR,882)KNM
  882 FORMAT(/17X,'FLASHBOARD COMPUTATIONAL SCHEME -- FLASHBDS(',I1,1H))
      NSPEC=NSPEC+1
      LO = LP+1
      NBS = PO(LO)
      LO = LO+5
      LO = LO+1
      NRATEL = PO(LO)
      LO = LO+2*NRATEL
      WRITE(IPR,884)
  884 FORMAT(20X,'INITIAL BOARDS DOWN (DOWN): ')
      LC = LC+1
      IC1=CO(LC)
      WRITE(IPR,885)IC1
  885 FORMAT(22X,'NUMBER OF LARGE BOARDS DOWN= ',I5)
      IF(NBS .EQ. 0)GO TO 8040
      LO = LO+5
      LO = LO+1
      NRATES = PO(LO)
      LO=LO+2*NRATES
      LC=LC+1
      IC2=CO(LC)
      WRITE(IPR,886) IC2
  886 FORMAT(22X,'NUMBER OF SMALL BOARDS DOWN= ',I5)
 8040 CONTINUE
      LO = LO+1
      IGATE = PO(LO)
      IF(IGATE.EQ.0)GO TO 8045
      LC=LC+1
      GATE=CO(LC)
      LC=LC+1
      IF (GATE .LT. 0.) GO TO 8045
      GATE=GATE*CONVL
      WRITE(IPR,887)GATE
  887 FORMAT(20X,'INITIAL GATE OPENING (GATE)= ',F11.2)
C
 8045 LC = LC+1
      QNSP = CO(LC)*CONVQ
      WRITE(IPR,888) QNSP,UNITQ
  888 FORMAT(20X,'INITIAL NON-SPILLWAY DISCHARGE (OLDQ)= ',
     &F11.2,1X,A4)
      IF(IBUG .LT. 1) GO TO 500
      WRITE(IODBUG,900) LP,LT,LC,PO(LP),PO(LT),CO(LC)
      GO TO 500
C***********************************************************************
C
C     POWER GENERATION COMPUTATIONAL SCHEME -- POWERGEN
C
  220 CONTINUE
      WRITE(IPR,932)KNM
 932  FORMAT(/17X,'POWER GENERATION SCHEME --  POWERGEN(',I1,1H))
      NSPEC=NSPEC+1
      DO 337 J=1,NTIM24
 337  X(J)=CO(LC+J-1)*CONVQ
      WRITE(IPR,935) UNITQ
  935 FORMAT(20X,'INITIAL MEAN GENERATION DISCHARGES (OLDQ IN ', A4,1H))
      WRITE(IPR,777) (X(J),J=1,NTIM24)
      IF(IBUG .LT. 1) GO TO 500
      WRITE(IODBUG,900) LP,LT,LC,PO(LP),PO(LT),CO(LC)
      GO TO 500
C
C     SELECTION IS A UTILITY
C
 250  NUM=NM-150
      GO TO (260,500,500,290,300,500,500,500,500,500,500),NUM
C***********************************************************************
C
C     RULE CURVE ADJUST UTILITY -- RULEADJ
C
 260  WRITE(IPR,952)KNM
 952  FORMAT(/17X,'RULECURVE ADJUST UTILITY -- RULADJDJ(',I1,1H))
      NSPEC=NSPEC+1
C
      NVAL = PO(LP)
      LO =LP
      IF (NVAL .LE. 0) GO TO 262
      LO = LO+2*NVAL+1
  262 NDEV = PO(LO+1)
      MN=CO(LC)
      WRITE(IPR,954)MN
  954 FORMAT(20X,'NUMBER OF MISSING OBSERVED ELEVATIONS BEFORE RUN',
     &' (MSNG)=',I5)
      DO 2032 K=1,NDEV
 2032 X(K)=CO(LC+K)*CONVL
      WRITE(IPR,955) UNITL
  955 FORMAT(20X,'INITIAL N(PERIODS) ELEVATION DIFFERENCES ',
     &'(DEV IN ',A4,1H))
      WRITE(IPR,777) (X(J),J=1,NDEV)
      IF(IBUG .LT. 1) GO TO 500
      WRITE(IODBUG,900) LP,LT,LC,PO(LP),PO(LT),CO(LC)
      GO TO 500
C***********************************************************************
C
C     DISCHARGE AND POOL ELEVATION ADJUSTMENT UTILITY -- ADJUST
C
  290 IF (PO(LT) .EQ. BLANK) GO TO 500
      WRITE(IPR,2072)KNM
 2072 FORMAT(/17X,'POOL ELEV AND DISCHARGE ADJUST UTILITY ',
     &' -- ADJUST(',I1,1H))
      NSPEC=NSPEC+1
      IW = PO(LP+1)
      IF (IW .GE. 1) GO TO 298
C
      WRITE(IPR,2075) CO(LC)
 2075 FORMAT(20X,'INITIAL RATIO (OBSERVED/SIMULATED) (QDIFF)= ',
     &F8.2)
      GO TO 299
  298 WRITE(IPR,2076) CO(LC),UNITQ
 2076 FORMAT(20X,'INITIAL DIFFERENCE (OBSERVED-SIMULATED) (QDIFF)= ',
     &F8.2,1X,A4)
  299 CONTINUE
      ISTPS = CO(LC+1)
      WRITE(IPR,2077) ISTPS
 2077 FORMAT(20X,'NUMBER OF MISSING INSTANTANEOUS DISCHARGES ',
     &'BEFORE RUN (STEPS)= ',I6)
C
      IF(IBUG .LT. 1) GO TO 500
      WRITE(IODBUG,900) LP,LT,LC,PO(LP),PO(LT),CO(LC)
      GO TO 500
C***********************************************************************
C
C     BACK COMPUTING INFLOW UTILITY -- BACKFLOW
C
 300  WRITE(IPR,972)KNM
  972 FORMAT(/17X,'BACK COMPUTING INFLOW UTILITY -- BACKFLOW(',I1,1H))
      NSPEC=NSPEC+1
      ELEV=CO(LC)*CONVL
      WRITE(IPR,974) ELEV,UNITL
  974 FORMAT(20X,'INITIAL POOL ELEVATION (ELEV)= ',F11.2,1X,A4)
      IF(IBUG .LT. 1) GO TO 500
      WRITE(IODBUG,900) LP,LT,LC,PO(LP),PO(LT),CO(LC)
      GO TO 500
C***********************************************************************
 500  CONTINUE
  501 IF (NSPEC .EQ. 0) WRITE(IPR,910)
  910 FORMAT(/17X,'NO SPECIFIC CARRYOVER REQUIRED FOR THIS OPERATION!')
C**********************************************************************
      RETURN
      END
