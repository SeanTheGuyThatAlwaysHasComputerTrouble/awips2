C MODULE FPDBIO
C-----------------------------------------------------------------------
C
      SUBROUTINE FPDBIO (ITSTYP,NUMEXT,EXTLOC,DTYPE,ITIME,DIM,MSG,NPDT,
     *   TSCALE,NFOUND,D,MD,LWORK)
C
C  THIS ROUTINE OBTAINS EXTERNAL LOCATION INFORMATION FOR
C  READING OR WRITING TIME SERIES TO THE OFS PROCESSED DATA BASE.
C
C  ROUTINE INITIALLY WRITTEN BY ERIC ANDERSON - HRL - 6/1981
C
      CHARACTER*4 FDTYPE,DTYPE
      CHARACTER*8 TSID,FTSID,OLDOPN
      CHARACTER*20 DESCRP
C
      DIMENSION D(MD)
      DIMENSION EXTLOC(*),IHEAD(22)
      DIMENSION PLOCAT(2)
      PARAMETER (LARRAY=100)
      DIMENSION ARRAY(LARRAY)
C
      INCLUDE 'common/ionum'
      INCLUDE 'common/fdbug'
      INCLUDE 'common/where'
      INCLUDE 'prdcommon/pdatas'
      INCLUDE 'scommon/sugnlx'
C
C    ================================= RCS keyword statements ==========
      CHARACTER*68     RCSKW1,RCSKW2
      DATA             RCSKW1,RCSKW2 /                                 '
     .$Source: /fs/hseb/ob72/rfc/ofs/src/fcinit_top/RCS/fpdbio.f,v $
     . $',                                                             '
     .$Id: fpdbio.f,v 1.8 2002/02/11 20:20:50 dws Exp $
     . $' /
C    ===================================================================
C      
C
      IF (ITRACE.GE.1) WRITE (IODBUG,*) 'ENTER FPDBIO'     
C
      IOPNUM=0
      CALL FSTWHR ('FPDBIO  ',IOPNUM,OLDOPN,IOLDOP)
C
      IBUG=IFBUG('FPDB')
C
      NUMEXT=0
      NFOUND=1
      LWORK=0
      IWRITE=0
C
C  READ AND PRINT EXTERNAL LOCATION INFORMATION
      IF (ITSTYP.GT.1) GO TO 40
C
C  INPUT AND UPDATE TIME SERIES
      READ (IN,20) TSID,FDTYPE
20    FORMAT (A,3X,A,2F10.1,5X,A)
      CALL TSPRT_FPDB_INPUT ('FPDB',TSID,FDTYPE)
      GO TO 130
C
C  OUTPUT TIME SERIES
40    READ (IN,20) TSID,FDTYPE,PLOCAT,DESCRP
      CALL TSPRT_FPDB_OUTPUT ('FPDB',TSID,FDTYPE,PLOCAT,DESCRP)
C
C  CHECK FOR VALID LAT/LON     
      IF (IUGFIL.EQ.0) CALL SUGTUG (LARRAY,ARRAY,IERR)
      INDERR=0
      IF (PLOCAT(1).LT.ULLMTS(2).OR.PLOCAT(1).GT.ULLMTS(1)) THEN
         INDERR=1
         WRITE (IPR,70) 'LATITUDE',PLOCAT(1),TSID,FDTYPE,
     *      ULLMTS(2),ULLMTS(1)
70    FORMAT ('0**ERROR** ',A,' ',F7.2,' FOR TIME SERIES ',A,
     *       ' AND DATA TYPE ',A4,' IS NOT IN THE RANGE OF ',
     *        F6.2,' THROUGH ',F6.2,'.')
         CALL ERROR
         ENDIF
      IF (PLOCAT(2).LT.ULLMTS(3).OR.PLOCAT(2).GT.ULLMTS(4)) THEN
         INDERR=1
         WRITE (IPR,70) 'LONGITUDE',PLOCAT(2),TSID,FDTYPE,
     *      ULLMTS(3),ULLMTS(4)
         CALL ERROR
         ENDIF
      IF (INDERR.EQ.1) GO TO 470
C     
      IF (DESCRP.EQ.' ') THEN
         WRITE (IPR,120) TSID,FDTYPE
120   FORMAT ('0**WARNING** DESCRIPTION ',
     *   'IS BLANK FOR TIME SERIES ID=',A,' TYPE=',A4,'.')
         CALL WARN
         ENDIF
C
C  CHECK IF VALID DATA TYPE
130   CALL FDCODE (FDTYPE,UNITS,XDIM,MSGX,NPDTX,XTSCAL,NADD,IER)
      IF (IER.NE.0) THEN
         WRITE (IPR,140) FDTYPE
140   FORMAT ('0**ERROR** ',A4,' IS NOT AN ALLOWABLE DATA ',
     *  'TYPE FOR THE FORECAST COMPONENT.')
         CALL ERROR
         GO TO 470
         ENDIF
C
C  CHECK IF DATA TYPES ARE THE SAME
      IF (FDTYPE.EQ.DTYPE) GO TO 240
C
      WRITE (IPR,160) FDTYPE,DTYPE
160   FORMAT ('0**WARNING** EXTERNAL DATA TYPE (',A4,
     * ') IS NOT THE SAME AS THE FORECAST COMPONENT DATA TYPE (',
     * A4,').')
      CALL WARN
C
C  CHECK DIMENSIONS
      IF (XDIM.NE.DIM) THEN
         WRITE (IPR,170) FDTYPE,XDIM,DTYPE,DIM
170   FORMAT ('0**ERROR** DIMENSION CODE FOR DATA TYPE ',A4,' (',A4,
     * ') IS NOT THE SAME AS FOR ',A4,' (',A4,').')
         CALL ERROR
         IER=1
         ENDIF
C
C  CHECK NUMBER OF VALUES PER TIME INTERVAL
      IF (NPDTX.NE.NPDT) THEN
         WRITE (IPR,190) FDTYPE,NPDTX,DTYPE,NPDT
190   FORMAT ('0**ERROR** NUMBER OF VALUES PER TIME INTERVAL ',
     * 'FOR DATA TYPE ',A4,'(',I2,') IS NOT THE SAME AS FOR ',A4,
     * ' (',I2,').')
         CALL ERROR
         IER=1
         ENDIF
C
C  CHECK IF MISSING ALLOWED
      IF (MSG.EQ.1) GO TO 220
      IF (MSGX.EQ.0) GO TO 220
         WRITE (IPR,210) FDTYPE,DTYPE
210   FORMAT ('0**ERROR** DATA TYPE ',A4,
     * ' CAN CONTAIN MISSING VALUES BUT DATA TYPE ',A4,' CANNOT.')
            CALL ERROR
      IER=1
C
C  CHECK TIME SCALE
220   IF (XTSCAL.EQ.TSCALE) GO TO 240
         WRITE (IPR,230) FDTYPE,XTSCAL,DTYPE,TSCALE
230   FORMAT ('0**ERROR** TIME SCALE FOR DATA TYPE ',A4,' (',A4,
     * ') IS NOT THE SAME AS FOR ',A4,' (',A4,').')
         CALL ERROR
         IER=1
C
C  CHECK PROCESSED DATA BASE INFORMATION FOR THE TIME SERIES
240   IF (ITSTYP.GT.1) GO TO 350
C
C  INPUT AND UPDATE TIME SERIES
      MXBUF=1
      CALL RPRDH (TSID,FDTYPE,MXBUF,IHEAD,NXBUF,XBUF,FTSID,ISTAT)
      IF (ISTAT.EQ.1) GO TO 270
      IF ((ISTAT.EQ.0).OR.(ISTAT.EQ.2)) GO TO 290
      IF (ISTAT.NE.3) WRITE (IPR,250)ISTAT
250   FORMAT ('0**ERROR** SYSTEM OR DAIO ERROR OR UNDEFINED ',
     * 'STATUS CODE. ISTAT=',I3)
      IF (ISTAT.EQ.3) WRITE (IPR,260) TSID,FDTYPE
260   FORMAT ('0**ERROR** TIME SERIES FOR IDENTIFIER ',A,
     * ' AND DATA TYPE ',A4,
     * ' DOES NOT MATCH THE ID AND TYPE FOUND IN THE ',
     * 'PROCESSED DATA BASE.')
      CALL ERROR
      IER=1
      GO TO 440
270   WRITE (IPR,280) TSID,FDTYPE
280   FORMAT ('0**WARNING** TIME SERIES FOR IDENTIFIER ',A,
     *     ' AND DATA TYPE ',A4,
     *     ' NOT FOUND IN THE PROCESSED DATA BASE.' /
     * 13X,'ALL TIME SERIES MUST EXIST BEFORE A SEGMENT CAN BE ',
     *     'EXECUTED OR ADDED TO A FORECAST GROUP.')
      CALL WARN
      IF (ITSTYP.EQ.2) GO TO 330
      GO TO 440
290   NFOUND=0
C
C  CHECK TIME INTERVAL
      ITX=IHEAD(2)
      IF (ITSTYP.EQ.2) GO TO 310
C
C  INPUT TIME SERIES
      IF (MOD(ITIME,ITX).EQ.0) GO TO 440
         WRITE (IPR,300) ITIME,ITX
300   FORMAT ('0**ERROR** DATAT TIME INTERVAL OF TIME SERIES (',I2,
     * ') IS NOT A MULTIPLE OF THE TIME INTERVAL ',
     * 'IN THE PROCESSED DATA BASE (',I2,').')
         CALL ERROR
         IER=1
       GO TO 440
C
C  UPDATE TIME SERIES
310   IF (ITIME.EQ.ITX) GO TO 330
         WRITE (IPR,320) ITIME,ITX
320   FORMAT ('0**ERROR** DATA TIME INTERVAL OF TIME SERIES (',
     * I2,') IS NOT THE SAME AS TIME INTERVAL (',I2,
     * ') IN THE PROCESSED DATA BASE.')
         CALL ERROR
         IER=1
C
C  CHECK IF CAN BE WRITTEN BY THE FORECAST COMPONENT
330   IF (IPRDWC(FDTYPE).EQ.1) GO TO 440
         WRITE (IPR,340) FDTYPE
340   FORMAT ('0**ERROR** TIME SERIES WITH A ',A4,
     *   ' DATA TYPE CANNOT BE WRITTEN TO THE PROCESSED DATA BASE ',
     *   'BY THE FORECAST COMPONENT.')
         CALL ERROR
         IER=1
         GO TO 440
C
C  OUTPUT TIME SERIES - CHECK IF CAN BE WRITTEN BY FORECAST COMPONENT
350   IF (IPRDWC(FDTYPE).NE.1) THEN
         WRITE (IPR,340) FDTYPE
         CALL ERROR
         IER=1
         GO TO 440
         ENDIF
C
C  CHECK IF TIME SERIES EXISTS
      CALL RPRDH (TSID,FDTYPE,MXBUF,IHEAD,NXBUF,XBUF,FTSID,IERR)
      IF (IERR.EQ.1) GO TO 400
      IF (IERR.EQ.0.OR.IERR.EQ.2) GO TO 370
      IF (IERR.EQ.3) THEN
         WRITE (IPR,260) TSID,FDTYPE
         CALL ERROR
         IER=1
         ELSE
            WRITE (IPR,250) IERR
            CALL ERROR
            IER=1
         ENDIF
      GO TO 440
C
C  TIME SERIES EXISTS - CHECK TIME INTERVAL
370   NFOUND=0
      ITX=IHEAD(2)
      IF (ITIME.NE.ITX) THEN
         WRITE (IPR,375) ITIME,ITX
375   FORMAT ('0**WARNING** DATA TIME INTERVAL OF TIME SERIES (',
     *     I2,') IS NOT THE SAME AS TIME INTERVAL (',I2,
     *     ') IN THE PROCESSED DATA BASE.' /
     * 13X,'IT WILL BE DELETED AND ',
     *     'RECREATED.')
         CALL WARN
         IFUT=0
         ICKREF=1
         IPRERR=0
         CALL WPRDEL (TSID,FDTYPE,IFUT,ICKREF,IPRERR,IERR)
         IF (IERR.EQ.0) THEN
            WRITE (IPR,376) TSID,FDTYPE
376   FORMAT ('0**NOTE** TIME SERIES FOR IDENTIFIER ',A,
     *   ' AND DATA TYPE ',A4,' SUCCESSFULLY DELETED.')
            ELSE
               IF (IERR.EQ.1) THEN
                  WRITE (IPR,377) TSID,FDTYPE
377   FORMAT ('0**WARNING** TIME SERIES FOR IDENTIFIER ',A,
     *   ' AND DATA TYPE ',A4,' NOT FOUND.')
                  CALL WARN
                  ENDIF
               IF (IERR.EQ.2) THEN
                  WRITE (IPR,378) TSID,FDTYPE 
378   FORMAT ('0**ERROR** TIME SERIES FOR IDENTIFIER ',A,
     *   ' AND DATA TYPE ',A4,' IS USED BY ANOTHER TIME SERIES.') 
                  CALL WARN             
                  ENDIF
               IF (IERR.EQ.3) THEN
               WRITE (IPR,379) FDTYPE
379   FORMAT ('0**ERROR** ',A4,' IS AN INVALID DATA TYPE.') 
                  CALL WARN             
                  ENDIF
               IER=1
               GO TO 440
            ENDIF
         GO TO 400
         ENDIF
      IF (IER.EQ.1) GO TO 440
      FTSID=' '
      NXBUF=0
      CALL WPRDC (TSID,FDTYPE,UNITS,PLOCAT,DESCRP,FTSID,NXBUF,XBUF,
     *   MD,D(1),IREC,IERR)
      IF (IERR.EQ.0.OR.IERR.EQ.8) GO TO 440
         WRITE (IPR,390) TSID,FDTYPE
390   FORMAT ('0**WARNING** PROCESSED DATA BASE HEADER FOR ID=',A,
     * ' DTYPE=',A4,' COULD NOT BE UPDATED.')
         CALL WARN
         GO TO 440
C
400   IF (IER.EQ.1) GO TO 440
C
C  CREATE TIME SERIES
      LTSID=8
      IPACKD=1
      IDCODE=4
      IPRERR=1
      CALL FCIDCK (TSID,LTSID,IPACKD,IDCODE,IPRERR,IERR)
      IF (IERR.NE.0) THEN
         CALL ERROR
         IER=1
         GO TO 440
         ENDIF
      FTSID=' '
      NXBUF=0
      ITX=ITIME
      NPDTV=0
      CALL WPRDH (TSID,FDTYPE,ITX,UNITS,NPDTV,PLOCAT,FTSID,DESCRP,
     *   NXBUF,XBUF,MD,D(1),IREC,ISTAT)
      IF (ISTAT.GT.0) THEN
         WRITE (IPR,430) FDTYPE,TSID,ISTAT
430   FORMAT ('0**ERROR** ',A4,' TIME SERIES FOR IDENTIFIER ',A,
     *  ' NOT SUCCESSFULLY CREATED. WPRDH STATUS CODE = ',I2)
         CALL WARN
         GO TO 440
         ENDIF
      NFOUND=0
      IWRITE=1
C
C  CHECK IF ERRORS ENCOUNTERED
440   IF (IER.EQ.1) GO TO 470
C
C  STORE EXTERNAL LOCATION INFORMATION
      NUMEXT=3
      CALL UMEMOV (TSID,EXTLOC(1),2)
      CALL UMEMOV (FDTYPE,EXTLOC(3),1)
      IF (ITSTYP.EQ.1) GO TO 460
         NUMEXT=11
         EXTLOC(4)=IREC+0.01
         EXTLOC(5)=PLOCAT(1)
         EXTLOC(6)=PLOCAT(2)
         CALL UMEMOV (DESCRP,EXTLOC(7),5)
C
460   IF (NFOUND.EQ.0) THEN
C     COMPUTE SIZE OF WORK BUFFER NEEDED IF TIME SERIES EXISTS
         MAXDAY=IPRDMD(FDTYPE)
         LWORK=((((24/ITX)*NPDTX*MAXDAY+22+NXBUF-1)/LRECLT)+1)*LRECLT
         ENDIF
C
C  CHECK FOR DEBUG OUTPUT
      IF (IBUG.EQ.1) THEN
         WRITE (IODBUG,490) NUMEXT,NFOUND
490   FORMAT (' FPDBIO DEBUG - NUMEXT=',I5,' NFOUND=',I5)
         IF (NUMEXT.GT.0) WRITE (IODBUG,500)(EXTLOC(I),I=1,NUMEXT)
500   FORMAT (' EXTLOC=',2A4,4X,A4,F8.2,2F10.1,5X,5A4)
         IF (IWRITE.EQ.1) THEN
            CALL RPRDH (TSID,FDTYPE,MXBUF,IHEAD,NXBUF,XBUF,FTSID,ISTAT)
            ENDIF
         IF (ISTAT.GT.3) WRITE (IPR,250) ISTAT
         IF (ISTAT.EQ.3) WRITE (IPR,260) TSID,FDTYPE
         IF (ISTAT.GT.2) CALL ERROR
         IF (NFOUND.EQ.0) WRITE (IODBUG,510) IHEAD
510   FORMAT (' IHEAD=',7I8,2X,2A4,2X,A4,2X,A4 / 1X,6I8,2X,5A4)
         ENDIF
C
470   CALL FSTWHR (OLDOPN,IOLDOP,OLDOPN,IOLDOP)

      RETURN
C      
      END
