/**
* This software was developed and / or modified by Raytheon Company,
* pursuant to Contract DG133W-05-CQ-1067 with the US Government.
* 
* U.S. EXPORT CONTROLLED TECHNICAL DATA
* This software product contains export-restricted data whose
* export/transfer/disclosure is restricted by U.S. law. Dissemination
* to non-U.S. persons whether in the United States or abroad requires
* an export license or other authorization.
* 
* Contractor Name:        Raytheon Company
* Contractor Address:     6825 Pine Street, Suite 340
*                         Mail Stop B8
*                         Omaha, NE 68106
*                         402.291.0100
* 
* See the AWIPS II Master Rights File ("Master Rights File.pdf") for
* further licensing information.
**/
package com.raytheon.uf.common.dataplugin.shef.tables;
// default package
// Generated Oct 17, 2008 2:22:17 PM by Hibernate Tools 3.2.2.GA

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

/**
 * Telem generated by hbm2java
 * 
 * 
 * <pre>
 * 
 * SOFTWARE HISTORY
 * Date         Ticket#    Engineer    Description
 * ------------ ---------- ----------- --------------------------
 * Oct 17, 2008                        Initial generation by hbm2java
 * Aug 19, 2011      10672     jkorman Move refactor to new project
 * Oct 07, 2013       2361     njensen Removed XML annotations
 * 
 * </pre>
 * 
 * @author jkorman
 * @version 1.1
 */
@Entity
@Table(name = "telem")
@com.raytheon.uf.common.serialization.annotations.DynamicSerialize
public class Telem extends com.raytheon.uf.common.dataplugin.persist.PersistableDataObject implements java.io.Serializable {

    private static final long serialVersionUID = 1L;

    @com.raytheon.uf.common.serialization.annotations.DynamicSerializeElement
    private String lid;

    @com.raytheon.uf.common.serialization.annotations.DynamicSerializeElement
    private Telmtype telmtype;

    @com.raytheon.uf.common.serialization.annotations.DynamicSerializeElement
    private Telmpayor telmpayor;

    @com.raytheon.uf.common.serialization.annotations.DynamicSerializeElement
    private Location location;

    @com.raytheon.uf.common.serialization.annotations.DynamicSerializeElement
    private Telmowner telmowner;

    @com.raytheon.uf.common.serialization.annotations.DynamicSerializeElement
    private Double cost;

    @com.raytheon.uf.common.serialization.annotations.DynamicSerializeElement
    private String criteria;

    @com.raytheon.uf.common.serialization.annotations.DynamicSerializeElement
    private String phone;

    @com.raytheon.uf.common.serialization.annotations.DynamicSerializeElement
    private String sensorid;

    @com.raytheon.uf.common.serialization.annotations.DynamicSerializeElement
    private String rptfreq;

    @com.raytheon.uf.common.serialization.annotations.DynamicSerializeElement
    private String notify;

    public Telem() {
    }

    public Telem(String lid, Location location) {
        this.lid = lid;
        this.location = location;
    }

    public Telem(String lid, Telmtype telmtype, Telmpayor telmpayor,
            Location location, Telmowner telmowner, Double cost,
            String criteria, String phone, String sensorid, String rptfreq,
            String notify) {
        this.lid = lid;
        this.telmtype = telmtype;
        this.telmpayor = telmpayor;
        this.location = location;
        this.telmowner = telmowner;
        this.cost = cost;
        this.criteria = criteria;
        this.phone = phone;
        this.sensorid = sensorid;
        this.rptfreq = rptfreq;
        this.notify = notify;
    }

    @Id
    @Column(name = "lid", unique = true, nullable = false, length = 8)
    public String getLid() {
        return this.lid;
    }

    public void setLid(String lid) {
        this.lid = lid;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "type")
    public Telmtype getTelmtype() {
        return this.telmtype;
    }

    public void setTelmtype(Telmtype telmtype) {
        this.telmtype = telmtype;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "payor")
    public Telmpayor getTelmpayor() {
        return this.telmpayor;
    }

    public void setTelmpayor(Telmpayor telmpayor) {
        this.telmpayor = telmpayor;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "lid", unique = true, nullable = false, insertable = false, updatable = false)
    public Location getLocation() {
        return this.location;
    }

    public void setLocation(Location location) {
        this.location = location;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "owner")
    public Telmowner getTelmowner() {
        return this.telmowner;
    }

    public void setTelmowner(Telmowner telmowner) {
        this.telmowner = telmowner;
    }

    @Column(name = "cost", precision = 17, scale = 17)
    public Double getCost() {
        return this.cost;
    }

    public void setCost(Double cost) {
        this.cost = cost;
    }

    @Column(name = "criteria", length = 50)
    public String getCriteria() {
        return this.criteria;
    }

    public void setCriteria(String criteria) {
        this.criteria = criteria;
    }

    @Column(name = "phone", length = 12)
    public String getPhone() {
        return this.phone;
    }

    public void setPhone(String phone) {
        this.phone = phone;
    }

    @Column(name = "sensorid", length = 10)
    public String getSensorid() {
        return this.sensorid;
    }

    public void setSensorid(String sensorid) {
        this.sensorid = sensorid;
    }

    @Column(name = "rptfreq", length = 4)
    public String getRptfreq() {
        return this.rptfreq;
    }

    public void setRptfreq(String rptfreq) {
        this.rptfreq = rptfreq;
    }

    @Column(name = "notify", length = 1)
    public String getNotify() {
        return this.notify;
    }

    public void setNotify(String notify) {
        this.notify = notify;
    }

}
