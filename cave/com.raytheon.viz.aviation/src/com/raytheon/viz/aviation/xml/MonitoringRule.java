/**
 * This software was developed and / or modified by Raytheon Company,
 * pursuant to Contract DG133W-05-CQ-1067 with the US Government.
 * 
 * U.S. EXPORT CONTROLLED TECHNICAL DATA
 * This software product contains export-restricted data whose
 * export/transfer/disclosure is restricted by U.S. law. Dissemination
 * to non-U.S. persons whether in the United States or abroad requires
 * an export license or other authorization.
 * 
 * Contractor Name:        Raytheon Company
 * Contractor Address:     6825 Pine Street, Suite 340
 *                         Mail Stop B8
 *                         Omaha, NE 68106
 *                         402.291.0100
 * 
 * See the AWIPS II Master Rights File ("Master Rights File.pdf") for
 * further licensing information.
 **/
package com.raytheon.viz.aviation.xml;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElementWrapper;

/**
 * MonitoringRule class.
 * 
 * <pre>
 * 
 *    SOFTWARE HISTORY
 *   
 *    Date         Ticket#     Engineer    Description
 *    ------------ ----------  ----------- --------------------------
 *    3/21/2008    934         grichard    Initial Creation.
 * 
 * </pre>
 * 
 * @author grichard
 * @version 1.0
 */
@XmlAccessorType(XmlAccessType.NONE)
public class MonitoringRule {

    /**
     * The verbose name of the method to be applied based on configurable rules.
     */
    @XmlElement
    private String verboseMethod;

    /**
     * Severity is the index of the severity color which will be associated with
     * this rule.
     */
    @XmlElement
    private int severity;

    /**
     * Message is a brief message that will be displayed in the TAF Monitor when
     * the monitoring rule is triggered. Message, if set, is the text displayed
     * in the popup window, when the rule evaluates to "True." If message is an
     * empty string, it will be generated by the software.
     */
    @XmlElement
    private String msg;

    /**
     * Unique is a toggle which determines whether the TAF Monitor will show two
     * or more alerts of this type or limit its display to the most severe of
     * the alerts. This feature is useful for rules that key on category
     * differences. If one rule describes a difference of three categories as
     * red while another rule describes a difference of two categories as
     * yellow, situations that satisfy the red rule will always satisfy the
     * yellow rule as well. If the Unique toggle is off, both rules will display
     * in the TAF Monitor. If the Unique toggle is on, only the red rule will
     * display.
     */
    @XmlElement
    private String unique;

    /**
     * Type is the name of the weather element which is monitored by this rule.
     * With each type there is an associated label in the monitoring GUI. This
     * is set in the configuration file etc/gui.cfg. If a rule is used, its type
     * must be listed on the items line.
     */
    @XmlElement
    private String type;

    /**
     * The kind of method to be applied based on configurable rules.
     */
    @XmlElement
    private String method;

    /**
     * Args is an array of String arguments for the monitoring rule.
     */
    @XmlElement(name = "arg")
    @XmlElementWrapper(name = "args")
    private String[] args;

    /**
     * Default Constructor
     */
    public MonitoringRule() {
    }

    /**
     * Copy Constructor
     * 
     * @param rule
     */
    public MonitoringRule(MonitoringRule rule) {
        this.severity = rule.getSeverity();
        this.msg = rule.getMsg();
        this.unique = rule.getUnique();
        this.type = rule.getType();
        this.method = rule.getMethod();
        this.args = rule.getArgs();
    }

    /**
     * Getters and Setters
     */

    /**
     * Method that gets the verbose method
     * 
     * @return the verboseMethod
     */
    public String getVerboseMethod() {
        return verboseMethod;
    }

    /**
     * Method that sets the verbose method
     * 
     * @param verboseMethod
     *            the verboseMethod to set
     */
    public void setVerboseMethod(String verboseMethod) {
        this.verboseMethod = verboseMethod;
    }

    /**
     * Method that gets the severity
     * 
     * @return the severity
     */
    public int getSeverity() {
        return severity;
    }

    /**
     * Method that sets the severity
     * 
     * @param severity
     *            the severity to set
     */
    public void setSeverity(int severity) {
        this.severity = severity;
    }

    /**
     * Method that gets the message
     * 
     * @return the msg
     */
    public String getMsg() {
        return msg;
    }

    /**
     * Method that sets the message
     * 
     * @param msg
     *            the msg to set
     */
    public void setMsg(String msg) {
        this.msg = msg;
    }

    /**
     * Method that gets the unique setting
     * 
     * @return the unique
     */
    public String getUnique() {
        return unique;
    }

    /**
     * Method that sets the unique setting
     * 
     * @param unique
     *            the unique to set
     */
    public void setUnique(String unique) {
        this.unique = unique;
    }

    /**
     * Method that gets the type
     * 
     * @return the type
     */
    public String getType() {
        return type;
    }

    /**
     * Method that sets the type
     * 
     * @param type
     *            the type to set
     */
    public void setType(String type) {
        this.type = type;
    }

    /**
     * Method that gets the method
     * 
     * @return the method
     */
    public String getMethod() {
        return method;
    }

    /**
     * Method that sets the method
     * 
     * @param method
     *            the method to set
     */
    public void setMethod(String method) {
        this.method = method;
    }

    /**
     * Method that gets the arguments
     * 
     * @return the args
     */
    public String[] getArgs() {
        return args;
    }

    /**
     * Method that sets the arguments
     * 
     * @param args
     *            the args to set
     */
    public void setArgs(String[] args) {
        this.args = args;
    }

}
